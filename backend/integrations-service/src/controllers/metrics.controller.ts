import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { MetricsService, AlertConfiguration } from '../services/metrics.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';

@ApiTags('Metrics & Health')
@Controller('metrics')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class MetricsController {
  private readonly logger = new Logger(MetricsController.name);

  constructor(private readonly metricsService: MetricsService) {}

  @Get('system')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        totalEndpoints: { type: 'number', description: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π' },
        activeEndpoints: { type: 'number', description: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
        healthyEndpoints: { type: 'number', description: '–ó–¥–æ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' },
        errorEndpoints: { type: 'number', description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏' },
        totalMessages: { type: 'number', description: '–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π' },
        totalErrors: { type: 'number', description: '–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫' },
        systemUptime: { type: 'number', description: '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ –º—Å' },
        memoryUsage: { 
          type: 'object',
          properties: {
            used: { type: 'number' },
            total: { type: 'number' },
            percentage: { type: 'number' }
          }
        },
        cpuUsage: { type: 'number', description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU' },
        redisConnectionCount: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π' }
      }
    }
  })
  async getSystemMetrics() {
    return await this.metricsService.getSystemMetrics();
  }

  @Get('alerts')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          endpointId: { type: 'string' },
          type: { type: 'string' },
          severity: { type: 'string', enum: ['low', 'medium', 'high', 'critical'] },
          message: { type: 'string' },
          value: { type: 'number' },
          threshold: { type: 'number' },
          triggeredAt: { type: 'string', format: 'date-time' },
          acknowledged: { type: 'boolean' },
          acknowledgedBy: { type: 'string' },
          acknowledgedAt: { type: 'string', format: 'date-time' },
          resolvedAt: { type: 'string', format: 'date-time' },
          metadata: { type: 'object' }
        }
      }
    }
  })
  @ApiQuery({ name: 'severity', required: false, enum: ['low', 'medium', 'high', 'critical'], description: '–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏' })
  @ApiQuery({ name: 'endpointId', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' })
  @ApiQuery({ name: 'acknowledged', required: false, type: Boolean, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' })
  async getActiveAlerts(
    @Query('severity') severity?: string,
    @Query('endpointId') endpointId?: string,
    @Query('acknowledged') acknowledged?: boolean,
  ) {
    let alerts = await this.metricsService.getActiveAlerts();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (severity) {
      alerts = alerts.filter(alert => alert.severity === severity);
    }

    if (endpointId) {
      alerts = alerts.filter(alert => alert.endpointId === endpointId);
    }

    if (acknowledged !== undefined) {
      alerts = alerts.filter(alert => alert.acknowledged === acknowledged);
    }

    return alerts;
  }

  @Post('alerts')
  @ApiOperation({ 
    summary: '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.CREATED, 
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞'
  })
  @ApiBody({
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞',
    examples: {
      errorRateAlert: {
        summary: '–ê–ª–µ—Ä—Ç –ø–æ —É—Ä–æ–≤–Ω—é –æ—à–∏–±–æ–∫',
        value: {
          endpointId: '12345678-1234-1234-1234-123456789012',
          type: 'error_rate',
          threshold: 15,
          timeWindow: 300,
          enabled: true,
          notificationChannels: ['email', 'webhook'],
          cooldownPeriod: 900
        }
      },
      processingDelayAlert: {
        summary: '–ê–ª–µ—Ä—Ç –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        value: {
          endpointId: '12345678-1234-1234-1234-123456789012',
          type: 'processing_delay',
          threshold: 30000,
          timeWindow: 600,
          enabled: true,
          notificationChannels: ['webhook'],
          cooldownPeriod: 1800
        }
      }
    }
  })
  async createAlert(@Body() config: AlertConfiguration): Promise<void> {
    this.logger.log(`üö® –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${config.endpointId}: ${config.type}`);
    await this.metricsService.createAlert(config);
  }

  @Put('alerts/:alertId/acknowledge')
  @ApiOperation({ 
    summary: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç',
    description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
  })
  @ApiParam({ name: 'alertId', description: 'ID –∞–ª–µ—Ä—Ç–∞' })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        userId: { type: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ –∞–ª–µ—Ä—Ç' }
      },
      required: ['userId']
    }
  })
  async acknowledgeAlert(
    @Param('alertId') alertId: string,
    @Body('userId') userId: string,
  ): Promise<void> {
    this.logger.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ ${alertId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    await this.metricsService.acknowledgeAlert(alertId, userId);
  }

  @Put('alerts/:alertId/resolve')
  @ApiOperation({ 
    summary: '–†–∞–∑—Ä–µ—à–∏—Ç—å –∞–ª–µ—Ä—Ç',
    description: '–ü–æ–º–µ—á–∞–µ—Ç –∞–ª–µ—Ä—Ç –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω'
  })
  @ApiParam({ name: 'alertId', description: 'ID –∞–ª–µ—Ä—Ç–∞' })
  async resolveAlert(@Param('alertId') alertId: string): Promise<void> {
    this.logger.log(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ ${alertId}`);
    await this.metricsService.resolveAlert(alertId);
  }

  @Get('dashboards/overview')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–∑–æ—Ä–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        systemMetrics: { type: 'object' },
        activeAlerts: { 
          type: 'object',
          properties: {
            total: { type: 'number' },
            critical: { type: 'number' },
            high: { type: 'number' },
            medium: { type: 'number' },
            low: { type: 'number' }
          }
        },
        topPerformers: { 
          type: 'array',
          items: {
            type: 'object',
            properties: {
              endpointId: { type: 'string' },
              name: { type: 'string' },
              throughputPerMinute: { type: 'number' },
              errorRate: { type: 'number' },
              uptime: { type: 'number' }
            }
          }
        },
        problematicEndpoints: { 
          type: 'array',
          items: {
            type: 'object',
            properties: {
              endpointId: { type: 'string' },
              name: { type: 'string' },
              status: { type: 'string' },
              errorRate: { type: 'number' },
              lastError: { type: 'string' }
            }
          }
        },
        messageVolumeChart: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              timestamp: { type: 'string' },
              received: { type: 'number' },
              processed: { type: 'number' },
              failed: { type: 'number' }
            }
          }
        }
      }
    }
  })
  @ApiQuery({ name: 'timeRange', required: false, enum: ['1h', '6h', '24h', '7d', '30d'], description: '–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–∞–Ω–Ω—ã—Ö' })
  async getOverviewDashboard(@Query('timeRange') timeRange: string = '24h') {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const systemMetrics = await this.metricsService.getSystemMetrics();

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    const alerts = await this.metricsService.getActiveAlerts();
    const activeAlerts = {
      total: alerts.length,
      critical: alerts.filter(a => a.severity === 'critical').length,
      high: alerts.filter(a => a.severity === 'high').length,
      medium: alerts.filter(a => a.severity === 'medium').length,
      low: alerts.filter(a => a.severity === 'low').length,
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –ë–î)
    const topPerformers = [
      {
        endpointId: 'endpoint-1',
        name: 'Main Gate OCR',
        throughputPerMinute: 45.5,
        errorRate: 2.1,
        uptime: 99.8
      },
      {
        endpointId: 'endpoint-2', 
        name: 'Equipment GPS Tracker',
        throughputPerMinute: 120.3,
        errorRate: 0.5,
        uptime: 100.0
      },
      {
        endpointId: 'endpoint-3',
        name: 'RFID Gate Reader',
        throughputPerMinute: 78.2,
        errorRate: 1.8,
        uptime: 98.7
      }
    ];

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    const problematicEndpoints = [
      {
        endpointId: 'endpoint-4',
        name: '1C Integration',
        status: 'error',
        errorRate: 25.6,
        lastError: 'Connection timeout to 1C server'
      }
    ];

    // –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã (–∑–∞–≥–ª—É—à–∫–∞)
    const messageVolumeChart = [];
    const now = new Date();
    const hoursToShow = timeRange === '1h' ? 1 : timeRange === '6h' ? 6 : 24;
    
    for (let i = hoursToShow - 1; i >= 0; i--) {
      const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);
      messageVolumeChart.push({
        timestamp: timestamp.toISOString(),
        received: Math.floor(Math.random() * 100) + 50,
        processed: Math.floor(Math.random() * 95) + 45,
        failed: Math.floor(Math.random() * 10),
      });
    }

    return {
      systemMetrics,
      activeAlerts,
      topPerformers,
      problematicEndpoints,
      messageVolumeChart,
    };
  }

  @Get('dashboards/performance')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã'
  })
  @ApiQuery({ name: 'endpointId', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' })
  @ApiQuery({ name: 'timeRange', required: false, enum: ['1h', '6h', '24h', '7d', '30d'], description: '–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω' })
  async getPerformanceDashboard(
    @Query('endpointId') endpointId?: string,
    @Query('timeRange') timeRange: string = '24h',
  ) {
    if (endpointId) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      const metrics = await this.metricsService.getEndpointMetrics(endpointId);
      
      if (!metrics) {
        return { error: '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏' };
      }

      return {
        endpoint: {
          id: metrics.endpointId,
          name: metrics.endpointName,
          type: metrics.type
        },
        currentMetrics: {
          messagesReceived: metrics.messagesReceived,
          messagesProcessed: metrics.messagesProcessed,
          messagesFailed: metrics.messagesFailed,
          errorRate: metrics.errorRate,
          averageProcessingTime: metrics.averageProcessingTime,
          throughputPerMinute: metrics.throughputPerMinute,
          uptime: metrics.uptime
        },
        latencyDistribution: {
          p50: metrics.latencyP50,
          p95: metrics.latencyP95,
          p99: metrics.latencyP99
        },
        hourlyStats: metrics.hourlyStats,
        healthStatus: {
          isHealthy: metrics.errorRate < 10 && metrics.uptime > 0,
          lastProcessedAt: metrics.lastProcessedAt
        }
      };
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const systemMetrics = await this.metricsService.getSystemMetrics();
    
    return {
      summary: {
        totalMessages: systemMetrics.totalMessages,
        totalErrors: systemMetrics.totalErrors,
        averageErrorRate: systemMetrics.totalMessages > 0 
          ? (systemMetrics.totalErrors / systemMetrics.totalMessages) * 100 
          : 0,
        activeEndpoints: systemMetrics.activeEndpoints,
        healthyEndpoints: systemMetrics.healthyEndpoints
      },
      systemResources: {
        memoryUsage: systemMetrics.memoryUsage,
        cpuUsage: systemMetrics.cpuUsage,
        redisConnections: systemMetrics.redisConnectionCount
      }
    };
  }

  @Get('health')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        overall: { 
          type: 'string', 
          enum: ['healthy', 'degraded', 'unhealthy'],
          description: '–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã'
        },
        score: { 
          type: 'number', 
          minimum: 0, 
          maximum: 100,
          description: '–û–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (0-100)'
        },
        components: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              name: { type: 'string' },
              status: { type: 'string', enum: ['up', 'down', 'degraded'] },
              message: { type: 'string' },
              responseTime: { type: 'number' }
            }
          }
        },
        integrations: {
          type: 'object',
          properties: {
            total: { type: 'number' },
            healthy: { type: 'number' },
            degraded: { type: 'number' },
            down: { type: 'number' }
          }
        },
        criticalAlerts: { type: 'number' }
      }
    }
  })
  async getHealthStatus() {
    const systemMetrics = await this.metricsService.getSystemMetrics();
    const alerts = await this.metricsService.getActiveAlerts();
    const criticalAlerts = alerts.filter(a => a.severity === 'critical').length;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const components = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
    components.push({
      name: 'Database',
      status: 'up',
      message: 'PostgreSQL connection healthy',
      responseTime: 5
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    components.push({
      name: 'Redis',
      status: systemMetrics.redisConnectionCount > 0 ? 'up' : 'down',
      message: `${systemMetrics.redisConnectionCount} connections active`,
      responseTime: 2
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    const memoryStatus = systemMetrics.memoryUsage.percentage < 80 ? 'up' : 
                        systemMetrics.memoryUsage.percentage < 90 ? 'degraded' : 'down';
    components.push({
      name: 'Memory',
      status: memoryStatus,
      message: `${systemMetrics.memoryUsage.percentage.toFixed(1)}% used`,
      responseTime: 0
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è
    let healthScore = 100;
    
    // –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const inactiveRatio = (systemMetrics.totalEndpoints - systemMetrics.activeEndpoints) / systemMetrics.totalEndpoints;
    healthScore -= inactiveRatio * 20;
    
    // –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    const errorRatio = systemMetrics.errorEndpoints / systemMetrics.totalEndpoints;
    healthScore -= errorRatio * 30;
    
    // –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
    healthScore -= criticalAlerts * 10;
    
    // –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    if (systemMetrics.memoryUsage.percentage > 90) {
      healthScore -= 20;
    } else if (systemMetrics.memoryUsage.percentage > 80) {
      healthScore -= 10;
    }

    healthScore = Math.max(0, Math.min(100, healthScore));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const overall = healthScore >= 80 ? 'healthy' : 
                   healthScore >= 60 ? 'degraded' : 'unhealthy';

    return {
      overall,
      score: Math.round(healthScore),
      components,
      integrations: {
        total: systemMetrics.totalEndpoints,
        healthy: systemMetrics.healthyEndpoints,
        degraded: systemMetrics.activeEndpoints - systemMetrics.healthyEndpoints - systemMetrics.errorEndpoints,
        down: systemMetrics.errorEndpoints
      },
      criticalAlerts
    };
  }

  @Post('collect')
  @ApiOperation({ 
    summary: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω'
  })
  async forceMetricsCollection() {
    this.logger.log('üìä –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫');
    await this.metricsService.collectMetrics();
    
    return {
      message: '–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
      timestamp: new Date().toISOString()
    };
  }
}