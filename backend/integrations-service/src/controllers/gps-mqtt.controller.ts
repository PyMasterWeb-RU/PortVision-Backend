import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { MqttProcessor, MqttProcessingRequest, EquipmentTrackingReport } from '../processors/mqtt.processor';
import { IntegrationEndpointService } from '../services/integration-endpoint.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { IntegrationType } from '../entities/integration-endpoint.entity';

@ApiTags('GPS/MQTT Tracking')
@Controller('gps-mqtt')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class GpsMqttController {
  private readonly logger = new Logger(GpsMqttController.name);

  constructor(
    private readonly mqttProcessor: MqttProcessor,
    private readonly integrationEndpointService: IntegrationEndpointService,
  ) {}

  @Post(':endpointId/connect')
  @ApiOperation({ 
    summary: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É',
    description: '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º –¥–ª—è GPS –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        action: { type: 'string' },
        endpointId: { type: 'string' },
        connectedDevices: { type: 'number' },
        activeSubscriptions: { type: 'number' },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async connect(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    const request: MqttProcessingRequest = {
      endpointId,
      action: 'connect',
    };

    this.logger.log(`üîó –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.mqttProcessor.processMqttRequest(request, endpoint);
  }

  @Post(':endpointId/disconnect')
  @ApiOperation({ 
    summary: '–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞',
    description: '–†–∞–∑—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async disconnect(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    const request: MqttProcessingRequest = {
      endpointId,
      action: 'disconnect',
    };

    this.logger.log(`üîå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MQTT –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.mqttProcessor.processMqttRequest(request, endpoint);
  }

  @Post(':endpointId/subscribe')
  @ApiOperation({ 
    summary: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ MQTT —Ç–æ–ø–∏–∫–∏',
    description: '–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ MQTT —Ç–æ–ø–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è GPS –¥–∞–Ω–Ω—ã—Ö'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiBody({
    description: '–¢–æ–ø–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏',
    schema: {
      type: 'object',
      properties: {
        topics: { 
          type: 'array', 
          items: { type: 'string' },
          description: '–°–ø–∏—Å–æ–∫ MQTT —Ç–æ–ø–∏–∫–æ–≤'
        },
        qos: { 
          type: 'number', 
          enum: [0, 1, 2],
          description: '–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è MQTT'
        }
      },
      required: ['topics']
    },
    examples: {
      gpsTopics: {
        summary: 'GPS —Ç–æ–ø–∏–∫–∏',
        value: {
          topics: [
            'gps/+/position',
            'gps/+/status',
            'equipment/+/telemetry'
          ],
          qos: 1
        }
      },
      deviceSpecific: {
        summary: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        value: {
          topics: [
            'gps/RTG001/position',
            'gps/RS002/position',
            'gps/TR003/position'
          ],
          qos: 2
        }
      }
    }
  })
  async subscribe(
    @Param('endpointId') endpointId: string,
    @Body() body: { topics: string[]; qos?: 0 | 1 | 2 },
  ) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    if (!body.topics || !Array.isArray(body.topics) || body.topics.length === 0) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ø–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    const request: MqttProcessingRequest = {
      endpointId,
      action: 'subscribe',
      topics: body.topics,
      qos: body.qos || 1,
    };

    this.logger.log(`üì° –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${body.topics.join(', ')}`);

    return await this.mqttProcessor.processMqttRequest(request, endpoint);
  }

  @Post(':endpointId/publish')
  @ApiOperation({ 
    summary: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MQTT',
    description: '–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MQTT —Ç–æ–ø–∏–∫'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiBody({
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'object', description: '–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
        metadata: { type: 'object', description: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ' }
      },
      required: ['message']
    },
    examples: {
      commandMessage: {
        summary: '–ö–æ–º–∞–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é',
        value: {
          message: {
            deviceId: 'RTG001',
            command: 'move_to_position',
            parameters: {
              latitude: 59.931089,
              longitude: 30.360655,
              speed: 10
            }
          },
          metadata: {
            operatorId: 'OP_001',
            sessionId: 'session_123'
          }
        }
      },
      statusUpdate: {
        summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞',
        value: {
          message: {
            deviceId: 'RS002',
            status: 'maintenance_required',
            timestamp: '2024-01-20T10:30:00Z'
          }
        }
      }
    }
  })
  async publish(
    @Param('endpointId') endpointId: string,
    @Body() body: { message: any; metadata?: any },
  ) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    if (!body.message) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }

    const request: MqttProcessingRequest = {
      endpointId,
      action: 'publish',
      message: body.message,
      metadata: body.metadata,
    };

    this.logger.log(`üì§ –ó–∞–ø—Ä–æ—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.mqttProcessor.processMqttRequest(request, endpoint);
  }

  @Get(':endpointId/devices')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö GPS —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        devices: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              deviceId: { type: 'string' },
              equipmentId: { type: 'string' },
              equipmentType: { type: 'string' },
              position: { type: 'object' },
              operationalStatus: { type: 'string' },
              workingArea: { type: 'string' },
              alerts: { type: 'array', items: { type: 'string' } }
            }
          }
        },
        total: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async getDevices(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    const connectedDevices = await this.mqttProcessor.getConnectedDevices(endpointId);
    const devices = Array.from(connectedDevices.values());

    this.logger.debug(`üì± –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);

    return {
      devices,
      total: devices.length,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/devices/:deviceId')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GPS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        deviceId: { type: 'string' },
        equipmentId: { type: 'string' },
        equipmentType: { type: 'string' },
        position: {
          type: 'object',
          properties: {
            latitude: { type: 'number' },
            longitude: { type: 'number' },
            speed: { type: 'number' },
            heading: { type: 'number' },
            timestamp: { type: 'string', format: 'date-time' },
            status: { type: 'string' }
          }
        },
        operationalStatus: { type: 'string' },
        workingArea: { type: 'string' },
        assignedTask: { type: 'string' },
        operatorId: { type: 'string' },
        alerts: { type: 'array', items: { type: 'string' } },
        lastMaintenance: { type: 'string', format: 'date-time' },
        nextMaintenance: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiParam({ name: 'deviceId', description: 'ID GPS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' })
  async getDevice(
    @Param('endpointId') endpointId: string,
    @Param('deviceId') deviceId: string,
  ) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    const deviceStatus = await this.mqttProcessor.getDeviceStatus(deviceId);
    
    if (!deviceStatus) {
      throw new BadRequestException(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    this.logger.debug(`üì± –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return deviceStatus;
  }

  @Get(':endpointId/zones/:zoneId/devices')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∑–æ–Ω–µ',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–æ–Ω–µ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        zoneId: { type: 'string' },
        devices: { type: 'array' },
        total: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiParam({ name: 'zoneId', description: 'ID –∑–æ–Ω—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (main_gate, container_yard, quay_area, maintenance_area)' })
  async getDevicesInZone(
    @Param('endpointId') endpointId: string,
    @Param('zoneId') zoneId: string,
  ) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    const devices = await this.mqttProcessor.getDevicesInZone(zoneId);

    this.logger.debug(`üìç –ó–∞–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–æ–Ω–µ ${zoneId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);

    return {
      zoneId,
      devices,
      total: devices.length,
    };
  }

  @Get(':endpointId/stats')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É GPS/MQTT',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö –∏ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        connections: { type: 'object' },
        processedMessages: { type: 'number' },
        activeConnections: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async getStats(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    return await this.mqttProcessor.getProcessingStats(endpointId);
  }

  @Get(':endpointId/health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ GPS/MQTT',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è GPS/MQTT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async getHealth(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    return await this.mqttProcessor.healthCheck();
  }

  @Post(':endpointId/test-connection')
  @ApiOperation({ 
    summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        responseTime: { type: 'number' },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  async testConnection(@Param('endpointId') endpointId: string) {
    const startTime = Date.now();
    const endpoint = await this.validateGpsEndpoint(endpointId);

    try {
      const success = await this.mqttProcessor.testMqttConnection(endpoint);
      const responseTime = Date.now() - startTime;

      this.logger.log(`${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${endpoint.name}: ${responseTime}ms`);

      return {
        success,
        message: success 
          ? `–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º ${endpoint.connectionConfig.host} —É—Å–ø–µ—à–µ–Ω`
          : `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MQTT –±—Ä–æ–∫–µ—Ä–æ–º ${endpoint.connectionConfig.host}`,
        responseTime,
        details: {
          host: endpoint.connectionConfig.host,
          port: endpoint.connectionConfig.port,
          protocol: endpoint.connectionConfig.protocol,
          clientId: endpoint.connectionConfig.mqttConfig?.clientId,
        },
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`,
        responseTime,
        details: {
          error: error.message,
        },
      };
    }
  }

  @Post(':endpointId/reports/tracking')
  @ApiOperation({ 
    summary: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
    description: '–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
    type: Object,
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞',
    schema: {
      type: 'object',
      properties: {
        deviceIds: { 
          type: 'array', 
          items: { type: 'string' },
          description: '–°–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞'
        },
        startTime: { 
          type: 'string', 
          format: 'date-time',
          description: '–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞'
        },
        endTime: { 
          type: 'string', 
          format: 'date-time',
          description: '–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞'
        }
      },
      required: ['deviceIds', 'startTime', 'endTime']
    },
    examples: {
      dailyReport: {
        summary: '–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç',
        value: {
          deviceIds: ['RTG001', 'RS002', 'TR003'],
          startTime: '2024-01-20T00:00:00Z',
          endTime: '2024-01-20T23:59:59Z'
        }
      },
      weeklyReport: {
        summary: '–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç',
        value: {
          deviceIds: ['RTG001', 'RTG002', 'RMG001'],
          startTime: '2024-01-14T00:00:00Z',
          endTime: '2024-01-20T23:59:59Z'
        }
      }
    }
  })
  async generateTrackingReport(
    @Param('endpointId') endpointId: string,
    @Body() body: {
      deviceIds: string[];
      startTime: string;
      endTime: string;
    },
  ): Promise<EquipmentTrackingReport> {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    if (!body.deviceIds || !Array.isArray(body.deviceIds) || body.deviceIds.length === 0) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞');
    }

    const startTime = new Date(body.startTime);
    const endTime = new Date(body.endTime);

    if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞');
    }

    if (startTime >= endTime) {
      throw new BadRequestException('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è');
    }

    this.logger.log(
      `üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ` +
      `${body.deviceIds.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø–µ—Ä–∏–æ–¥ ${startTime.toISOString()} - ${endTime.toISOString()}`
    );

    return await this.mqttProcessor.generateTrackingReport(body.deviceIds, startTime, endTime);
  }

  @Post(':endpointId/clear-data')
  @ApiOperation({ 
    summary: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
    description: '–û—á–∏—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPS/MQTT' })
  @ApiQuery({ name: 'deviceId', required: false, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ)' })
  async clearData(
    @Param('endpointId') endpointId: string,
    @Query('deviceId') deviceId?: string,
  ) {
    const endpoint = await this.validateGpsEndpoint(endpointId);

    await this.mqttProcessor.clearDeviceData(deviceId);

    const message = deviceId 
      ? `–î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} –æ—á–∏—â–µ–Ω—ã`
      : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω—ã';

    this.logger.log(`üßπ ${message} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('supported-protocols')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö GPS –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
    schema: {
      type: 'object',
      properties: {
        gpsProtocols: { type: 'array', items: { type: 'string' } },
        mqttVersions: { type: 'array', items: { type: 'string' } },
        coordinateSystems: { type: 'array', items: { type: 'string' } },
        equipmentTypes: { type: 'array', items: { type: 'string' } },
        zones: { type: 'array', items: { type: 'object' } }
      }
    }
  })
  async getSupportedProtocols() {
    return {
      gpsProtocols: ['wialon', 'galileosky', 'teltonika', 'custom', 'json'],
      mqttVersions: ['3.1.1', '5.0'],
      coordinateSystems: ['wgs84', 'gsk-2011', 'pulkovo42'],
      equipmentTypes: ['rtg', 'rmg', 'reach_stacker', 'forklift', 'truck', 'trailer', 'chassis'],
      messageFormats: ['json', 'binary', 'text'],
      qosLevels: [0, 1, 2],
      zones: [
        { id: 'main_gate', name: '–ì–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞', type: 'gate' },
        { id: 'container_yard', name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞', type: 'yard' },
        { id: 'quay_area', name: '–ü—Ä–∏—á–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞', type: 'quay' },
        { id: 'maintenance_area', name: '–ó–æ–Ω–∞ –¢–û', type: 'maintenance' },
      ],
    };
  }

  private async validateGpsEndpoint(endpointId: string) {
    const endpoint = await this.integrationEndpointService.findOne(endpointId);
    
    if (endpoint.type !== IntegrationType.GPS_GLONASS && endpoint.type !== IntegrationType.MQTT_BROKER) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è GPS/MQTT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π`);
    }

    if (!endpoint.isActive) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
    }

    return endpoint;
  }
}