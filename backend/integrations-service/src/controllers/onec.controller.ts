import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { 
  OneCProcessor, 
  OneCProcessingRequest, 
  OneCReportData 
} from '../processors/onec.processor';
import { OneCDocumentType } from '../adapters/onec.adapter';
import { IntegrationEndpointService } from '../services/integration-endpoint.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { IntegrationType } from '../entities/integration-endpoint.entity';

@ApiTags('1C Integration')
@Controller('onec')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class OneCController {
  private readonly logger = new Logger(OneCController.name);

  constructor(
    private readonly onecProcessor: OneCProcessor,
    private readonly integrationEndpointService: IntegrationEndpointService,
  ) {}

  @Post(':endpointId/sync-clients')
  @ApiOperation({ 
    summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–°',
    description: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ 1–° –≤ PortVision 360'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ö–ª–∏–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            clientsCount: { type: 'number' },
            clients: { type: 'array' },
            eventId: { type: 'string' }
          }
        },
        processingTime: { type: 'number' },
        exchangeStats: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            sessionId: { type: 'string' },
            organizationId: { type: 'string' }
          }
        }
      }
    },
    examples: {
      syncClients: {
        summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
        value: {
          metadata: {
            operatorId: 'OP_001',
            sessionId: 'session_123',
            organizationId: 'main_org'
          }
        }
      }
    }
  })
  async syncClients(
    @Param('endpointId') endpointId: string,
    @Body() body: { metadata?: any },
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'sync_clients',
      metadata: body.metadata,
    };

    this.logger.log(`üë• –ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Post(':endpointId/sync-services')
  @ApiOperation({ 
    summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏ –∏–∑ 1–°',
    description: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥ –∏–∑ 1–° –≤ PortVision 360'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–£—Å–ª—É–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            servicesCount: { type: 'number' },
            services: { type: 'array' },
            eventId: { type: 'string' }
          }
        },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        metadata: { type: 'object' }
      }
    },
    examples: {
      syncServices: {
        summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥',
        value: {
          metadata: {
            operatorId: 'OP_001',
            organizationId: 'main_org'
          }
        }
      }
    }
  })
  async syncServices(
    @Param('endpointId') endpointId: string,
    @Body() body: { metadata?: any },
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'sync_services',
      metadata: body.metadata,
    };

    this.logger.log(`üîß –ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥ –∏–∑ 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Post(':endpointId/create-invoice')
  @ApiOperation({ 
    summary: '–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –≤ 1–°',
    description: '–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ 1–° –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PortVision 360'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ 1–°',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: { type: 'string', description: 'ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ 1–°' },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiBody({
    description: '–î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è',
    schema: {
      type: 'object',
      properties: {
        invoiceData: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            number: { type: 'string' },
            date: { type: 'string', format: 'date' },
            clientId: { type: 'string', description: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ 1–°' },
            currency: { type: 'string', default: 'RUB' },
            totalAmount: { type: 'number' },
            lines: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  serviceId: { type: 'string' },
                  serviceName: { type: 'string' },
                  description: { type: 'string' },
                  quantity: { type: 'number' },
                  unitPrice: { type: 'number' },
                  totalAmount: { type: 'number' },
                  vatRate: { type: 'number', default: 20 },
                  containerNumber: { type: 'string' },
                  vesselName: { type: 'string' },
                  voyage: { type: 'string' }
                }
              }
            }
          },
          required: ['clientId', 'lines']
        },
        metadata: { type: 'object' }
      },
      required: ['invoiceData']
    },
    examples: {
      containerHandlingInvoice: {
        summary: '–°—á–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        value: {
          invoiceData: {
            id: 'PV_INV_001',
            number: '–°–ß-001-2024',
            date: '2024-01-20',
            clientId: '1c_client_123',
            currency: 'RUB',
            totalAmount: 75000,
            lines: [
              {
                id: 'line_1',
                serviceId: '1c_service_discharge',
                serviceName: '–í—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 40HC',
                description: '–í—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Å—É–¥–Ω–∞ MSC OSCAR',
                quantity: 10,
                unitPrice: 5000,
                totalAmount: 50000,
                vatRate: 20,
                containerNumber: 'MSCU1234567',
                vesselName: 'MSC OSCAR',
                voyage: '2401E'
              },
              {
                id: 'line_2',
                serviceId: '1c_service_storage',
                serviceName: '–•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
                description: '–•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ',
                quantity: 5,
                unitPrice: 5000,
                totalAmount: 25000,
                vatRate: 20,
                containerNumber: 'MSCU1234567'
              }
            ]
          },
          metadata: {
            operatorId: 'OP_001',
            organizationId: 'main_org',
            priority: 'normal'
          }
        }
      }
    }
  })
  async createInvoice(
    @Param('endpointId') endpointId: string,
    @Body() body: { invoiceData: any; metadata?: any },
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    if (!body.invoiceData) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞');
    }

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'create_invoice',
      documentData: body.invoiceData,
      metadata: body.metadata,
    };

    this.logger.log(`üí∞ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –≤ 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Post(':endpointId/create-operation')
  @ApiOperation({ 
    summary: '–°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ 1–°',
    description: '–°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ 1–° –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PortVision 360'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ 1–°'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiBody({
    description: '–î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è',
    schema: {
      type: 'object',
      properties: {
        operationData: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            operationType: { type: 'string', enum: ['gate_in', 'gate_out', 'discharge', 'load', 'shift', 'inspection'] },
            containerNumber: { type: 'string' },
            vesselName: { type: 'string' },
            voyage: { type: 'string' },
            equipmentId: { type: 'string' },
            operatorId: { type: 'string' },
            timestamp: { type: 'string', format: 'date-time' },
            locationFrom: { type: 'string' },
            locationTo: { type: 'string' }
          },
          required: ['operationType', 'containerNumber']
        },
        metadata: { type: 'object' }
      },
      required: ['operationData']
    },
    examples: {
      dischargeOperation: {
        summary: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
        value: {
          operationData: {
            id: 'PV_OP_001',
            operationType: 'discharge',
            containerNumber: 'MSCU1234567',
            vesselName: 'MSC OSCAR',
            voyage: '2401E',
            equipmentId: 'STS_CRANE_01',
            operatorId: 'CRANE_OP_001',
            timestamp: '2024-01-20T14:30:00Z',
            locationFrom: 'VESSEL_BAY_01',
            locationTo: 'YARD_A_01_02'
          },
          metadata: {
            operatorId: 'OP_001',
            organizationId: 'main_org'
          }
        }
      },
      gateOperation: {
        summary: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ä–µ–∑–¥–∞ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª',
        value: {
          operationData: {
            id: 'PV_OP_002',
            operationType: 'gate_in',
            containerNumber: 'TCLU7654321',
            equipmentId: 'TRUCK_12345',
            operatorId: 'GATE_OP_001',
            timestamp: '2024-01-20T09:15:00Z',
            locationFrom: 'GATE_01',
            locationTo: 'YARD_B_05_10'
          }
        }
      }
    }
  })
  async createOperation(
    @Param('endpointId') endpointId: string,
    @Body() body: { operationData: any; metadata?: any },
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    if (!body.operationData) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'create_operation',
      documentData: body.operationData,
      metadata: body.metadata,
    };

    this.logger.log(`‚öôÔ∏è –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Get(':endpointId/exchanges')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –æ–±–º–µ–Ω—ã —Å 1–°',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–º–µ–Ω–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ —Å 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–û–±–º–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            totalClients: { type: 'number' },
            totalServices: { type: 'number' },
            totalDocuments: { type: 'number' },
            exchangesByType: { type: 'object' },
            exchangesByStatus: { type: 'object' },
            recentExchanges: { type: 'array' },
            errorSummary: { type: 'object' },
            performanceStats: { type: 'object' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  async getExchanges(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'get_exchanges',
    };

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–æ–≤ —Å 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Post(':endpointId/manual-export')
  @ApiOperation({ 
    summary: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç –≤ 1–°',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            invoices: { type: 'object' },
            operations: { type: 'object' },
            totalProcessed: { type: 'number' }
          }
        },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞',
    schema: {
      type: 'object',
      properties: {
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            organizationId: { type: 'string' },
            priority: { type: 'string', enum: ['low', 'normal', 'high', 'urgent'] }
          }
        }
      }
    },
    examples: {
      manualExport: {
        summary: '–†—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç',
        value: {
          metadata: {
            operatorId: 'OP_001',
            organizationId: 'main_org',
            priority: 'high'
          }
        }
      }
    }
  })
  async manualExport(
    @Param('endpointId') endpointId: string,
    @Body() body: { metadata?: any },
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    const request: OneCProcessingRequest = {
      endpointId,
      action: 'manual_export',
      metadata: body.metadata,
    };

    this.logger.log(`üì§ –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ 1–° –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.onecProcessor.processOneCRequest(request, endpoint);
  }

  @Get(':endpointId/business-events')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–º–µ–Ω–æ–≤ —Å 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        events: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              eventId: { type: 'string' },
              eventType: { type: 'string' },
              timestamp: { type: 'string', format: 'date-time' },
              businessData: { type: 'object' },
              affectedEntities: { type: 'array' }
            }
          }
        },
        total: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiQuery({ name: 'eventType', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è' })
  @ApiQuery({ name: 'limit', required: false, description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π' })
  async getBusinessEvents(
    @Param('endpointId') endpointId: string,
    @Query('eventType') eventType?: string,
    @Query('limit') limit?: string,
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    const events = await this.onecProcessor.getBusinessEvents(eventType as any);
    const limitNum = limit ? parseInt(limit) : 50;
    const limitedEvents = events.slice(0, limitNum);

    this.logger.debug(`üéØ –ó–∞–ø—Ä–æ—Å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${limitedEvents.length} —Å–æ–±—ã—Ç–∏–π`);

    return {
      events: limitedEvents,
      total: events.length,
      filtered: !!eventType,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/stats')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        oneC: { type: 'object' },
        processedClients: { type: 'number' },
        processedServices: { type: 'number' },
        processedDocuments: { type: 'number' },
        businessEvents: { type: 'number' },
        exchangeHistory: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  async getStats(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    return await this.onecProcessor.getProcessingStats(endpointId);
  }

  @Get(':endpointId/health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  async getHealth(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    return await this.onecProcessor.healthCheck();
  }

  @Post(':endpointId/test-connection')
  @ApiOperation({ 
    summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 1–° —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π 1–°'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        responseTime: { type: 'number' },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  async testConnection(@Param('endpointId') endpointId: string) {
    const startTime = Date.now();
    const endpoint = await this.validateOneCEndpoint(endpointId);

    try {
      const success = await this.onecProcessor.testOneCConnection(endpoint);
      const responseTime = Date.now() - startTime;

      this.logger.log(`${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç 1–° —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${endpoint.name}: ${responseTime}ms`);

      return {
        success,
        message: success 
          ? `–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–° –±–∞–∑–æ–π ${endpoint.name} —É—Å–ø–µ—à–µ–Ω`
          : `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–° –±–∞–∑–æ–π ${endpoint.name}`,
        responseTime,
        details: {
          database: endpoint.connectionConfig.onecConfig?.database,
          webServicePath: endpoint.connectionConfig.onecConfig?.webServicePath,
          authType: endpoint.connectionConfig.onecConfig?.authentication?.type,
          exchangePlans: endpoint.connectionConfig.onecConfig?.exchangePlans?.length || 0,
        },
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç 1–° —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`,
        responseTime,
        details: {
          error: error.message,
        },
      };
    }
  }

  @Post(':endpointId/clear-data')
  @ApiOperation({ 
    summary: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 1–°',
    description: '–û—á–∏—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°' })
  @ApiQuery({ name: 'eventId', required: false, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ)' })
  async clearData(
    @Param('endpointId') endpointId: string,
    @Query('eventId') eventId?: string,
  ) {
    const endpoint = await this.validateOneCEndpoint(endpointId);

    await this.onecProcessor.clearBusinessData(eventId);

    const message = eventId 
      ? `–î–∞–Ω–Ω—ã–µ 1–° —Å–æ–±—ã—Ç–∏—è ${eventId} –æ—á–∏—â–µ–Ω—ã`
      : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ 1–° –æ–±–º–µ–Ω–æ–≤ –æ—á–∏—â–µ–Ω—ã';

    this.logger.log(`üßπ ${message} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('supported-documents')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 1–°',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    schema: {
      type: 'object',
      properties: {
        documentTypes: { type: 'array' },
        operationTypes: { type: 'array' },
        exchangePlans: { type: 'array' },
        features: { type: 'array' }
      }
    }
  })
  async getSupportedDocuments() {
    return {
      documentTypes: [
        {
          code: 'SalesInvoice',
          name: '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É',
          description: '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          direction: 'export',
          mandatory: ['clientId', 'lines'],
          fields: ['documentNumber', 'documentDate', 'organization', 'counterparty', 'currency', 'amount']
        },
        {
          code: 'PurchaseInvoice',
          name: '–°—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          description: '–°—á–µ—Ç –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥',
          direction: 'import',
          mandatory: ['organization', 'counterparty'],
          fields: ['documentNumber', 'documentDate', 'currency', 'amount']
        },
        {
          code: 'ServiceAct',
          name: '–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç',
          description: '–ê–∫—Ç –æ–± –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          direction: 'export',
          mandatory: ['clientId', 'lines'],
          fields: ['documentNumber', 'documentDate', 'services']
        },
        {
          code: 'ContainerOperation',
          name: '–û–ø–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º',
          description: '–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º',
          direction: 'export',
          mandatory: ['containerNumber', 'operationType'],
          fields: ['operationType', 'equipmentId', 'operatorId', 'timestamp']
        },
        {
          code: 'VesselOperation',
          name: '–û–ø–µ—Ä–∞—Ü–∏—è —Å —Å—É–¥–Ω–æ–º',
          description: '–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å—É–¥–Ω–æ–º',
          direction: 'export',
          mandatory: ['vesselName', 'operationType'],
          fields: ['vesselName', 'voyage', 'portCode', 'operationType']
        }
      ],
      operationTypes: [
        'gate_in',           // –í—ä–µ–∑–¥ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª
        'gate_out',          // –í—ã–µ–∑–¥ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        'discharge',         // –í—ã–≥—Ä—É–∑–∫–∞ —Å —Å—É–¥–Ω–∞
        'load',             // –ü–æ–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å—É–¥–Ω–æ
        'shift',            // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
        'inspection',       // –û—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        'weighing',         // –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
        'customs_inspection', // –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –æ—Å–º–æ—Ç—Ä
        'repair_start',     // –ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞
        'repair_complete'   // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞
      ],
      exchangePlans: [
        {
          name: 'clients',
          direction: 'import',
          description: '–ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤',
          schedule: 'daily',
          entities: ['Catalog.Counterparties']
        },
        {
          name: 'services',
          direction: 'import',
          description: '–ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥',
          schedule: 'daily',
          entities: ['Catalog.Services']
        },
        {
          name: 'invoices',
          direction: 'export',
          description: '–≠–∫—Å–ø–æ—Ä—Ç —Å—á–µ—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É',
          schedule: 'realtime',
          entities: ['Document.SalesInvoice']
        },
        {
          name: 'operations',
          direction: 'export',
          description: '–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏',
          schedule: 'hourly',
          entities: ['Document.ContainerOperation', 'Document.VesselOperation']
        },
        {
          name: 'documents',
          direction: 'import',
          description: '–ò–º–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
          schedule: 'hourly',
          entities: ['Document.*']
        }
      ],
      russianFeatures: [
        'inn_validation',     // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
        'kpp_validation',     // –í–∞–ª–∏–¥–∞—Ü–∏—è –ö–ü–ü
        'ogrn_validation',    // –í–∞–ª–∏–¥–∞—Ü–∏—è –û–ì–†–ù
        'vat_calculation',    // –†–∞—Å—á–µ—Ç –ù–î–°
        'ruble_currency',     // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É–±–ª–µ–π
        'russian_addresses',  // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞
        'contract_management', // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
        'payment_terms'       // –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
      ],
      features: [
        'web_service_integration',  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã
        'real_time_sync',          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        'batch_operations',        // –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        'error_handling',          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        'data_validation',         // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        'audit_trail',             // –ê—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π —Å–ª–µ–¥
        'retry_logic',             // –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        'data_mapping',            // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        'exchange_monitoring',     // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–º–µ–Ω–æ–≤
        'manual_override'          // –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      ],
      authenticationTypes: [
        'basic',    // Basic Authentication
        'digest',   // Digest Authentication
        'ntlm',     // NTLM (Windows)
        'oauth'     // OAuth 2.0
      ],
      supportedFormats: ['xml', 'json'],
      supportedProtocols: ['http', 'https'],
    };
  }

  private async validateOneCEndpoint(endpointId: string) {
    const endpoint = await this.integrationEndpointService.findOne(endpointId);
    
    if (endpoint.type !== IntegrationType.ONEC_INTEGRATION) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π`);
    }

    if (!endpoint.isActive) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
    }

    return endpoint;
  }
}