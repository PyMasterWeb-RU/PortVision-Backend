import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { RfidProcessor, RfidProcessingRequest, TagInventoryReport } from '../processors/rfid.processor';
import { IntegrationEndpointService } from '../services/integration-endpoint.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { IntegrationType } from '../entities/integration-endpoint.entity';

@ApiTags('RFID Readers')
@Controller('rfid')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class RfidController {
  private readonly logger = new Logger(RfidController.name);

  constructor(
    private readonly rfidProcessor: RfidProcessor,
    private readonly integrationEndpointService: IntegrationEndpointService,
  ) {}

  @Post(':endpointId/start-reading')
  @ApiOperation({ 
    summary: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —á—Ç–µ–Ω–∏–µ RFID —Ç–µ–≥–æ–≤',
    description: '–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á—Ç–µ–Ω–∏—è RFID —Ç–µ–≥–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ß—Ç–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        action: { type: 'string' },
        endpointId: { type: 'string' },
        readerStats: { type: 'object' },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ —á—Ç–µ–Ω–∏—è',
    schema: {
      type: 'object',
      properties: {
        antennas: { 
          type: 'array', 
          items: { type: 'string' },
          description: '–°–ø–∏—Å–æ–∫ –∞–Ω—Ç–µ–Ω–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
        },
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            sessionId: { type: 'string' },
            location: { type: 'string' },
            equipment: { type: 'string' }
          }
        }
      }
    },
    examples: {
      startReading: {
        summary: '–ó–∞–ø—É—Å–∫ —á—Ç–µ–Ω–∏—è',
        value: {
          antennas: ['1', '2', '3', '4'],
          metadata: {
            operatorId: 'OP_001',
            sessionId: 'session_123',
            location: 'GATE_01',
            equipment: 'RFID_READER_01'
          }
        }
      }
    }
  })
  async startReading(
    @Param('endpointId') endpointId: string,
    @Body() body: { antennas?: string[]; metadata?: any },
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    const request: RfidProcessingRequest = {
      endpointId,
      action: 'start_reading',
      antennas: body.antennas,
      metadata: body.metadata,
    };

    this.logger.log(`üì° –ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ RFID —á—Ç–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.processRfidRequest(request, endpoint);
  }

  @Post(':endpointId/stop-reading')
  @ApiOperation({ 
    summary: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á—Ç–µ–Ω–∏–µ RFID —Ç–µ–≥–æ–≤',
    description: '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á—Ç–µ–Ω–∏—è RFID —Ç–µ–≥–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ß—Ç–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  async stopReading(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    const request: RfidProcessingRequest = {
      endpointId,
      action: 'stop_reading',
    };

    this.logger.log(`üõë –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RFID —á—Ç–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.processRfidRequest(request, endpoint);
  }

  @Get(':endpointId/tags')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ RFID —Ç–µ–≥–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö RFID —Ç–µ–≥–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        tags: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              epc: { type: 'string' },
              rssi: { type: 'number' },
              readCount: { type: 'number' },
              timestamp: { type: 'string', format: 'date-time' },
              isMoving: { type: 'boolean' }
            }
          }
        },
        total: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  async getTags(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    const connectedTags = await this.rfidProcessor.getConnectedTags(endpointId);
    const tags = Array.from(connectedTags.values());

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ RFID —Ç–µ–≥–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${tags.length} —Ç–µ–≥–æ–≤`);

    return {
      tags,
      total: tags.length,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/tags/:tagId')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º RFID —Ç–µ–≥–µ',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RFID —Ç–µ–≥–µ –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–≥–µ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        tag: { type: 'object' },
        history: { type: 'array' },
        totalReads: { type: 'number' },
        zones: { type: 'array' }
      }
    }
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: '–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiParam({ name: 'tagId', description: 'EPC –∫–æ–¥ RFID —Ç–µ–≥–∞' })
  async getTag(
    @Param('endpointId') endpointId: string,
    @Param('tagId') tagId: string,
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    const tag = await this.rfidProcessor.getTag(tagId);
    
    if (!tag) {
      throw new BadRequestException(`RFID —Ç–µ–≥ ${tagId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const history = await this.rfidProcessor.getTagHistory(tagId);

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RFID —Ç–µ–≥–µ ${tagId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      tag,
      history,
      totalReads: tag.readCount || 0,
      zones: [...new Set(history.map(h => h.location.zone).filter(Boolean))],
    };
  }

  @Post(':endpointId/read-tag')
  @ApiOperation({ 
    summary: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π RFID —Ç–µ–≥',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ RFID —Ç–µ–≥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ–≥ –ø—Ä–æ—á–∏—Ç–∞–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: { type: 'object' },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–µ–Ω–∏—è —Ç–µ–≥–∞',
    schema: {
      type: 'object',
      properties: {
        tagId: { type: 'string', description: 'EPC –∫–æ–¥ —Ç–µ–≥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è' },
        metadata: { type: 'object' }
      },
      required: ['tagId']
    },
    examples: {
      readSingleTag: {
        summary: '–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞',
        value: {
          tagId: 'E2002047381502180820C296',
          metadata: {
            operatorId: 'OP_001',
            reason: 'manual_check'
          }
        }
      }
    }
  })
  async readTag(
    @Param('endpointId') endpointId: string,
    @Body() body: { tagId: string; metadata?: any },
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    if (!body.tagId) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–µ–≥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è');
    }

    const request: RfidProcessingRequest = {
      endpointId,
      action: 'read_tag',
      tagId: body.tagId,
      metadata: body.metadata,
    };

    this.logger.log(`üìñ –ó–∞–ø—Ä–æ—Å —á—Ç–µ–Ω–∏—è RFID —Ç–µ–≥–∞ ${body.tagId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.processRfidRequest(request, endpoint);
  }

  @Post(':endpointId/write-tag')
  @ApiOperation({ 
    summary: '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ RFID —Ç–µ–≥',
    description: '–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –ø–∞–º—è—Ç–∏ RFID —Ç–µ–≥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–µ–≥'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiBody({
    description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–≥',
    schema: {
      type: 'object',
      properties: {
        tagId: { type: 'string', description: 'EPC –∫–æ–¥ —Ç–µ–≥–∞' },
        data: { type: 'string', description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (hex)' },
        bank: { type: 'string', enum: ['epc', 'tid', 'user'], description: '–ë–∞–Ω–∫ –ø–∞–º—è—Ç–∏' },
        metadata: { type: 'object' }
      },
      required: ['tagId', 'data']
    },
    examples: {
      writeUserData: {
        summary: '–ó–∞–ø–∏—Å—å –≤ User –ø–∞–º—è—Ç—å',
        value: {
          tagId: 'E2002047381502180820C296',
          data: '1234567890ABCDEF',
          bank: 'user',
          metadata: {
            operatorId: 'OP_001',
            purpose: 'container_id'
          }
        }
      },
      writeEpc: {
        summary: '–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ EPC',
        value: {
          tagId: 'E2002047381502180820C296',
          data: 'E2002047381502180820C297',
          bank: 'epc',
          metadata: {
            operatorId: 'OP_001',
            purpose: 'tag_replacement'
          }
        }
      }
    }
  })
  async writeTag(
    @Param('endpointId') endpointId: string,
    @Body() body: { tagId: string; data: string; bank?: 'epc' | 'tid' | 'user'; metadata?: any },
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    if (!body.tagId || !body.data) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–≥');
    }

    const request: RfidProcessingRequest = {
      endpointId,
      action: 'write_tag',
      tagId: body.tagId,
      data: body.data,
      bank: body.bank || 'user',
      metadata: body.metadata,
    };

    this.logger.log(`‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –≤ RFID —Ç–µ–≥ ${body.tagId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.processRfidRequest(request, endpoint);
  }

  @Post(':endpointId/lock-tag')
  @ApiOperation({ 
    summary: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å RFID —Ç–µ–≥',
    description: '–ë–ª–æ–∫–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ RFID —Ç–µ–≥–∞ –æ—Ç –∑–∞–ø–∏—Å–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ–≥–∞',
    schema: {
      type: 'object',
      properties: {
        tagId: { type: 'string', description: 'EPC –∫–æ–¥ —Ç–µ–≥–∞' },
        metadata: { type: 'object' }
      },
      required: ['tagId']
    },
    examples: {
      lockTag: {
        summary: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–≥–∞',
        value: {
          tagId: 'E2002047381502180820C296',
          metadata: {
            operatorId: 'OP_001',
            reason: 'data_protection'
          }
        }
      }
    }
  })
  async lockTag(
    @Param('endpointId') endpointId: string,
    @Body() body: { tagId: string; metadata?: any },
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    if (!body.tagId) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–µ–≥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
    }

    const request: RfidProcessingRequest = {
      endpointId,
      action: 'lock_tag',
      tagId: body.tagId,
      metadata: body.metadata,
    };

    this.logger.log(`üîí –ó–∞–ø—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RFID —Ç–µ–≥–∞ ${body.tagId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.processRfidRequest(request, endpoint);
  }

  @Post(':endpointId/inventory')
  @ApiOperation({ 
    summary: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é RFID —Ç–µ–≥–æ–≤',
    description: '–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö RFID —Ç–µ–≥–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
    type: Object,
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        timeRange: {
          type: 'object',
          properties: {
            start: { type: 'string', format: 'date-time' },
            end: { type: 'string', format: 'date-time' }
          }
        },
        metadata: { type: 'object' }
      }
    },
    examples: {
      fullInventory: {
        summary: '–ü–æ–ª–Ω–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        value: {
          timeRange: {
            start: '2024-01-20T00:00:00Z',
            end: '2024-01-20T23:59:59Z'
          },
          metadata: {
            operatorId: 'OP_001',
            purpose: 'daily_inventory'
          }
        }
      }
    }
  })
  async inventory(
    @Param('endpointId') endpointId: string,
    @Body() body: { timeRange?: { start: string; end: string }; metadata?: any },
  ): Promise<TagInventoryReport> {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    let timeRange;
    if (body.timeRange) {
      timeRange = {
        start: new Date(body.timeRange.start),
        end: new Date(body.timeRange.end),
      };
      
      if (isNaN(timeRange.start.getTime()) || isNaN(timeRange.end.getTime())) {
        throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏');
      }
    }

    this.logger.log(`üìä –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ RFID –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.rfidProcessor.generateInventoryReport(endpointId, timeRange);
  }

  @Get(':endpointId/zones')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤ –ø–æ –∑–æ–Ω–∞–º',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–∞–∫–∏—Ö –∑–æ–Ω–∞—Ö'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–æ–Ω–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        zones: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              zone: { type: 'string' },
              tagCount: { type: 'number' },
              tags: { type: 'array', items: { type: 'string' } }
            }
          }
        },
        totalTags: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiQuery({ name: 'zone', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ' })
  async getZones(
    @Param('endpointId') endpointId: string,
    @Query('zone') zone?: string,
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    const zonePresence = await this.rfidProcessor.getZonePresence(zone);
    
    const zones = Array.from(zonePresence.entries()).map(([zoneName, tagSet]) => ({
      zone: zoneName,
      tagCount: tagSet.size,
      tags: Array.from(tagSet),
    }));

    const totalTags = zones.reduce((sum, z) => sum + z.tagCount, 0);

    this.logger.debug(`üìç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–∞—Ö –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${zones.length} –∑–æ–Ω`);

    return {
      zones,
      totalTags,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/stats')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RFID –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        rfid: { type: 'object' },
        processedReads: { type: 'number' },
        tagHistory: { type: 'number' },
        zonePresence: { type: 'array' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  async getStats(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    return await this.rfidProcessor.getProcessingStats(endpointId);
  }

  @Get(':endpointId/health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ RFID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  async getHealth(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    return await this.rfidProcessor.healthCheck();
  }

  @Post(':endpointId/test-connection')
  @ApiOperation({ 
    summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RFID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–º'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        responseTime: { type: 'number' },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  async testConnection(@Param('endpointId') endpointId: string) {
    const startTime = Date.now();
    const endpoint = await this.validateRfidEndpoint(endpointId);

    try {
      const success = await this.rfidProcessor.testRfidConnection(endpoint);
      const responseTime = Date.now() - startTime;

      this.logger.log(`${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç RFID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${endpoint.name}: ${responseTime}ms`);

      return {
        success,
        message: success 
          ? `–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–º ${endpoint.name} —É—Å–ø–µ—à–µ–Ω`
          : `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–º ${endpoint.name}`,
        responseTime,
        details: {
          protocol: endpoint.connectionConfig.rfidConfig?.protocol,
          readerType: endpoint.connectionConfig.rfidConfig?.readerType,
          antennas: endpoint.connectionConfig.rfidConfig?.antennas?.length || 0,
        },
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç RFID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`,
        responseTime,
        details: {
          error: error.message,
        },
      };
    }
  }

  @Post(':endpointId/clear-data')
  @ApiOperation({ 
    summary: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ RFID —Ç–µ–≥–æ–≤',
    description: '–û—á–∏—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–≥–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—é'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RFID' })
  @ApiQuery({ name: 'tagId', required: false, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ)' })
  async clearData(
    @Param('endpointId') endpointId: string,
    @Query('tagId') tagId?: string,
  ) {
    const endpoint = await this.validateRfidEndpoint(endpointId);

    await this.rfidProcessor.clearTagData(tagId);

    const message = tagId 
      ? `–î–∞–Ω–Ω—ã–µ RFID —Ç–µ–≥–∞ ${tagId} –æ—á–∏—â–µ–Ω—ã`
      : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ RFID —Ç–µ–≥–æ–≤ –æ—á–∏—â–µ–Ω—ã';

    this.logger.log(`üßπ ${message} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('supported-readers')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–π',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª–µ–π',
    schema: {
      type: 'object',
      properties: {
        readerTypes: { type: 'array', items: { type: 'string' } },
        protocols: { type: 'array', items: { type: 'string' } },
        memoryBanks: { type: 'array', items: { type: 'string' } },
        readModes: { type: 'array', items: { type: 'string' } },
        features: { type: 'array', items: { type: 'string' } }
      }
    }
  })
  async getSupportedReaders() {
    return {
      readerTypes: [
        'impinj',      // Impinj Speedway/xPortal
        'zebra',       // Zebra FX series
        'alien',       // Alien Technology
        'custom'       // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
      ],
      protocols: ['tcp', 'udp', 'serial', 'http'],
      memoryBanks: ['epc', 'tid', 'user', 'reserved'],
      readModes: ['continuous', 'triggered', 'single'],
      sessions: [0, 1, 2, 3],
      powerLevels: {
        min: 10,  // dBm
        max: 32,  // dBm
        default: 25
      },
      features: [
        'inventory',          // –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤
        'tag_write',         // –ó–∞–ø–∏—Å—å –≤ —Ç–µ–≥–∏
        'tag_lock',          // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–≥–æ–≤
        'tag_kill',          // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        'filtering',         // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
        'rssi_measurement',  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        'phase_measurement', // –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–∞–∑—ã
        'antenna_switching', // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Ç–µ–Ω–Ω
        'real_time_reading', // –ß—Ç–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        'batch_operations'   // –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      ],
      antennaOptions: {
        maxCount: 16,
        powerLevelRange: { min: 10, max: 32 },
        positions: ['x', 'y', 'z']
      },
    };
  }

  private async validateRfidEndpoint(endpointId: string) {
    const endpoint = await this.integrationEndpointService.findOne(endpointId);
    
    if (endpoint.type !== IntegrationType.RFID_READER) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è RFID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π`);
    }

    if (!endpoint.isActive) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
    }

    return endpoint;
  }
}