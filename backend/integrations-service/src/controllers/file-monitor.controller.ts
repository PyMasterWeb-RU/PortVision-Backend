import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { 
  FileMonitorProcessor, 
  FileMonitorProcessingRequest, 
  FileBatchReport 
} from '../processors/file-monitor.processor';
import { IntegrationEndpointService } from '../services/integration-endpoint.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { IntegrationType } from '../entities/integration-endpoint.entity';

@ApiTags('File Monitor')
@Controller('file-monitor')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class FileMonitorController {
  private readonly logger = new Logger(FileMonitorController.name);

  constructor(
    private readonly fileMonitorProcessor: FileMonitorProcessor,
    private readonly integrationEndpointService: IntegrationEndpointService,
  ) {}

  @Post(':endpointId/start-monitoring')
  @ApiOperation({ 
    summary: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤',
    description: '–ù–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            status: { type: 'string' },
            watchPaths: { type: 'array' },
            eventId: { type: 'string' }
          }
        },
        processingTime: { type: 'number' },
        monitoringStats: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    schema: {
      type: 'object',
      properties: {
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            sessionId: { type: 'string' },
            priority: { type: 'string', enum: ['low', 'normal', 'high', 'urgent'] }
          }
        }
      }
    },
    examples: {
      startMonitoring: {
        summary: '–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        value: {
          metadata: {
            operatorId: 'OP_001',
            sessionId: 'session_123',
            priority: 'normal'
          }
        }
      }
    }
  })
  async startMonitoring(
    @Param('endpointId') endpointId: string,
    @Body() body: { metadata?: any },
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'start_monitoring',
      metadata: body.metadata,
    };

    this.logger.log(`üìÇ –ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Post(':endpointId/stop-monitoring')
  @ApiOperation({ 
    summary: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤',
    description: '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            status: { type: 'string' },
            eventId: { type: 'string' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  async stopMonitoring(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'stop_monitoring',
    };

    this.logger.log(`üõë –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Get(':endpointId/events')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            totalFiles: { type: 'number' },
            filesByType: { type: 'object' },
            filesByStatus: { type: 'object' },
            processingJobs: { type: 'object' },
            recentFiles: { type: 'array' },
            errorSummary: { type: 'object' },
            throughputStats: { type: 'object' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiQuery({ name: 'fileType', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)' })
  @ApiQuery({ name: 'status', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏' })
  async getEvents(
    @Param('endpointId') endpointId: string,
    @Query('fileType') fileType?: string,
    @Query('status') status?: string,
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'get_events',
      metadata: {
        fileType,
        status,
      },
    };

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Get(':endpointId/jobs')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            jobs: { type: 'array' },
            total: { type: 'number' },
            summary: { type: 'object' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiQuery({ name: 'status', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á–∏' })
  async getJobs(
    @Param('endpointId') endpointId: string,
    @Query('status') status?: string,
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'get_jobs',
      metadata: {
        status,
      },
    };

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Post(':endpointId/process-file')
  @ApiOperation({ 
    summary: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é',
    description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            filePath: { type: 'string' },
            status: { type: 'string' },
            timestamp: { type: 'string', format: 'date-time' }
          }
        },
        processingTime: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞',
    schema: {
      type: 'object',
      properties: {
        filePath: { type: 'string', description: '–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É' },
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            priority: { type: 'string', enum: ['low', 'normal', 'high', 'urgent'] },
            reason: { type: 'string' }
          }
        }
      },
      required: ['filePath']
    },
    examples: {
      processFile: {
        summary: '–†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞',
        value: {
          filePath: '/data/import/container_data_20240120.csv',
          metadata: {
            operatorId: 'OP_001',
            priority: 'high',
            reason: 'manual_processing'
          }
        }
      }
    }
  })
  async processFile(
    @Param('endpointId') endpointId: string,
    @Body() body: { filePath: string; metadata?: any },
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    if (!body.filePath) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
    }

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'process_file',
      filePath: body.filePath,
      metadata: body.metadata,
    };

    this.logger.log(`üîÑ –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${body.filePath} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Post(':endpointId/retry-failed')
  @ApiOperation({ 
    summary: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            retriedJobs: { type: 'number' },
            status: { type: 'string' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiBody({
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    schema: {
      type: 'object',
      properties: {
        jobId: { type: 'string', description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ)' },
        metadata: { type: 'object' }
      }
    },
    examples: {
      retryAllFailed: {
        summary: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ',
        value: {
          metadata: {
            operatorId: 'OP_001'
          }
        }
      },
      retrySpecificJob: {
        summary: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É',
        value: {
          jobId: 'job_file_123_456789',
          metadata: {
            operatorId: 'OP_001'
          }
        }
      }
    }
  })
  async retryFailed(
    @Param('endpointId') endpointId: string,
    @Body() body: { jobId?: string; metadata?: any },
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const request: FileMonitorProcessingRequest = {
      endpointId,
      action: 'retry_failed',
      jobId: body.jobId,
      metadata: body.metadata,
    };

    this.logger.log(`üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${body.jobId ? `–∑–∞–¥–∞—á–∏ ${body.jobId}` : '–≤—Å–µ—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á'} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.fileMonitorProcessor.processFileMonitorRequest(request, endpoint);
  }

  @Get(':endpointId/business-events')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        events: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              eventId: { type: 'string' },
              eventType: { type: 'string' },
              timestamp: { type: 'string', format: 'date-time' },
              sourceFile: { type: 'object' },
              businessData: { type: 'object' },
              affectedEntities: { type: 'array' }
            }
          }
        },
        total: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiQuery({ name: 'eventType', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è' })
  @ApiQuery({ name: 'limit', required: false, description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π' })
  async getBusinessEvents(
    @Param('endpointId') endpointId: string,
    @Query('eventType') eventType?: string,
    @Query('limit') limit?: string,
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    const events = await this.fileMonitorProcessor.getBusinessEvents(eventType as any);
    const limitNum = limit ? parseInt(limit) : 50;
    const limitedEvents = events.slice(0, limitNum);

    this.logger.debug(`üéØ –ó–∞–ø—Ä–æ—Å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${limitedEvents.length} —Å–æ–±—ã—Ç–∏–π`);

    return {
      events: limitedEvents,
      total: events.length,
      filtered: !!eventType,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/stats')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        fileMonitor: { type: 'object' },
        processedDetected: { type: 'number' },
        processedCompleted: { type: 'number' },
        processedErrors: { type: 'number' },
        businessEvents: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  async getStats(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    return await this.fileMonitorProcessor.getProcessingStats(endpointId);
  }

  @Get(':endpointId/health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  async getHealth(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    return await this.fileMonitorProcessor.healthCheck();
  }

  @Post(':endpointId/test-connection')
  @ApiOperation({ 
    summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–µ –ø—É—Ç–∏',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        responseTime: { type: 'number' },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  async testConnection(@Param('endpointId') endpointId: string) {
    const startTime = Date.now();
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    try {
      const success = await this.fileMonitorProcessor.testFileMonitorConnection(endpoint);
      const responseTime = Date.now() - startTime;

      this.logger.log(`${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è ${endpoint.name}: ${responseTime}ms`);

      return {
        success,
        message: success 
          ? `–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${endpoint.name} —É—Å–ø–µ—à–µ–Ω`
          : `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ${endpoint.name}`,
        responseTime,
        details: {
          watchPaths: endpoint.connectionConfig.fileMonitorConfig?.watchPaths?.length || 0,
          enabledPaths: endpoint.connectionConfig.fileMonitorConfig?.watchPaths?.filter((p: any) => p.enabled).length || 0,
          fileTypes: endpoint.connectionConfig.fileMonitorConfig?.processingRules?.fileTypes?.length || 0,
          maxConcurrentFiles: endpoint.connectionConfig.fileMonitorConfig?.settings?.maxConcurrentFiles || 0,
        },
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
        responseTime,
        details: {
          error: error.message,
        },
      };
    }
  }

  @Post(':endpointId/clear-data')
  @ApiOperation({ 
    summary: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    description: '–û—á–∏—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ File Monitor' })
  @ApiQuery({ name: 'eventId', required: false, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ)' })
  async clearData(
    @Param('endpointId') endpointId: string,
    @Query('eventId') eventId?: string,
  ) {
    const endpoint = await this.validateFileMonitorEndpoint(endpointId);

    await this.fileMonitorProcessor.clearBusinessData(eventId);

    const message = eventId 
      ? `–î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ${eventId} –æ—á–∏—â–µ–Ω—ã`
      : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω—ã';

    this.logger.log(`üßπ ${message} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('supported-types')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤',
    schema: {
      type: 'object',
      properties: {
        fileTypes: { type: 'array' },
        processors: { type: 'array' },
        encodings: { type: 'array' },
        features: { type: 'array' }
      }
    }
  })
  async getSupportedTypes() {
    return {
      fileTypes: [
        {
          extension: '.csv',
          processor: 'csv',
          description: '–§–∞–π–ª—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ (CSV)',
          encoding: 'utf8',
          maxSize: '50MB',
          features: ['header_detection', 'delimiter_auto', 'encoding_detection']
        },
        {
          extension: '.json',
          processor: 'json',
          description: 'JSON —Ñ–∞–π–ª—ã',
          encoding: 'utf8',
          maxSize: '10MB',
          features: ['validation', 'schema_check', 'pretty_print']
        },
        {
          extension: '.xml',
          processor: 'xml',
          description: 'XML —Ñ–∞–π–ª—ã',
          encoding: 'utf8',
          maxSize: '20MB',
          features: ['validation', 'schema_check', 'namespace_support']
        },
        {
          extension: '.txt',
          processor: 'txt',
          description: '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã',
          encoding: 'utf8',
          maxSize: '5MB',
          features: ['encoding_detection', 'line_counting', 'word_counting']
        },
        {
          extension: '.xlsx',
          processor: 'excel',
          description: 'Excel —Ñ–∞–π–ª—ã',
          encoding: 'binary',
          maxSize: '100MB',
          features: ['multiple_sheets', 'cell_formatting', 'formulas']
        },
        {
          extension: '.pdf',
          processor: 'pdf',
          description: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã',
          encoding: 'binary',
          maxSize: '50MB',
          features: ['text_extraction', 'metadata_reading', 'page_counting']
        },
        {
          extension: '.jpg',
          processor: 'image',
          description: 'JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          encoding: 'binary',
          maxSize: '10MB',
          features: ['metadata_extraction', 'resize', 'format_conversion']
        },
        {
          extension: '.png',
          processor: 'image',
          description: 'PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          encoding: 'binary',
          maxSize: '10MB',
          features: ['metadata_extraction', 'transparency', 'compression']
        }
      ],
      processors: [
        'csv',      // CSV –ø–∞—Ä—Å–µ—Ä
        'json',     // JSON –ø–∞—Ä—Å–µ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        'xml',      // XML –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ö–µ–º
        'txt',      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        'excel',    // Excel –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        'pdf',      // PDF —Ç–µ–∫—Å—Ç-—ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        'image',    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        'generic'   // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      ],
      encodings: [
        'utf8',     // UTF-8 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        'utf16le',  // UTF-16 Little Endian
        'latin1',   // Latin-1 / ISO-8859-1
        'ascii',    // ASCII
        'binary',   // –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'base64',   // Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        'hex'       // Hex –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      ],
      monitoringFeatures: [
        'real_time_watching',    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        'pattern_filtering',     // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        'recursive_scanning',    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        'size_limits',          // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        'retry_logic',          // –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        'batch_processing',     // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        'error_handling',       // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        'file_locking',         // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
        'checksum_validation',  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
        'post_processing'       // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞
      ],
      postProcessingOptions: [
        'move_to_processed',    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        'move_to_error',       // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É –æ—à–∏–±–æ–∫
        'delete_after_processing', // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        'create_backup',       // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        'compress_processed',  // –°–∂–∞—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        'log_processing'       // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      ],
      businessIntegrations: [
        'container_manifests',   // –ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        'vessel_schedules',     // –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—É–¥–æ–≤
        'gate_transactions',    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ö–ü–ü
        'yard_operations',      // –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        'billing_data',         // –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–∞
        'equipment_logs',       // –õ–æ–≥–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        'customs_declarations', // –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
        'client_documents'      // –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
      ],
    };
  }

  private async validateFileMonitorEndpoint(endpointId: string) {
    const endpoint = await this.integrationEndpointService.findOne(endpointId);
    
    if (endpoint.type !== IntegrationType.FILE_MONITOR) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è File Monitor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π`);
    }

    if (!endpoint.isActive) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
    }

    return endpoint;
  }
}