import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { 
  EdiProcessor, 
  EdiProcessingRequest, 
  EdiMessageSummary 
} from '../processors/edi.processor';
import { EdiMessageType } from '../adapters/edi.adapter';
import { IntegrationEndpointService } from '../services/integration-endpoint.service';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { IntegrationType } from '../entities/integration-endpoint.entity';

@ApiTags('EDI Exchange')
@Controller('edi')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth('JWT')
export class EdiController {
  private readonly logger = new Logger(EdiController.name);

  constructor(
    private readonly ediProcessor: EdiProcessor,
    private readonly integrationEndpointService: IntegrationEndpointService,
  ) {}

  @Post(':endpointId/send-message')
  @ApiOperation({ 
    summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å EDI —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç EDI —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π –ª–∏–Ω–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: { type: 'string', description: 'ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' },
        processingTime: { type: 'number' },
        connectionStats: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiBody({
    description: '–î–∞–Ω–Ω—ã–µ EDI —Å–æ–æ–±—â–µ–Ω–∏—è',
    schema: {
      type: 'object',
      properties: {
        messageType: { 
          type: 'string', 
          enum: ['CODECO', 'COPRAR', 'COPARN', 'COARRI', 'CODEPS', 'COHAUL', 'MOVINS', 'BAPLIE', 'CALINF'],
          description: '–¢–∏–ø EDI —Å–æ–æ–±—â–µ–Ω–∏—è'
        },
        data: { type: 'object', description: '–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
        metadata: {
          type: 'object',
          properties: {
            operatorId: { type: 'string' },
            priority: { type: 'string', enum: ['low', 'normal', 'high', 'urgent'] },
            correlationId: { type: 'string' }
          }
        }
      },
      required: ['messageType', 'data']
    },
    examples: {
      codecoDischarge: {
        summary: 'CODECO - –í—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        value: {
          messageType: 'CODECO',
          data: {
            operation: 'discharge',
            vessel: {
              vesselName: 'MSC OSCAR',
              voyage: '2401E',
              portCode: 'RUMP'
            },
            containers: [
              {
                containerNumber: 'MSCU1234567',
                containerType: 'GP',
                containerSize: '40',
                weight: { gross: 25000, unit: 'KGM' }
              }
            ]
          },
          metadata: {
            operatorId: 'OP_001',
            priority: 'high'
          }
        }
      },
      coprarReport: {
        summary: 'COPRAR - –û—Ç—á–µ—Ç –æ –≤—ã–≥—Ä—É–∑–∫–µ',
        value: {
          messageType: 'COPRAR',
          data: {
            events: [
              {
                eventCode: 'DIS',
                eventDate: '20240120',
                eventTime: '1430',
                location: 'RUMP'
              }
            ],
            containers: [
              {
                containerNumber: 'MSCU1234567',
                containerType: 'GP',
                containerSize: '40'
              }
            ]
          }
        }
      },
      baplieStowage: {
        summary: 'BAPLIE - –ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
        value: {
          messageType: 'BAPLIE',
          data: {
            vessel: {
              vesselName: 'MAERSK ESSEX',
              voyage: '2401W',
              portCode: 'RUMP'
            },
            stowagePlan: {
              occupiedLocations: ['010204', '010206'],
              emptyLocations: ['010208', '010210']
            }
          }
        }
      }
    }
  })
  async sendMessage(
    @Param('endpointId') endpointId: string,
    @Body() body: { messageType: EdiMessageType; data: any; metadata?: any },
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    if (!body.messageType || !body.data) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ');
    }

    const request: EdiProcessingRequest = {
      endpointId,
      action: 'send_message',
      messageType: body.messageType,
      data: body.data,
      metadata: body.metadata,
    };

    this.logger.log(`üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ EDI —Å–æ–æ–±—â–µ–Ω–∏—è ${body.messageType} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.ediProcessor.processEdiRequest(request, endpoint);
  }

  @Post(':endpointId/resend-message')
  @ApiOperation({ 
    summary: '–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å EDI —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ EDI —Å–æ–æ–±—â–µ–Ω–∏–µ'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiBody({
    description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏',
    schema: {
      type: 'object',
      properties: {
        messageId: { type: 'string', description: 'ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' },
        metadata: { type: 'object' }
      },
      required: ['messageId']
    },
    examples: {
      resendMessage: {
        summary: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞',
        value: {
          messageId: 'CODECO_12345678',
          metadata: {
            operatorId: 'OP_001',
            reason: 'transmission_failure'
          }
        }
      }
    }
  })
  async resendMessage(
    @Param('endpointId') endpointId: string,
    @Body() body: { messageId: string; metadata?: any },
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    if (!body.messageId) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è');
    }

    const request: EdiProcessingRequest = {
      endpointId,
      action: 'resend_message',
      messageId: body.messageId,
      metadata: body.metadata,
    };

    this.logger.log(`üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ EDI —Å–æ–æ–±—â–µ–Ω–∏—è ${body.messageId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.ediProcessor.processEdiRequest(request, endpoint);
  }

  @Get(':endpointId/messages')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å EDI —Å–æ–æ–±—â–µ–Ω–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ EDI —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–≤–æ–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            totalMessages: { type: 'number' },
            messagesByType: { type: 'object' },
            messagesByStatus: { type: 'object' },
            recentMessages: { type: 'array' },
            errorSummary: { type: 'object' },
            throughputStats: { type: 'object' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiQuery({ name: 'messageType', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è' })
  @ApiQuery({ name: 'status', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É' })
  async getMessages(
    @Param('endpointId') endpointId: string,
    @Query('messageType') messageType?: EdiMessageType,
    @Query('status') status?: string,
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    const request: EdiProcessingRequest = {
      endpointId,
      action: 'get_messages',
      metadata: {
        messageType,
        status,
      },
    };

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ EDI —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    const result = await this.ediProcessor.processEdiRequest(request, endpoint);
    return result;
  }

  @Get(':endpointId/messages/:messageId')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ EDI —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ EDI —Å–æ–æ–±—â–µ–Ω–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        messageId: { type: 'string' },
        messageType: { type: 'string' },
        status: { type: 'string' },
        timestamp: { type: 'string', format: 'date-time' },
        segments: { type: 'array' },
        businessData: { type: 'object' },
        errors: { type: 'array' }
      }
    }
  })
  @ApiResponse({ 
    status: HttpStatus.NOT_FOUND, 
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiParam({ name: 'messageId', description: 'ID EDI —Å–æ–æ–±—â–µ–Ω–∏—è' })
  async getMessage(
    @Param('endpointId') endpointId: string,
    @Param('messageId') messageId: string,
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    const message = await this.ediProcessor.getMessage(messageId);
    
    if (!message) {
      throw new BadRequestException(`EDI —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    this.logger.debug(`üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ EDI —Å–æ–æ–±—â–µ–Ω–∏–∏ ${messageId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      messageId: message.messageId,
      messageType: message.messageType,
      status: message.status,
      timestamp: message.timestamp,
      controlNumber: message.controlNumber,
      sender: message.sender,
      receiver: message.receiver,
      segmentCount: message.segments.length,
      segments: message.segments.slice(0, 10), // –ü–µ—Ä–≤—ã–µ 10 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
      errors: message.errors,
      testIndicator: message.testIndicator,
    };
  }

  @Post(':endpointId/validate-message')
  @ApiOperation({ 
    summary: '–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å EDI —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ EDI —Å–æ–æ–±—â–µ–Ω–∏—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        data: {
          type: 'object',
          properties: {
            isValid: { type: 'boolean' },
            errors: { type: 'array' },
            segmentCount: { type: 'number' },
            validationDetails: { type: 'object' }
          }
        }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiBody({
    description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
    schema: {
      type: 'object',
      properties: {
        messageId: { type: 'string', description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è' }
      },
      required: ['messageId']
    },
    examples: {
      validateMessage: {
        summary: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è',
        value: {
          messageId: 'CODECO_12345678'
        }
      }
    }
  })
  async validateMessage(
    @Param('endpointId') endpointId: string,
    @Body() body: { messageId: string },
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    if (!body.messageId) {
      throw new BadRequestException('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è');
    }

    const request: EdiProcessingRequest = {
      endpointId,
      action: 'validate_message',
      messageId: body.messageId,
    };

    this.logger.log(`üîç –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ EDI —Å–æ–æ–±—â–µ–Ω–∏—è ${body.messageId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return await this.ediProcessor.processEdiRequest(request, endpoint);
  }

  @Get(':endpointId/business-events')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ EDI —Å–æ–æ–±—â–µ–Ω–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        events: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              eventId: { type: 'string' },
              eventType: { type: 'string' },
              timestamp: { type: 'string', format: 'date-time' },
              sourceMessage: { type: 'object' },
              businessData: { type: 'object' },
              affectedEntities: { type: 'array' }
            }
          }
        },
        total: { type: 'number' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiQuery({ name: 'eventType', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è' })
  @ApiQuery({ name: 'limit', required: false, description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π' })
  async getBusinessEvents(
    @Param('endpointId') endpointId: string,
    @Query('eventType') eventType?: string,
    @Query('limit') limit?: string,
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    const events = await this.ediProcessor.getBusinessEvents(eventType as any);
    const limitNum = limit ? parseInt(limit) : 50;
    const limitedEvents = events.slice(0, limitNum);

    this.logger.debug(`üéØ –ó–∞–ø—Ä–æ—Å –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${limitedEvents.length} —Å–æ–±—ã—Ç–∏–π`);

    return {
      events: limitedEvents,
      total: events.length,
      filtered: !!eventType,
      lastUpdate: new Date(),
    };
  }

  @Get(':endpointId/message-history')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é EDI —Å–æ–æ–±—â–µ–Ω–∏–π'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        messages: { type: 'array' },
        total: { type: 'number' },
        summary: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiQuery({ name: 'days', required: false, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)' })
  async getMessageHistory(
    @Param('endpointId') endpointId: string,
    @Query('days') days?: string,
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    const daysNum = days ? parseInt(days) : 7;
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysNum);

    const allMessages = await this.ediProcessor.getMessageHistory(endpointId);
    const recentMessages = allMessages.filter(m => m.timestamp >= cutoffDate);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è —Å–≤–æ–¥–∫–∏
    const dailySummary = recentMessages.reduce((acc, message) => {
      const day = message.timestamp.toDateString();
      if (!acc[day]) {
        acc[day] = { total: 0, byType: {}, byStatus: {} };
      }
      acc[day].total++;
      acc[day].byType[message.messageType] = (acc[day].byType[message.messageType] || 0) + 1;
      acc[day].byStatus[message.status] = (acc[day].byStatus[message.status] || 0) + 1;
      return acc;
    }, {});

    this.logger.debug(`üìú –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ EDI —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}: ${recentMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ ${daysNum} –¥–Ω–µ–π`);

    return {
      messages: recentMessages.map(m => ({
        messageId: m.messageId,
        messageType: m.messageType,
        status: m.status,
        timestamp: m.timestamp,
        controlNumber: m.controlNumber,
        errorCount: m.errors?.length || 0,
      })),
      total: recentMessages.length,
      period: `${daysNum} days`,
      summary: dailySummary,
    };
  }

  @Get(':endpointId/stats')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É EDI –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã EDI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        edi: { type: 'object' },
        processedMessages: { type: 'number' },
        businessEvents: { type: 'number' },
        messageHistory: { type: 'number' },
        lastUpdate: { type: 'string', format: 'date-time' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  async getStats(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    return await this.ediProcessor.getProcessingStats(endpointId);
  }

  @Get(':endpointId/health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ EDI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è EDI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  async getHealth(@Param('endpointId') endpointId: string) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    return await this.ediProcessor.healthCheck();
  }

  @Post(':endpointId/test-connection')
  @ApiOperation({ 
    summary: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å EDI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å EDI –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean' },
        message: { type: 'string' },
        responseTime: { type: 'number' },
        details: { type: 'object' }
      }
    }
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  async testConnection(@Param('endpointId') endpointId: string) {
    const startTime = Date.now();
    const endpoint = await this.validateEdiEndpoint(endpointId);

    try {
      const success = await this.ediProcessor.testEdiConnection(endpoint);
      const responseTime = Date.now() - startTime;

      this.logger.log(`${success ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç EDI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${endpoint.name}: ${responseTime}ms`);

      return {
        success,
        message: success 
          ? `–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å EDI –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ${endpoint.name} —É—Å–ø–µ—à–µ–Ω`
          : `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å EDI –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ${endpoint.name}`,
        responseTime,
        details: {
          protocol: endpoint.connectionConfig.ediConfig?.protocol,
          messageTypes: endpoint.connectionConfig.ediConfig?.messageTypes || [],
          testMode: endpoint.connectionConfig.ediConfig?.testMode,
        },
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç EDI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);

      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`,
        responseTime,
        details: {
          error: error.message,
        },
      };
    }
  }

  @Post(':endpointId/clear-data')
  @ApiOperation({ 
    summary: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ EDI',
    description: '–û—á–∏—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ EDI —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–±—ã—Ç–∏—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
  })
  @ApiParam({ name: 'endpointId', description: 'UUID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EDI' })
  @ApiQuery({ name: 'messageId', required: false, description: 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ)' })
  async clearData(
    @Param('endpointId') endpointId: string,
    @Query('messageId') messageId?: string,
  ) {
    const endpoint = await this.validateEdiEndpoint(endpointId);

    await this.ediProcessor.clearMessageData(messageId);

    const message = messageId 
      ? `–î–∞–Ω–Ω—ã–µ EDI —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ—á–∏—â–µ–Ω—ã`
      : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ EDI –æ—á–∏—â–µ–Ω—ã';

    this.logger.log(`üßπ ${message} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    return {
      message,
      timestamp: new Date().toISOString(),
    };
  }

  @Get('supported-messages')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã EDI —Å–æ–æ–±—â–µ–Ω–∏–π',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ EDI —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è'
  })
  @ApiResponse({ 
    status: HttpStatus.OK, 
    description: '–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
    schema: {
      type: 'object',
      properties: {
        messageTypes: { type: 'array' },
        protocols: { type: 'array' },
        standards: { type: 'array' },
        features: { type: 'array' }
      }
    }
  })
  async getSupportedMessages() {
    return {
      messageTypes: [
        {
          code: 'CODECO',
          name: 'Container Discharge/Loading Order',
          description: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–≥—Ä—É–∑–∫–µ/–ø–æ–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
          direction: 'outbound',
          mandatory: ['containers', 'vessel']
        },
        {
          code: 'COPRAR',
          name: 'Container Discharge/Loading Report',
          description: '–û—Ç—á–µ—Ç –æ –≤—ã–≥—Ä—É–∑–∫–µ/–ø–æ–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
          direction: 'outbound',
          mandatory: ['containers', 'events']
        },
        {
          code: 'COPARN',
          name: 'Container Announcement',
          description: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö',
          direction: 'inbound',
          mandatory: ['containers']
        },
        {
          code: 'COARRI',
          name: 'Container Arrival Report',
          description: '–û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
          direction: 'inbound',
          mandatory: ['containers', 'arrival']
        },
        {
          code: 'BAPLIE',
          name: 'Bayplan/Stowage Plan',
          description: '–ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å—É–¥–Ω–µ',
          direction: 'inbound',
          mandatory: ['vessel', 'stowagePlan']
        },
        {
          code: 'CALINF',
          name: 'Vessel Call Information',
          description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ö–æ–¥–µ —Å—É–¥–Ω–∞',
          direction: 'inbound',
          mandatory: ['vessel']
        }
      ],
      protocols: [
        'ftp',    // File Transfer Protocol
        'sftp',   // Secure FTP
        'ftps',   // FTP over SSL/TLS
        'http',   // HTTP
        'https',  // HTTP over SSL/TLS
        'as2',    // Applicability Statement 2
        'directory' // File system directory
      ],
      standards: [
        'EDIFACT D.03B',  // UN/EDIFACT Directory
        'ANSI X12',       // American National Standards Institute
        'XML',            // Extensible Markup Language
        'JSON'            // JavaScript Object Notation
      ],
      features: [
        'message_validation',    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        'acknowledgment_support', // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        'error_handling',        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        'retry_logic',          // –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        'encryption_support',   // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        'compression_support',  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∂–∞—Ç–∏—è
        'test_mode',           // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        'audit_trail',         // –ê—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π —Å–ª–µ–¥
        'business_rules',      // –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        'format_conversion'    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
      ],
      businessEvents: [
        'vessel_arrival',        // –ü—Ä–∏–±—ã—Ç–∏–µ —Å—É–¥–Ω–∞
        'vessel_departure',      // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–¥–Ω–∞
        'container_discharge',   // –í—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        'container_load',        // –ü–æ–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        'booking_update',        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        'stowage_plan'          // –ü–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
      ],
    };
  }

  private async validateEdiEndpoint(endpointId: string) {
    const endpoint = await this.integrationEndpointService.findOne(endpointId);
    
    if (endpoint.type !== IntegrationType.EDI_EXCHANGE) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è EDI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π`);
    }

    if (!endpoint.isActive) {
      throw new BadRequestException(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${endpoint.name} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
    }

    return endpoint;
  }
}