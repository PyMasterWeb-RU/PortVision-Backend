import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import * as mqtt from 'mqtt';
import { IntegrationEndpoint } from '../entities/integration-endpoint.entity';

export interface GpsPosition {
  deviceId: string;
  latitude: number;
  longitude: number;
  altitude?: number;
  speed: number; // –∫–º/—á
  heading?: number; // –≥—Ä–∞–¥—É—Å—ã (0-360)
  accuracy?: number; // –º–µ—Ç—Ä—ã
  timestamp: Date;
  satelliteCount?: number;
  hdop?: number; // Horizontal Dilution of Precision
  battery?: number; // –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä—è–¥–∞
  ignition?: boolean; // –∑–∞–∂–∏–≥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
  engineHours?: number; // –º–æ—Ç–æ—á–∞—Å—ã
  odometer?: number; // –æ–¥–æ–º–µ—Ç—Ä –≤ –∫–º
  fuel?: number; // —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ –≤ %
  temperature?: number; // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
  status: 'moving' | 'idle' | 'parked' | 'maintenance' | 'offline';
}

export interface EquipmentStatus {
  deviceId: string;
  equipmentId: string;
  equipmentType: 'rtg' | 'rmg' | 'reach_stacker' | 'forklift' | 'truck' | 'trailer' | 'chassis';
  position: GpsPosition;
  operationalStatus: 'operational' | 'maintenance' | 'breakdown' | 'idle';
  workingArea?: string;
  assignedTask?: string;
  operatorId?: string;
  lastMaintenance?: Date;
  nextMaintenance?: Date;
  alerts?: string[];
  sensor1?: number; // –î–∞—Ç—á–∏–∫ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∏)
  sensor2?: number; // –î–∞—Ç—á–∏–∫ 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ)
  sensor3?: number; // –î–∞—Ç—á–∏–∫ 3 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏–±—Ä–∞—Ü–∏—è)
  metadata?: Record<string, any>;
}

export interface MqttConnectionConfig {
  host: string;
  port: number;
  clientId: string;
  username?: string;
  password?: string;
  keepAlive: number;
  clean: boolean;
  reconnectPeriod: number;
  topics: string[];
  qos: 0 | 1 | 2;
  ssl?: {
    enabled: boolean;
    rejectUnauthorized: boolean;
    certificatePath?: string;
  };
}

export interface GpsProtocolConfig {
  protocol: 'wialon' | 'galileosky' | 'teltonika' | 'custom';
  deviceIds?: string[];
  updateInterval: number; // —Å–µ–∫—É–Ω–¥—ã
  trackingFields: string[];
  messageFormat?: 'json' | 'binary' | 'text';
  coordinate_system?: 'wgs84' | 'gsk-2011' | 'pulkovo42';
}

@Injectable()
export class GpsMqttAdapter implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(GpsMqttAdapter.name);
  private readonly mqttClients = new Map<string, mqtt.MqttClient>();
  private readonly subscriptions = new Map<string, Set<string>>();
  private readonly deviceStatuses = new Map<string, EquipmentStatus>();
  private readonly lastPositions = new Map<string, GpsPosition>();
  
  // –ì–µ–æ–∑–æ–Ω—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
  private readonly terminalZones = new Map<string, {
    name: string;
    type: 'yard' | 'gate' | 'quay' | 'storage' | 'maintenance' | 'parking';
    polygon: Array<[number, number]>; // [lat, lng]
    description?: string;
  }>();

  constructor(private readonly eventEmitter: EventEmitter2) {
    this.initializeTerminalZones();
  }

  async onModuleInit() {
    this.logger.log('üõ∞Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPS/MQTT –∞–¥–∞–ø—Ç–µ—Ä–∞...');
  }

  async onModuleDestroy() {
    this.logger.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã GPS/MQTT –∞–¥–∞–ø—Ç–µ—Ä–∞...');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ MQTT –∫–ª–∏–µ–Ω—Ç—ã
    for (const [clientId, client] of this.mqttClients) {
      try {
        client.end(true);
        this.logger.debug(`‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–∫–ª—é—á–µ–Ω`);
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error.message);
      }
    }
    
    this.mqttClients.clear();
    this.subscriptions.clear();
    this.deviceStatuses.clear();
    this.lastPositions.clear();
  }

  async connect(endpoint: IntegrationEndpoint): Promise<boolean> {
    const clientId = endpoint.id;
    const config = endpoint.connectionConfig;

    try {
      this.logger.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}...`);

      if (this.mqttClients.has(clientId)) {
        this.logger.warn(`‚ö†Ô∏è MQTT –∫–ª–∏–µ–Ω—Ç ${clientId} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
        return true;
      }

      const mqttConfig = config.mqttConfig as MqttConnectionConfig;
      const gpsConfig = config.gpsConfig as GpsProtocolConfig;

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const protocol = config.ssl?.enabled ? 'mqtts' : 'mqtt';
      const brokerUrl = `${protocol}://${config.host}:${config.port}`;

      // –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connectOptions: mqtt.IClientOptions = {
        clientId: mqttConfig.clientId || `portvision_${clientId}`,
        username: config.authentication?.username,
        password: config.authentication?.password,
        keepalive: mqttConfig.keepAlive || 60,
        clean: mqttConfig.clean !== false,
        reconnectPeriod: mqttConfig.reconnectPeriod || 5000,
        connectTimeout: config.timeout || 30000,
        ...(config.ssl?.enabled && {
          rejectUnauthorized: config.ssl.rejectUnauthorized !== false,
          ...(config.ssl.certificatePath && {
            cert: config.ssl.certificatePath,
          }),
        }),
      };

      // –°–æ–∑–¥–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
      const client = mqtt.connect(brokerUrl, connectOptions);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupClientEventHandlers(client, endpoint, gpsConfig);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
      this.mqttClients.set(clientId, client);
      this.subscriptions.set(clientId, new Set());

      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É'));
        }, connectOptions.connectTimeout);

        client.once('connect', () => {
          clearTimeout(timeout);
          this.logger.log(`‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç ${endpoint.name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ ${brokerUrl}`);
          resolve(true);
        });

        client.once('error', (error) => {
          clearTimeout(timeout);
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT –¥–ª—è ${endpoint.name}:`, error.message);
          reject(error);
        });
      });

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${endpoint.name}:`, error.stack);
      return false;
    }
  }

  async disconnect(endpointId: string): Promise<void> {
    const client = this.mqttClients.get(endpointId);
    
    if (client) {
      try {
        client.end(true);
        this.mqttClients.delete(endpointId);
        this.subscriptions.delete(endpointId);
        
        this.logger.log(`üîå MQTT –∫–ª–∏–µ–Ω—Ç ${endpointId} –æ—Ç–∫–ª—é—á–µ–Ω`);
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞ ${endpointId}:`, error.message);
      }
    }
  }

  async subscribe(endpointId: string, topics: string[], qos: mqtt.QoS = 1): Promise<void> {
    const client = this.mqttClients.get(endpointId);
    
    if (!client) {
      throw new Error(`MQTT –∫–ª–∏–µ–Ω—Ç ${endpointId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const subscriptions = this.subscriptions.get(endpointId);
    
    for (const topic of topics) {
      if (!subscriptions.has(topic)) {
        try {
          await new Promise<void>((resolve, reject) => {
            client.subscribe(topic, { qos }, (error) => {
              if (error) {
                reject(error);
              } else {
                subscriptions.add(topic);
                this.logger.debug(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ ${topic} –¥–ª—è ${endpointId}`);
                resolve();
              }
            });
          });
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ ${topic}:`, error.message);
          throw error;
        }
      }
    }
  }

  private setupClientEventHandlers(
    client: mqtt.MqttClient,
    endpoint: IntegrationEndpoint,
    gpsConfig: GpsProtocolConfig,
  ): void {
    client.on('connect', async () => {
      this.logger.log(`üîó MQTT –∫–ª–∏–µ–Ω—Ç ${endpoint.name} –ø–æ–¥–∫–ª—é—á–µ–Ω`);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
      const topics = endpoint.connectionConfig.mqttConfig?.topics || [];
      if (topics.length > 0) {
        await this.subscribe(endpoint.id, topics, endpoint.connectionConfig.mqttConfig?.qos || 1);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      this.eventEmitter.emit('gps.mqtt.connected', {
        endpointId: endpoint.id,
        endpointName: endpoint.name,
        timestamp: new Date(),
      });
    });

    client.on('message', (topic, message) => {
      this.handleIncomingMessage(endpoint, topic, message, gpsConfig);
    });

    client.on('error', (error) => {
      this.logger.error(`‚ùå MQTT –æ—à–∏–±–∫–∞ –¥–ª—è ${endpoint.name}:`, error.message);
      
      this.eventEmitter.emit('gps.mqtt.error', {
        endpointId: endpoint.id,
        endpointName: endpoint.name,
        error: error.message,
        timestamp: new Date(),
      });
    });

    client.on('disconnect', () => {
      this.logger.warn(`üîå MQTT –∫–ª–∏–µ–Ω—Ç ${endpoint.name} –æ—Ç–∫–ª—é—á–µ–Ω`);
      
      this.eventEmitter.emit('gps.mqtt.disconnected', {
        endpointId: endpoint.id,
        endpointName: endpoint.name,
        timestamp: new Date(),
      });
    });

    client.on('reconnect', () => {
      this.logger.log(`üîÑ MQTT –∫–ª–∏–µ–Ω—Ç ${endpoint.name} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...`);
    });

    client.on('close', () => {
      this.logger.debug(`üì™ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${endpoint.name} –∑–∞–∫—Ä—ã—Ç–æ`);
    });
  }

  private async handleIncomingMessage(
    endpoint: IntegrationEndpoint,
    topic: string,
    message: Buffer,
    gpsConfig: GpsProtocolConfig,
  ): Promise<void> {
    try {
      this.logger.debug(`üì® –ü–æ–ª—É—á–µ–Ω–æ MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${endpoint.name} –≤ —Ç–æ–ø–∏–∫–µ ${topic}: ${message.length} –±–∞–π—Ç`);

      // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
      const gpsData = await this.parseGpsMessage(message, gpsConfig, topic);
      
      if (!gpsData) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å GPS —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${endpoint.name}`);
        return;
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º GPS –¥–∞–Ω–Ω—ã–µ
      const validationResult = this.validateGpsData(gpsData);
      if (!validationResult.isValid) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ GPS –¥–∞–Ω–Ω—ã–µ –æ—Ç ${endpoint.name}: ${validationResult.errors.join(', ')}`);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
      const currentZone = this.determineCurrentZone(gpsData.latitude, gpsData.longitude);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const equipmentStatus: EquipmentStatus = {
        deviceId: gpsData.deviceId,
        equipmentId: this.mapDeviceToEquipment(gpsData.deviceId),
        equipmentType: this.determineEquipmentType(gpsData.deviceId),
        position: gpsData,
        operationalStatus: this.determineOperationalStatus(gpsData),
        workingArea: currentZone?.name,
        lastMaintenance: this.getLastMaintenanceDate(gpsData.deviceId),
        nextMaintenance: this.getNextMaintenanceDate(gpsData.deviceId),
        alerts: this.checkDeviceAlerts(gpsData),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ —Å—Ç–∞—Ç—É—Å
      this.lastPositions.set(gpsData.deviceId, gpsData);
      this.deviceStatuses.set(gpsData.deviceId, equipmentStatus);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
      this.eventEmitter.emit('gps.position.updated', {
        endpointId: endpoint.id,
        equipmentStatus,
        previousPosition: this.getPreviousPosition(gpsData.deviceId),
        zone: currentZone,
        timestamp: gpsData.timestamp,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
      await this.checkCriticalAlerts(equipmentStatus, endpoint);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${endpoint.name}:`, error.stack);
      
      this.eventEmitter.emit('gps.processing.error', {
        endpointId: endpoint.id,
        topic,
        error: error.message,
        timestamp: new Date(),
      });
    }
  }

  private async parseGpsMessage(
    message: Buffer,
    config: GpsProtocolConfig,
    topic: string,
  ): Promise<GpsPosition | null> {
    try {
      switch (config.protocol) {
        case 'wialon':
          return this.parseWialonMessage(message, topic);
        case 'galileosky':
          return this.parseGalileoskyMessage(message, topic);
        case 'teltonika':
          return this.parseTeltonikaMessage(message, topic);
        case 'custom':
          return this.parseCustomMessage(message, topic, config);
        default:
          // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
          return this.parseJsonMessage(message, topic);
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPS —Å–æ–æ–±—â–µ–Ω–∏—è (${config.protocol}):`, error.message);
      return null;
    }
  }

  private parseJsonMessage(message: Buffer, topic: string): GpsPosition | null {
    try {
      const data = JSON.parse(message.toString());
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º deviceId –∏–∑ —Ç–æ–ø–∏–∫–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
      const deviceId = data.deviceId || 
                      data.device_id || 
                      data.imei || 
                      topic.split('/').pop() || 
                      'unknown';

      return {
        deviceId,
        latitude: parseFloat(data.lat || data.latitude),
        longitude: parseFloat(data.lng || data.longitude || data.lon),
        altitude: data.altitude ? parseFloat(data.altitude) : undefined,
        speed: parseFloat(data.speed || 0),
        heading: data.heading ? parseFloat(data.heading) : undefined,
        accuracy: data.accuracy ? parseFloat(data.accuracy) : undefined,
        timestamp: data.timestamp ? new Date(data.timestamp) : new Date(),
        satelliteCount: data.satellites ? parseInt(data.satellites) : undefined,
        hdop: data.hdop ? parseFloat(data.hdop) : undefined,
        battery: data.battery ? parseFloat(data.battery) : undefined,
        ignition: data.ignition,
        engineHours: data.engine_hours ? parseFloat(data.engine_hours) : undefined,
        odometer: data.odometer ? parseFloat(data.odometer) : undefined,
        fuel: data.fuel ? parseFloat(data.fuel) : undefined,
        temperature: data.temperature ? parseFloat(data.temperature) : undefined,
        status: this.determineDeviceStatus(data),
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON GPS —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      return null;
    }
  }

  private parseWialonMessage(message: Buffer, topic: string): GpsPosition | null {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Wialon
    // –≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª, —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.logger.warn('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Wialon –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return null;
  }

  private parseGalileoskyMessage(message: Buffer, topic: string): GpsPosition | null {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Galileosky
    this.logger.warn('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Galileosky –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return null;
  }

  private parseTeltonikaMessage(message: Buffer, topic: string): GpsPosition | null {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Teltonika
    this.logger.warn('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Teltonika –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return null;
  }

  private parseCustomMessage(message: Buffer, topic: string, config: GpsProtocolConfig): GpsPosition | null {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä - –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.logger.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä GPS –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return this.parseJsonMessage(message, topic); // Fallback –∫ JSON
  }

  private determineDeviceStatus(data: any): GpsPosition['status'] {
    if (data.ignition === false) return 'parked';
    if (data.speed > 5) return 'moving';
    if (data.ignition === true && data.speed <= 5) return 'idle';
    if (!data.timestamp || (Date.now() - new Date(data.timestamp).getTime()) > 300000) return 'offline';
    return 'idle';
  }

  private validateGpsData(gpsData: GpsPosition): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (isNaN(gpsData.latitude) || gpsData.latitude < -90 || gpsData.latitude > 90) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–æ—Ç–∞');
    }

    if (isNaN(gpsData.longitude) || gpsData.longitude < -180 || gpsData.longitude > 180) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (gpsData.speed < 0 || gpsData.speed > 200) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
    const now = Date.now();
    const timestampAge = now - gpsData.timestamp.getTime();
    if (timestampAge > 3600000) { // —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      errors.push('–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ deviceId
    if (!gpsData.deviceId || gpsData.deviceId === 'unknown') {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }

  private determineCurrentZone(latitude: number, longitude: number) {
    for (const [zoneId, zone] of this.terminalZones) {
      if (this.isPointInPolygon([latitude, longitude], zone.polygon)) {
        return { id: zoneId, ...zone };
      }
    }
    return null;
  }

  private isPointInPolygon(point: [number, number], polygon: Array<[number, number]>): boolean {
    const [x, y] = point;
    let inside = false;

    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const [xi, yi] = polygon[i];
      const [xj, yj] = polygon[j];

      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {
        inside = !inside;
      }
    }

    return inside;
  }

  private mapDeviceToEquipment(deviceId: string): string {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è device ID —Å ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ ID
    return deviceId;
  }

  private determineEquipmentType(deviceId: string): EquipmentStatus['equipmentType'] {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ deviceId
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (deviceId.startsWith('RTG')) return 'rtg';
    if (deviceId.startsWith('RMG')) return 'rmg';
    if (deviceId.startsWith('RS')) return 'reach_stacker';
    if (deviceId.startsWith('FK')) return 'forklift';
    if (deviceId.startsWith('TR')) return 'truck';
    return 'truck'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  private determineOperationalStatus(gpsData: GpsPosition): EquipmentStatus['operationalStatus'] {
    if (gpsData.status === 'offline') return 'breakdown';
    if (gpsData.speed > 0) return 'operational';
    return 'idle';
  }

  private getLastMaintenanceDate(deviceId: string): Date | undefined {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¢–û
    return undefined;
  }

  private getNextMaintenanceDate(deviceId: string): Date | undefined {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¢–û
    return undefined;
  }

  private checkDeviceAlerts(gpsData: GpsPosition): string[] {
    const alerts: string[] = [];

    if (gpsData.battery && gpsData.battery < 20) {
      alerts.push('–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏');
    }

    if (gpsData.temperature && gpsData.temperature > 100) {
      alerts.push('–ü–µ—Ä–µ–≥—Ä–µ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è');
    }

    if (gpsData.accuracy && gpsData.accuracy > 50) {
      alerts.push('–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS');
    }

    if (gpsData.satelliteCount && gpsData.satelliteCount < 4) {
      alerts.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤');
    }

    return alerts;
  }

  private async checkCriticalAlerts(
    equipmentStatus: EquipmentStatus,
    endpoint: IntegrationEndpoint,
  ): Promise<void> {
    const alerts = equipmentStatus.alerts || [];

    for (const alert of alerts) {
      if (alert.includes('–ü–µ—Ä–µ–≥—Ä–µ–≤') || alert.includes('breakdown')) {
        this.eventEmitter.emit('equipment.critical.alert', {
          endpointId: endpoint.id,
          deviceId: equipmentStatus.deviceId,
          equipmentId: equipmentStatus.equipmentId,
          equipmentType: equipmentStatus.equipmentType,
          alert,
          position: equipmentStatus.position,
          severity: 'critical',
          timestamp: new Date(),
        });
      }
    }
  }

  private getPreviousPosition(deviceId: string): GpsPosition | undefined {
    return this.lastPositions.get(deviceId);
  }

  private initializeTerminalZones(): void {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–∑–æ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    this.terminalZones.set('main_gate', {
      name: '–ì–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞',
      type: 'gate',
      polygon: [
        [59.931089, 30.360655],
        [59.931189, 30.360755],
        [59.931089, 30.360855],
        [59.930989, 30.360755],
      ],
      description: '–ó–æ–Ω–∞ –≥–ª–∞–≤–Ω—ã—Ö –≤–æ—Ä–æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'
    });

    this.terminalZones.set('container_yard', {
      name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      type: 'yard',
      polygon: [
        [59.930500, 30.360000],
        [59.931500, 30.360000],
        [59.931500, 30.362000],
        [59.930500, 30.362000],
      ],
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞'
    });

    this.terminalZones.set('quay_area', {
      name: '–ü—Ä–∏—á–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞',
      type: 'quay',
      polygon: [
        [59.931000, 30.359000],
        [59.932000, 30.359000],
        [59.932000, 30.360000],
        [59.931000, 30.360000],
      ],
      description: '–ó–æ–Ω–∞ –ø—Ä–∏—á–∞–ª–æ–≤ –¥–ª—è —Å—É–¥–æ–≤'
    });

    this.terminalZones.set('maintenance_area', {
      name: '–ó–æ–Ω–∞ –¢–û',
      type: 'maintenance',
      polygon: [
        [59.930000, 30.359000],
        [59.930500, 30.359000],
        [59.930500, 30.359500],
        [59.930000, 30.359500],
      ],
      description: '–ó–æ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
    });
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async testConnection(endpoint: IntegrationEndpoint): Promise<boolean> {
    try {
      const connected = await this.connect(endpoint);
      if (connected) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        await this.publishTestMessage(endpoint.id);
        await this.disconnect(endpoint.id);
      }
      return connected;
    } catch (error) {
      this.logger.error(`‚ùå –¢–µ—Å—Ç MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${endpoint.name}:`, error.message);
      return false;
    }
  }

  private async publishTestMessage(endpointId: string): Promise<void> {
    const client = this.mqttClients.get(endpointId);
    if (client) {
      const testMessage = JSON.stringify({
        deviceId: 'test_device',
        latitude: 59.931089,
        longitude: 30.360655,
        speed: 0,
        timestamp: new Date().toISOString(),
        status: 'test'
      });

      await new Promise<void>((resolve, reject) => {
        client.publish('test/position', testMessage, { qos: 1 }, (error) => {
          if (error) {
            reject(error);
          } else {
            resolve();
          }
        });
      });
    }
  }

  async getConnectedDevices(endpointId?: string): Promise<Map<string, EquipmentStatus>> {
    if (endpointId) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      const filteredStatuses = new Map<string, EquipmentStatus>();
      for (const [deviceId, status] of this.deviceStatuses) {
        filteredStatuses.set(deviceId, status);
      }
      return filteredStatuses;
    }
    
    return new Map(this.deviceStatuses);
  }

  async getDeviceStatus(deviceId: string): Promise<EquipmentStatus | undefined> {
    return this.deviceStatuses.get(deviceId);
  }

  async getLastPosition(deviceId: string): Promise<GpsPosition | undefined> {
    return this.lastPositions.get(deviceId);
  }

  async getDevicesInZone(zoneId: string): Promise<EquipmentStatus[]> {
    const zone = this.terminalZones.get(zoneId);
    if (!zone) return [];

    const devicesInZone: EquipmentStatus[] = [];
    
    for (const status of this.deviceStatuses.values()) {
      if (this.isPointInPolygon(
        [status.position.latitude, status.position.longitude],
        zone.polygon
      )) {
        devicesInZone.push(status);
      }
    }

    return devicesInZone;
  }

  async getConnectionStats(endpointId?: string) {
    const stats = {
      totalConnections: this.mqttClients.size,
      activeDevices: this.deviceStatuses.size,
      lastPositions: this.lastPositions.size,
      zones: this.terminalZones.size,
      devicesByStatus: {} as Record<string, number>,
      devicesByType: {} as Record<string, number>,
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ —Ç–∏–ø–∞–º
    for (const status of this.deviceStatuses.values()) {
      const deviceStatus = status.operationalStatus;
      const deviceType = status.equipmentType;
      
      stats.devicesByStatus[deviceStatus] = (stats.devicesByStatus[deviceStatus] || 0) + 1;
      stats.devicesByType[deviceType] = (stats.devicesByType[deviceType] || 0) + 1;
    }

    return stats;
  }

  async clearDeviceData(deviceId?: string): Promise<void> {
    if (deviceId) {
      this.deviceStatuses.delete(deviceId);
      this.lastPositions.delete(deviceId);
      this.logger.log(`üßπ –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} –æ—á–∏—â–µ–Ω—ã`);
    } else {
      this.deviceStatuses.clear();
      this.lastPositions.clear();
      this.logger.log('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω—ã');
    }
  }
}