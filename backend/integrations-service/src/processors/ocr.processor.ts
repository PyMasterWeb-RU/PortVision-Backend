import {
  Injectable,
  Logger,
} from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { OcrAnprAdapter, AnprResult, ImageSource } from '../adapters/ocr-anpr.adapter';
import { DataTransformationService } from '../services/data-transformation.service';
import { RoutingService } from '../services/routing.service';
import { MetricsService } from '../services/metrics.service';
import { IntegrationEndpoint } from '../entities/integration-endpoint.entity';

export interface OcrProcessingRequest {
  endpointId: string;
  imageSource: ImageSource;
  requestId?: string;
  metadata?: {
    gateId?: string;
    laneNumber?: number;
    direction?: 'in' | 'out';
    vehicleType?: 'truck' | 'trailer' | 'chassis';
    operatorId?: string;
    timestamp?: Date;
  };
}

export interface OcrProcessingResult {
  success: boolean;
  requestId: string;
  containerNumber?: string;
  confidence?: number;
  isValid?: boolean;
  rawOcrResult?: AnprResult;
  transformedData?: any;
  routingResult?: any;
  errors?: string[];
  processingTime: number;
  metadata?: any;
}

@Injectable()
export class OcrProcessor {
  private readonly logger = new Logger(OcrProcessor.name);

  constructor(
    private readonly ocrAnprAdapter: OcrAnprAdapter,
    private readonly dataTransformationService: DataTransformationService,
    private readonly routingService: RoutingService,
    private readonly metricsService: MetricsService,
    private readonly eventEmitter: EventEmitter2,
  ) {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è OCR –∞–¥–∞–ø—Ç–µ—Ä–∞
    this.eventEmitter.on('ocr.processing.completed', this.handleOcrSuccess.bind(this));
    this.eventEmitter.on('ocr.processing.failed', this.handleOcrFailure.bind(this));
  }

  async processOcrRequest(
    request: OcrProcessingRequest,
    endpoint: IntegrationEndpoint,
  ): Promise<OcrProcessingResult> {
    const startTime = Date.now();
    const requestId = request.requestId || `ocr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    this.logger.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ ${requestId} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    const result: OcrProcessingResult = {
      success: false,
      requestId,
      errors: [],
      processingTime: 0,
    };

    try {
      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      this.validateRequest(request);

      // 2. OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      this.logger.debug(`üì∑ –í—ã–ø–æ–ª–Ω—è–µ–º OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª—è ${requestId}`);
      const ocrResult = await this.ocrAnprAdapter.processImage(
        request.imageSource,
        endpoint,
        requestId,
      );

      result.rawOcrResult = ocrResult;
      result.containerNumber = ocrResult.containerNumber;
      result.confidence = ocrResult.confidence;
      result.isValid = ocrResult.isValid;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (ocrResult.validationErrors && ocrResult.validationErrors.length > 0) {
        result.errors.push(...ocrResult.validationErrors);
      }

      // 3. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const structuredData = this.createStructuredData(ocrResult, request, endpoint);

      // 4. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (endpoint.dataProcessingConfig) {
        this.logger.debug(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${requestId}`);
        const transformationResult = await this.dataTransformationService.processData(
          structuredData,
          endpoint.dataProcessingConfig,
          endpoint.id,
        );

        if (transformationResult.success) {
          result.transformedData = transformationResult.data;
        } else {
          result.errors.push(...(transformationResult.errors || []));
        }
      } else {
        result.transformedData = structuredData;
      }

      // 5. –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞)
      if (result.transformedData && endpoint.routingConfig) {
        this.logger.debug(`üì§ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${requestId}`);
        const routingResult = await this.routingService.routeData(
          result.transformedData,
          endpoint.routingConfig,
          endpoint.id,
        );

        result.routingResult = routingResult;

        if (!routingResult.success) {
          result.errors.push(...(routingResult.errors || []));
        }
      }

      // 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      result.success = result.errors.length === 0 && ocrResult.isValid;
      result.processingTime = Date.now() - startTime;
      result.metadata = {
        ...request.metadata,
        imageMetadata: ocrResult.imageMetadata,
        ocrEngine: 'tesseract', // –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        preprocessingSteps: endpoint.connectionConfig.ocrConfig?.preprocessingSteps,
      };

      // 7. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      if (result.success) {
        await this.metricsService.recordMessage(
          endpoint.id,
          JSON.stringify(result.transformedData).length,
          result.processingTime,
        );
      } else {
        await this.metricsService.recordError(
          endpoint.id,
          result.errors.join('; '),
          result.processingTime,
        );
      }

      // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
      this.eventEmitter.emit('ocr.request.completed', {
        endpointId: endpoint.id,
        requestId,
        success: result.success,
        containerNumber: result.containerNumber,
        confidence: result.confidence,
        isValid: result.isValid,
        processingTime: result.processingTime,
        metadata: request.metadata,
      });

      this.logger.log(
        `${result.success ? '‚úÖ' : '‚ö†Ô∏è'} OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${requestId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ` +
        `"${result.containerNumber}" (confidence: ${result.confidence?.toFixed(2)}, ` +
        `valid: ${result.isValid}, errors: ${result.errors.length}, ` +
        `time: ${result.processingTime}ms)`
      );

      return result;

    } catch (error) {
      result.success = false;
      result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
      result.processingTime = Date.now() - startTime;

      this.logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${requestId}:`, error.stack);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ—Ç—Ä–∏–∫–∏
      await this.metricsService.recordError(
        endpoint.id,
        error.message,
        result.processingTime,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
      this.eventEmitter.emit('ocr.request.failed', {
        endpointId: endpoint.id,
        requestId,
        error: error.message,
        processingTime: result.processingTime,
        metadata: request.metadata,
      });

      return result;
    }
  }

  private validateRequest(request: OcrProcessingRequest): void {
    if (!request.endpointId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }

    if (!request.imageSource) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

    if (!request.imageSource.type || !request.imageSource.source) {
      throw new Error('–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (request.imageSource.type === 'base64') {
      const base64Size = ((request.imageSource.source as string).length * 3) / 4;
      const maxSize = 10 * 1024 * 1024; // 10MB
      
      if (base64Size > maxSize) {
        throw new Error(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: ${(base64Size / 1024 / 1024).toFixed(1)}MB (–º–∞–∫—Å–∏–º—É–º ${maxSize / 1024 / 1024}MB)`);
      }
    }
  }

  private createStructuredData(
    ocrResult: AnprResult,
    request: OcrProcessingRequest,
    endpoint: IntegrationEndpoint,
  ): any {
    return {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      containerNumber: ocrResult.containerNumber,
      confidence: ocrResult.confidence,
      isValid: ocrResult.isValid,
      validationErrors: ocrResult.validationErrors,
      
      // –ü–æ–∑–∏—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
      position: ocrResult.position,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      image: {
        width: ocrResult.imageMetadata?.width,
        height: ocrResult.imageMetadata?.height,
        format: ocrResult.imageMetadata?.format,
        size: ocrResult.imageMetadata?.size,
      },
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
      request: {
        id: request.requestId,
        gateId: request.metadata?.gateId,
        laneNumber: request.metadata?.laneNumber,
        direction: request.metadata?.direction,
        vehicleType: request.metadata?.vehicleType,
        operatorId: request.metadata?.operatorId,
        timestamp: request.metadata?.timestamp || ocrResult.timestamp,
      },
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      integration: {
        endpointId: endpoint.id,
        endpointName: endpoint.name,
        endpointType: endpoint.type,
      },
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      processing: {
        timestamp: ocrResult.timestamp,
        ocrEngine: endpoint.connectionConfig.ocrConfig?.engine || 'tesseract',
        preprocessingSteps: endpoint.connectionConfig.ocrConfig?.preprocessingSteps || [],
        language: endpoint.connectionConfig.ocrConfig?.language || 'eng',
      },
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      source: {
        type: request.imageSource.type,
        cameraId: request.imageSource.metadata?.cameraId,
        location: request.imageSource.metadata?.location,
        captureTimestamp: request.imageSource.metadata?.timestamp,
      },
    };
  }

  async processBatchOcrRequests(
    requests: OcrProcessingRequest[],
    endpoint: IntegrationEndpoint,
  ): Promise<OcrProcessingResult[]> {
    this.logger.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é OCR –æ–±—Ä–∞–±–æ—Ç–∫—É ${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${endpoint.name}`);

    const results: OcrProcessingResult[] = [];
    const batchStartTime = Date.now();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏)
    const concurrency = Math.min(requests.length, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö OCR –æ–ø–µ—Ä–∞—Ü–∏–∏
    const semaphore = Array(concurrency).fill(null);
    
    let processedCount = 0;

    const processRequest = async (request: OcrProcessingRequest): Promise<OcrProcessingResult> => {
      const result = await this.processOcrRequest(request, endpoint);
      processedCount++;
      
      this.logger.debug(
        `üìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${processedCount}/${requests.length} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ` +
        `(${((processedCount / requests.length) * 100).toFixed(1)}%)`
      );
      
      return result;
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º concurrency
    for (let i = 0; i < requests.length; i += concurrency) {
      const batch = requests.slice(i, i + concurrency);
      const batchResults = await Promise.all(
        batch.map(request => processRequest(request))
      );
      results.push(...batchResults);
    }

    const batchProcessingTime = Date.now() - batchStartTime;
    const successCount = results.filter(r => r.success).length;
    const failureCount = results.length - successCount;

    this.logger.log(
      `‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ` +
      `${failureCount} –æ—à–∏–±–æ–∫, –≤—Ä–µ–º—è: ${batchProcessingTime}ms ` +
      `(—Å—Ä–µ–¥–Ω–µ–µ: ${(batchProcessingTime / requests.length).toFixed(1)}ms –Ω–∞ –∑–∞–ø—Ä–æ—Å)`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.eventEmitter.emit('ocr.batch.completed', {
      endpointId: endpoint.id,
      totalRequests: requests.length,
      successfulRequests: successCount,
      failedRequests: failureCount,
      processingTime: batchProcessingTime,
      averageProcessingTime: batchProcessingTime / requests.length,
    });

    return results;
  }

  async getProcessingStats(endpointId?: string) {
    const ocrStats = await this.ocrAnprAdapter.getProcessingStats();
    
    return {
      ocr: ocrStats,
      metrics: endpointId ? await this.metricsService.getEndpointMetrics(endpointId) : null,
    };
  }

  private async handleOcrSuccess(event: any): Promise<void> {
    this.logger.debug(`üìä OCR —É—Å–ø–µ—Ö –¥–ª—è ${event.endpointId}: ${event.requestId}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
  }

  private async handleOcrFailure(event: any): Promise<void> {
    this.logger.warn(`üìä OCR –æ—à–∏–±–∫–∞ –¥–ª—è ${event.endpointId}: ${event.requestId} - ${event.error}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ç.–¥.
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
    if (event.error.includes('Worker') || event.error.includes('timeout')) {
      this.eventEmitter.emit('integration.critical.error', {
        endpointId: event.endpointId,
        service: 'OCR',
        error: event.error,
        severity: 'high',
        timestamp: new Date(),
      });
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  async clearCache(): Promise<void> {
    await this.ocrAnprAdapter.clearCache();
    this.logger.log('üßπ OCR –∫–µ—à –æ—á–∏—â–µ–Ω');
  }

  async healthCheck(): Promise<{
    status: 'healthy' | 'degraded' | 'unhealthy';
    details: any;
  }> {
    try {
      const stats = await this.ocrAnprAdapter.getProcessingStats();
      
      const status = stats.activeWorkers > 0 ? 'healthy' : 
                    stats.queuedRequests > 10 ? 'degraded' : 'unhealthy';
      
      return {
        status,
        details: {
          activeWorkers: stats.activeWorkers,
          queuedRequests: stats.queuedRequests,
          totalProcessed: stats.totalProcessed,
        },
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        details: {
          error: error.message,
        },
      };
    }
  }

  // –ü–æ–ª–µ–∑–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  validateContainerNumber(containerNumber: string): {
    isValid: boolean;
    errors: string[];
    normalizedNumber?: string;
  } {
    const errors: string[] = [];
    const cleanNumber = containerNumber.replace(/\s+/g, '').replace(/[^A-Z0-9-]/g, '').toUpperCase();
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if (cleanNumber.length !== 11) {
      errors.push(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞: ${cleanNumber.length} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 11)`);
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    const formatPattern = /^[A-Z]{4}\d{7}$/;
    if (!formatPattern.test(cleanNumber)) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 4 –±—É–∫–≤—ã + 7 —Ü–∏—Ñ—Ä)');
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      normalizedNumber: cleanNumber,
    };
  }

  formatContainerNumber(containerNumber: string): string {
    const clean = containerNumber.replace(/\s+/g, '').replace(/[^A-Z0-9]/g, '').toUpperCase();
    
    if (clean.length === 11) {
      return `${clean.substring(0, 4)} ${clean.substring(4, 10)} ${clean.substring(10)}`;
    }
    
    return clean;
  }
}