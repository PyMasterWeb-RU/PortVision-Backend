import {
  Injectable,
  Logger,
} from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { GpsMqttAdapter, EquipmentStatus, GpsPosition } from '../adapters/gps-mqtt.adapter';
import { DataTransformationService } from '../services/data-transformation.service';
import { RoutingService } from '../services/routing.service';
import { MetricsService } from '../services/metrics.service';
import { IntegrationEndpoint } from '../entities/integration-endpoint.entity';

export interface MqttProcessingRequest {
  endpointId: string;
  action: 'connect' | 'subscribe' | 'publish' | 'disconnect';
  topics?: string[];
  message?: any;
  qos?: 0 | 1 | 2;
  metadata?: {
    operatorId?: string;
    sessionId?: string;
    requestSource?: string;
  };
}

export interface MqttProcessingResult {
  success: boolean;
  action: string;
  endpointId: string;
  data?: any;
  errors?: string[];
  processingTime: number;
  connectedDevices?: number;
  activeSubscriptions?: number;
  metadata?: any;
}

export interface EquipmentTrackingReport {
  reportId: string;
  generatedAt: Date;
  timeRange: {
    start: Date;
    end: Date;
  };
  devices: Array<{
    deviceId: string;
    equipmentId: string;
    equipmentType: string;
    totalDistance: number; // –∫–º
    averageSpeed: number; // –∫–º/—á
    maxSpeed: number; // –∫–º/—á
    operatingTime: number; // –º–∏–Ω—É—Ç—ã
    idleTime: number; // –º–∏–Ω—É—Ç—ã
    fuelConsumption?: number; // –ª–∏—Ç—Ä—ã
    engineHours?: number; // —á–∞—Å—ã
    alertsCount: number;
    zonesVisited: string[];
    route: Array<{
      timestamp: Date;
      latitude: number;
      longitude: number;
      speed: number;
      zone?: string;
    }>;
  }>;
  summary: {
    totalDevices: number;
    totalDistance: number;
    totalOperatingTime: number;
    totalAlerts: number;
    deviceUtilization: number; // –ø—Ä–æ—Ü–µ–Ω—Ç
    fuelEfficiency?: number; // –∫–º/–ª–∏—Ç—Ä
  };
}

@Injectable()
export class MqttProcessor {
  private readonly logger = new Logger(MqttProcessor.name);
  private readonly activeConnections = new Map<string, Date>();
  private readonly processedMessages = new Map<string, number>();

  constructor(
    private readonly gpsMqttAdapter: GpsMqttAdapter,
    private readonly dataTransformationService: DataTransformationService,
    private readonly routingService: RoutingService,
    private readonly metricsService: MetricsService,
    private readonly eventEmitter: EventEmitter2,
  ) {
    this.setupEventListeners();
  }

  async processMqttRequest(
    request: MqttProcessingRequest,
    endpoint: IntegrationEndpoint,
  ): Promise<MqttProcessingResult> {
    const startTime = Date.now();
    
    this.logger.log(`üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ MQTT –∑–∞–ø—Ä–æ—Å–∞ ${request.action} –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${endpoint.name}`);

    const result: MqttProcessingResult = {
      success: false,
      action: request.action,
      endpointId: request.endpointId,
      errors: [],
      processingTime: 0,
    };

    try {
      switch (request.action) {
        case 'connect':
          result.success = await this.handleConnect(endpoint);
          if (result.success) {
            this.activeConnections.set(request.endpointId, new Date());
          }
          break;

        case 'disconnect':
          await this.handleDisconnect(endpoint);
          result.success = true;
          this.activeConnections.delete(request.endpointId);
          break;

        case 'subscribe':
          if (!request.topics || request.topics.length === 0) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–ø–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
          }
          await this.handleSubscribe(endpoint, request.topics, request.qos);
          result.success = true;
          break;

        case 'publish':
          if (!request.message) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
          }
          await this.handlePublish(endpoint, request.message, request.metadata);
          result.success = true;
          break;

        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${request.action}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      const stats = await this.gpsMqttAdapter.getConnectionStats(request.endpointId);
      result.connectedDevices = stats.activeDevices;
      result.activeSubscriptions = stats.totalConnections;

      result.processingTime = Date.now() - startTime;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      await this.metricsService.recordMessage(
        endpoint.id,
        JSON.stringify(request).length,
        result.processingTime,
      );

      this.logger.log(
        `‚úÖ MQTT –∑–∞–ø—Ä–æ—Å ${request.action} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è ${endpoint.name}: ` +
        `${result.processingTime}ms`
      );

      return result;

    } catch (error) {
      result.success = false;
      result.errors.push(error.message);
      result.processingTime = Date.now() - startTime;

      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT –∑–∞–ø—Ä–æ—Å–∞ ${request.action}:`, error.stack);

      await this.metricsService.recordError(
        endpoint.id,
        error.message,
        result.processingTime,
      );

      return result;
    }
  }

  private async handleConnect(endpoint: IntegrationEndpoint): Promise<boolean> {
    try {
      const connected = await this.gpsMqttAdapter.connect(endpoint);
      
      if (connected) {
        this.logger.log(`üîó MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${endpoint.name}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
        const topics = endpoint.connectionConfig.mqttConfig?.topics || [];
        if (topics.length > 0) {
          await this.gpsMqttAdapter.subscribe(
            endpoint.id,
            topics,
            endpoint.connectionConfig.mqttConfig?.qos || 1,
          );
        }
      }
      
      return connected;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${endpoint.name}:`, error.message);
      throw error;
    }
  }

  private async handleDisconnect(endpoint: IntegrationEndpoint): Promise<void> {
    try {
      await this.gpsMqttAdapter.disconnect(endpoint.id);
      this.logger.log(`üîå MQTT –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è ${endpoint.name}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ MQTT –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${endpoint.name}:`, error.message);
      throw error;
    }
  }

  private async handleSubscribe(
    endpoint: IntegrationEndpoint,
    topics: string[],
    qos?: 0 | 1 | 2,
  ): Promise<void> {
    try {
      await this.gpsMqttAdapter.subscribe(endpoint.id, topics, qos || 1);
      this.logger.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${endpoint.name}: ${topics.join(', ')}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ MQTT –¥–ª—è ${endpoint.name}:`, error.message);
      throw error;
    }
  }

  private async handlePublish(
    endpoint: IntegrationEndpoint,
    message: any,
    metadata?: any,
  ): Promise<void> {
    try {
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      let transformedData = message;
      
      if (endpoint.dataProcessingConfig) {
        const transformationResult = await this.dataTransformationService.processData(
          message,
          endpoint.dataProcessingConfig,
          endpoint.id,
        );

        if (transformationResult.success) {
          transformedData = transformationResult.data;
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${transformationResult.errors?.join(', ')}`);
        }
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (endpoint.routingConfig) {
        const routingResult = await this.routingService.routeData(
          transformedData,
          endpoint.routingConfig,
          endpoint.id,
        );

        if (!routingResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: ${routingResult.errors?.join(', ')}`);
        }
      }

      this.logger.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${endpoint.name}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ MQTT –¥–ª—è ${endpoint.name}:`, error.message);
      throw error;
    }
  }

  private setupEventListeners(): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç GPS/MQTT –∞–¥–∞–ø—Ç–µ—Ä–∞
    this.eventEmitter.on('gps.position.updated', this.handlePositionUpdate.bind(this));
    this.eventEmitter.on('gps.mqtt.connected', this.handleMqttConnected.bind(this));
    this.eventEmitter.on('gps.mqtt.disconnected', this.handleMqttDisconnected.bind(this));
    this.eventEmitter.on('gps.mqtt.error', this.handleMqttError.bind(this));
    this.eventEmitter.on('equipment.critical.alert', this.handleCriticalAlert.bind(this));
  }

  private async handlePositionUpdate(event: {
    endpointId: string;
    equipmentStatus: EquipmentStatus;
    previousPosition?: GpsPosition;
    zone?: any;
    timestamp: Date;
  }): Promise<void> {
    try {
      const messageCount = this.processedMessages.get(event.endpointId) || 0;
      this.processedMessages.set(event.endpointId, messageCount + 1);

      this.logger.debug(
        `üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${event.equipmentStatus.deviceId}: ` +
        `${event.equipmentStatus.position.latitude.toFixed(6)}, ` +
        `${event.equipmentStatus.position.longitude.toFixed(6)}, ` +
        `—Å–∫–æ—Ä–æ—Å—Ç—å: ${event.equipmentStatus.position.speed} –∫–º/—á, ` +
        `–∑–æ–Ω–∞: ${event.zone?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}`
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∑–æ–Ω—ã
      if (event.zone && event.previousPosition) {
        this.eventEmitter.emit('equipment.zone.changed', {
          endpointId: event.endpointId,
          deviceId: event.equipmentStatus.deviceId,
          equipmentId: event.equipmentStatus.equipmentId,
          newZone: event.zone,
          position: event.equipmentStatus.position,
          timestamp: event.timestamp,
        });
      }

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error.message);
    }
  }

  private async handleMqttConnected(event: {
    endpointId: string;
    endpointName: string;
    timestamp: Date;
  }): Promise<void> {
    this.logger.log(`üîó MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${event.endpointName}`);
    
    await this.metricsService.recordConnectionAttempt(event.endpointId, true);
  }

  private async handleMqttDisconnected(event: {
    endpointId: string;
    endpointName: string;
    timestamp: Date;
  }): Promise<void> {
    this.logger.warn(`üîå MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: ${event.endpointName}`);
    
    this.activeConnections.delete(event.endpointId);
  }

  private async handleMqttError(event: {
    endpointId: string;
    endpointName: string;
    error: string;
    timestamp: Date;
  }): Promise<void> {
    this.logger.error(`‚ùå MQTT –æ—à–∏–±–∫–∞ ${event.endpointName}: ${event.error}`);
    
    await this.metricsService.recordConnectionAttempt(event.endpointId, false);
  }

  private async handleCriticalAlert(event: {
    endpointId: string;
    deviceId: string;
    equipmentId: string;
    equipmentType: string;
    alert: string;
    position: GpsPosition;
    severity: string;
    timestamp: Date;
  }): Promise<void> {
    this.logger.error(
      `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢ –¥–ª—è ${event.equipmentType} ${event.equipmentId}: ` +
      `${event.alert} –≤ –ø–æ–∑–∏—Ü–∏–∏ ${event.position.latitude}, ${event.position.longitude}`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.eventEmitter.emit('alert.critical', {
      type: 'equipment_alert',
      severity: event.severity,
      message: `${event.equipmentType} ${event.equipmentId}: ${event.alert}`,
      data: event,
      timestamp: event.timestamp,
    });
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async getConnectedDevices(endpointId?: string): Promise<Map<string, EquipmentStatus>> {
    return await this.gpsMqttAdapter.getConnectedDevices(endpointId);
  }

  async getDeviceStatus(deviceId: string): Promise<EquipmentStatus | undefined> {
    return await this.gpsMqttAdapter.getDeviceStatus(deviceId);
  }

  async getDevicesInZone(zoneId: string): Promise<EquipmentStatus[]> {
    return await this.gpsMqttAdapter.getDevicesInZone(zoneId);
  }

  async getProcessingStats(endpointId?: string) {
    const connectionStats = await this.gpsMqttAdapter.getConnectionStats(endpointId);
    const processedCount = endpointId ? 
      this.processedMessages.get(endpointId) || 0 :
      Array.from(this.processedMessages.values()).reduce((sum, count) => sum + count, 0);

    return {
      connections: connectionStats,
      processedMessages: processedCount,
      activeConnections: this.activeConnections.size,
      lastUpdate: new Date(),
    };
  }

  async generateTrackingReport(
    deviceIds: string[],
    startTime: Date,
    endTime: Date,
  ): Promise<EquipmentTrackingReport> {
    const reportId = `tracking_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    this.logger.log(
      `üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${reportId} –¥–ª—è ${deviceIds.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ` +
      `—Å ${startTime.toISOString()} –ø–æ ${endTime.toISOString()}`
    );

    const devices = [];
    let totalDistance = 0;
    let totalOperatingTime = 0;
    let totalAlerts = 0;

    for (const deviceId of deviceIds) {
      const deviceStatus = await this.gpsMqttAdapter.getDeviceStatus(deviceId);
      
      if (deviceStatus) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î
        const deviceData = {
          deviceId,
          equipmentId: deviceStatus.equipmentId,
          equipmentType: deviceStatus.equipmentType,
          totalDistance: Math.random() * 100, // –∑–∞–≥–ª—É—à–∫–∞
          averageSpeed: Math.random() * 30,
          maxSpeed: Math.random() * 50,
          operatingTime: Math.random() * 480, // –º–∏–Ω—É—Ç—ã
          idleTime: Math.random() * 120,
          alertsCount: deviceStatus.alerts?.length || 0,
          zonesVisited: ['main_gate', 'container_yard'], // –∑–∞–≥–ª—É—à–∫–∞
          route: [
            {
              timestamp: deviceStatus.position.timestamp,
              latitude: deviceStatus.position.latitude,
              longitude: deviceStatus.position.longitude,
              speed: deviceStatus.position.speed,
              zone: deviceStatus.workingArea,
            }
          ],
        };

        devices.push(deviceData);
        totalDistance += deviceData.totalDistance;
        totalOperatingTime += deviceData.operatingTime;
        totalAlerts += deviceData.alertsCount;
      }
    }

    const report: EquipmentTrackingReport = {
      reportId,
      generatedAt: new Date(),
      timeRange: { start: startTime, end: endTime },
      devices,
      summary: {
        totalDevices: devices.length,
        totalDistance,
        totalOperatingTime,
        totalAlerts,
        deviceUtilization: devices.length > 0 ? (totalOperatingTime / (devices.length * 480)) * 100 : 0,
      },
    };

    this.logger.log(`‚úÖ –û—Ç—á–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ${reportId} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`);
    
    return report;
  }

  async testMqttConnection(endpoint: IntegrationEndpoint): Promise<boolean> {
    return await this.gpsMqttAdapter.testConnection(endpoint);
  }

  async clearDeviceData(deviceId?: string): Promise<void> {
    await this.gpsMqttAdapter.clearDeviceData(deviceId);
    
    if (deviceId) {
      this.logger.log(`üßπ –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} –æ—á–∏—â–µ–Ω—ã`);
    } else {
      this.processedMessages.clear();
      this.logger.log('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω—ã');
    }
  }

  async healthCheck(): Promise<{
    status: 'healthy' | 'degraded' | 'unhealthy';
    details: any;
  }> {
    try {
      const stats = await this.getProcessingStats();
      
      const status = stats.activeConnections > 0 ? 'healthy' : 
                    stats.connections.totalConnections > 0 ? 'degraded' : 'unhealthy';
      
      return {
        status,
        details: {
          activeConnections: stats.activeConnections,
          totalConnections: stats.connections.totalConnections,
          activeDevices: stats.connections.activeDevices,
          processedMessages: stats.processedMessages,
          lastUpdate: stats.lastUpdate,
        },
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        details: {
          error: error.message,
        },
      };
    }
  }
}