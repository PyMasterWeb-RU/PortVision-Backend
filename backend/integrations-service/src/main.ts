import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { IntegrationsServiceModule } from './integrations-service.module';

async function bootstrap() {
  const logger = new Logger('IntegrationsServiceBootstrap');
  
  const app = await NestFactory.create(IntegrationsServiceModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });
  
  const configService = app.get(ConfigService);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware –∏ pipes
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
    disableErrorMessages: false,
    transformOptions: {
      enableImplicitConversion: true,
    },
  }));

  app.setGlobalPrefix('api');

  // CORS
  app.enableCors({
    origin: process.env.NODE_ENV === 'production' 
      ? configService.get('CORS_ORIGINS', '').split(',').filter(Boolean)
      : ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:5173'],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With'],
    credentials: true,
  });

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  const config = new DocumentBuilder()
    .setTitle('PortVision 360 - Integrations Service API')
    .setDescription(`
      API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
      
      ## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
      - **OCR/ANPR** - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –∫–∞–º–µ—Ä
      - **GPS/GLONASS** - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–µ—Ö–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ MQTT
      - **RFID** - –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ RFID –º–µ—Ç–æ–∫ –Ω–∞ –≤–æ—Ä–æ—Ç–∞—Ö
      - **EDI** - –û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
      - **1–°** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —É—á–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      - **–í–µ—Å—ã** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      - **–ö–∞–º–µ—Ä—ã** - –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
      - **–§–∞–π–ª–æ–≤—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã** - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–æ–∫
      - **Custom API** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ REST API
      - **Database** - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ë–î
      
      ## –§—É–Ω–∫—Ü–∏–∏:
      - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
      - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É—Å–ª–æ–≤–∏—è–º
      - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      - –°–∏—Å—Ç–µ–º–∞ retry –∏ dead letter queue
      - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    `)
    .setVersion('1.0')
    .setContact(
      'PortVision 360 Support', 
      'https://github.com/portvision360', 
      'support@portvision360.com'
    )
    .setLicense('GNU AGPL v3', 'https://www.gnu.org/licenses/agpl-3.0.en.html')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      },
      'JWT'
    )
    .addTag('Integration Endpoints', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    .addTag('OCR/ANPR Processing', '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤')
    .addTag('GPS/MQTT Tracking', '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ MQTT')
    .addTag('RFID Readers', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RFID —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—è–º–∏')
    .addTag('EDI Gateway', '–û–±–º–µ–Ω EDI —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏')
    .addTag('1C Integration', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π 1–°')
    .addTag('File Monitoring', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫')
    .addTag('Custom Integrations', '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    .addTag('Metrics & Health', '–ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è')
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,
  });
  
  SwaggerModule.setup('api-docs', app, document, {
    customSiteTitle: 'Integrations Service API Documentation',
    customfavIcon: '/favicon.ico',
    customCss: `
      .swagger-ui .topbar { display: none; }
      .swagger-ui .info hgroup.main a { color: #3b82f6; }
      .swagger-ui .scheme-container { padding: 30px 0; }
    `,
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
      filter: true,
      showExtensions: true,
      tryItOutEnabled: true,
    },
  });

  const port = configService.get('INTEGRATIONS_PORT', 3007);
  const host = configService.get('HOST', '0.0.0.0');
  
  await app.listen(port, host);
  
  logger.log(`üöÄ Integrations Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${host}:${port}`);
  logger.log(`üìù API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${port}/api-docs`);
  logger.log(`üîó –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:`);
  logger.log(`   ‚Ä¢ OCR/ANPR - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤`);
  logger.log(`   ‚Ä¢ GPS/MQTT - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏`);
  logger.log(`   ‚Ä¢ RFID - –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª–∏ –Ω–∞ –≤–æ—Ä–æ—Ç–∞—Ö`);
  logger.log(`   ‚Ä¢ EDI - –û–±–º–µ–Ω —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏`);
  logger.log(`   ‚Ä¢ 1–° - –†–æ—Å—Å–∏–π—Å–∫–∞—è —É—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞`);
  logger.log(`   ‚Ä¢ Weighbridge - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ`);
  logger.log(`   ‚Ä¢ Camera System - –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ`);
  logger.log(`   ‚Ä¢ File Watcher - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤`);
  logger.log(`   ‚Ä¢ Custom API - REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏`);
  logger.log(`   ‚Ä¢ Database - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î`);
  logger.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${configService.get('DB_HOST', 'localhost')}:${configService.get('DB_PORT', 5432)}`);
  logger.log(`üóÇÔ∏è  Redis: ${configService.get('REDIS_URL', 'redis://localhost:6379')}`);
  logger.log(`üîê JWT Secret: ${configService.get('JWT_SECRET') ? '***' : 'default (–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)'}`);
  logger.log(`üåç Environment: ${configService.get('NODE_ENV', 'development')}`);
}

bootstrap().catch(err => {
  const logger = new Logger('IntegrationsServiceBootstrap');
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Integrations Service:', err.stack || err);
  process.exit(1);
});