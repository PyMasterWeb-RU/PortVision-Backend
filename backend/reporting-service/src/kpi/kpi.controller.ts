import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
  Request,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { KpiService } from './kpi.service';
import {
  GetKPIMetricsDto,
  CreateKPITargetDto,
  CreateKPIAlertDto,
  GetKPIDashboardDto,
  GenerateKPIReportDto,
  GetKPITrendsDto,
  GetKPIAlertsDto,
  AcknowledgeKPIAlertDto,
} from './dto/kpi.dto';
import { KPIMetric, KPITarget, KPIAlert, KPIDashboard, KPIReport } from './interfaces/kpi.interface';

// –ë–∞–∑–æ–≤—ã–µ guards –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak
// import { JwtAuthGuard } from '../auth/jwt-auth.guard';
// import { RolesGuard } from '../auth/roles.guard';
// import { Roles } from '../auth/roles.decorator';

@ApiTags('kpi')
@Controller('kpi')
// @UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth('JWT')
export class KpiController {
  private readonly logger = new Logger(KpiController.name);

  constructor(private readonly kpiService: KpiService) {}

  @Get('metrics')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ KPI –º–µ—Ç—Ä–∏–∫',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
  })
  @ApiQuery({ name: 'category', required: false, description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è KPI' })
  @ApiQuery({ name: 'dateFrom', required: false, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' })
  @ApiQuery({ name: 'dateTo', required: false, description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' })
  @ApiQuery({ name: 'period', required: false, description: '–¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞' })
  @ApiQuery({ name: 'statuses', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º' })
  @ApiQuery({ name: 'tags', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º' })
  @ApiQuery({ name: 'includeTrends', required: false, description: '–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã' })
  @ApiQuery({ name: 'includeBenchmarks', required: false, description: '–í–∫–ª—é—á–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏' })
  @ApiQuery({ name: 'includeTargets', required: false, description: '–í–∫–ª—é—á–∏—Ç—å —Ü–µ–ª–∏' })
  @ApiQuery({ name: 'forceRefresh', required: false, description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' })
  @ApiResponse({
    status: 200,
    description: 'KPI –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string', example: 'container_throughput' },
              name: { type: 'string', example: '–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (TEU)' },
              category: { type: 'string', example: 'operational' },
              value: { type: 'number', example: 1250 },
              unit: { type: 'string', example: 'TEU' },
              target: { type: 'number', example: 1000 },
              status: { type: 'string', example: 'excellent' },
              trend: {
                type: 'object',
                properties: {
                  direction: { type: 'string', example: 'up' },
                  percentage: { type: 'number', example: 5.2 },
                  period: { type: 'string', example: 'vs previous period' },
                },
              },
              calculatedAt: { type: 'string', format: 'date-time' },
            },
          },
        },
        message: { type: 'string', example: 'KPI –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getKPIMetrics(@Query() dto: GetKPIMetricsDto): Promise<{
    success: boolean;
    data: KPIMetric[];
    message: string;
  }> {
    this.logger.log(`üìä –ó–∞–ø—Ä–æ—Å KPI –º–µ—Ç—Ä–∏–∫: ${dto.category || '–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`);
    
    const metrics = await this.kpiService.getKPIMetrics(dto);
    
    return {
      success: true,
      data: metrics,
      message: 'KPI –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('dashboard')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ KPI –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  })
  @ApiQuery({ name: 'dashboardId', required: false, description: 'ID –¥–∞—à–±–æ—Ä–¥–∞' })
  @ApiQuery({ name: 'category', required: false, description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏' })
  @ApiQuery({ name: 'refreshInterval', required: false, description: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' })
  @ApiQuery({ name: 'groupBy', required: false, description: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫' })
  @ApiQuery({ name: 'sortBy', required: false, description: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫' })
  @ApiResponse({
    status: 200,
    description: 'KPI –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'default' },
            name: { type: 'string', example: '–û—Å–Ω–æ–≤–Ω—ã–µ KPI —Ç–µ—Ä–º–∏–Ω–∞–ª–∞' },
            description: { type: 'string' },
            category: { type: 'string', example: 'operational' },
            metrics: { type: 'array', items: { type: 'object' } },
            layout: {
              type: 'object',
              properties: {
                type: { type: 'string', example: 'grid' },
                columns: { type: 'number', example: 4 },
                groupBy: { type: 'string', example: 'category' },
                sorting: { type: 'string', example: 'status' },
              },
            },
            refreshInterval: { type: 'number', example: 60 },
          },
        },
        message: { type: 'string', example: 'KPI –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getKPIDashboard(@Query() dto: GetKPIDashboardDto): Promise<{
    success: boolean;
    data: KPIDashboard;
    message: string;
  }> {
    const dashboard = await this.kpiService.getKPIDashboard(dto);
    
    return {
      success: true,
      data: dashboard,
      message: 'KPI –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Post('targets')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ KPI',
    description: '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π KPI –º–µ—Ç—Ä–∏–∫–∏',
  })
  @ApiBody({
    type: CreateKPITargetDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ª–∏ KPI',
    examples: {
      'throughput-target': {
        summary: '–¶–µ–ª—å –ø–æ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
        value: {
          metricId: 'container_throughput',
          targetValue: 1000,
          targetType: 'minimum',
          effectiveFrom: '2024-01-01T00:00:00.000Z',
          effectiveTo: '2024-12-31T23:59:59.999Z',
          description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          owner: 'operations_manager',
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–¶–µ–ª—å KPI —Å–æ–∑–¥–∞–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            metricId: { type: 'string', example: 'container_throughput' },
            targetValue: { type: 'number', example: 1000 },
            targetType: { type: 'string', example: 'minimum' },
            effectiveFrom: { type: 'string', format: 'date-time' },
            effectiveTo: { type: 'string', format: 'date-time' },
            description: { type: 'string' },
            owner: { type: 'string' },
          },
        },
        message: { type: 'string', example: '–¶–µ–ª—å KPI —Å–æ–∑–¥–∞–Ω–∞' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN')
  async createKPITarget(@Body() dto: CreateKPITargetDto): Promise<{
    success: boolean;
    data: KPITarget;
    message: string;
  }> {
    this.logger.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ KPI: ${dto.metricId} = ${dto.targetValue}`);
    
    const target = await this.kpiService.createKPITarget(dto);
    
    return {
      success: true,
      data: target,
      message: '–¶–µ–ª—å KPI —Å–æ–∑–¥–∞–Ω–∞',
    };
  }

  @Post('alerts')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ KPI',
    description: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ KPI –º–µ—Ç—Ä–∏–∫–∏',
  })
  @ApiBody({
    type: CreateKPIAlertDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–µ—Ä—Ç–∞ KPI',
    examples: {
      'turnaround-alert': {
        summary: '–ê–ª–µ—Ä—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–æ—Ä–æ—Ç–∞ —Å—É–¥–Ω–∞',
        value: {
          metricId: 'vessel_turnaround_time',
          alertType: 'threshold',
          condition: {
            operator: '>',
            value: 24,
            duration: 30,
            consecutive: true,
          },
          severity: 'high',
          message: '–í—Ä–µ–º—è –æ–±–æ—Ä–æ—Ç–∞ —Å—É–¥–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ—Ä–º—É',
          actions: [
            {
              type: 'email',
              target: 'operations@terminal.com',
              template: 'kpi_alert',
            },
          ],
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–ê–ª–µ—Ä—Ç KPI —Å–æ–∑–¥–∞–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ADMIN')
  async createKPIAlert(@Body() dto: CreateKPIAlertDto): Promise<{
    success: boolean;
    data: KPIAlert;
    message: string;
  }> {
    this.logger.log(`üö® –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ KPI: ${dto.metricId} (${dto.severity})`);
    
    const alert = await this.kpiService.createKPIAlert(dto);
    
    return {
      success: true,
      data: alert,
      message: '–ê–ª–µ—Ä—Ç KPI —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Get('alerts')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ KPI',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π',
  })
  @ApiQuery({ name: 'page', required: false, description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã' })
  @ApiQuery({ name: 'limit', required: false, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' })
  @ApiQuery({ name: 'severity', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏' })
  @ApiQuery({ name: 'unacknowledgedOnly', required: false, description: '–¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' })
  @ApiQuery({ name: 'dateFrom', required: false, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' })
  @ApiQuery({ name: 'dateTo', required: false, description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' })
  @ApiQuery({ name: 'metricId', required: false, description: 'ID –º–µ—Ç—Ä–∏–∫–∏' })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            alerts: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string', example: 'alert-uuid' },
                  metricId: { type: 'string', example: 'vessel_turnaround_time' },
                  alertType: { type: 'string', example: 'threshold' },
                  severity: { type: 'string', example: 'high' },
                  message: { type: 'string' },
                  triggeredAt: { type: 'string', format: 'date-time' },
                  acknowledgedAt: { type: 'string', format: 'date-time' },
                  acknowledgedBy: { type: 'string' },
                },
              },
            },
            total: { type: 'number', example: 15 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
          },
        },
        message: { type: 'string', example: '–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getKPIAlerts(@Query() dto: GetKPIAlertsDto): Promise<{
    success: boolean;
    data: {
      alerts: KPIAlert[];
      total: number;
      page: number;
      limit: number;
    };
    message: string;
  }> {
    const data = await this.kpiService.getKPIAlerts(dto);
    
    return {
      success: true,
      data,
      message: '–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Put('alerts/:alertId/acknowledge')
  @ApiOperation({
    summary: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ KPI',
    description: '–û—Ç–º–µ—á–∞–µ—Ç –∞–ª–µ—Ä—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
  })
  @ApiParam({
    name: 'alertId',
    description: 'ID –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    example: 'alert-uuid',
  })
  @ApiBody({
    type: AcknowledgeKPIAlertDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    examples: {
      'acknowledge': {
        summary: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞',
        value: {
          comment: '–ü—Ä–æ–±–ª–µ–º–∞ –≤—ã—è–≤–ª–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º',
          expectedResolution: '2024-12-25T15:00:00.000Z',
        },
      },
    },
  })
  @ApiResponse({
    status: 200,
    description: '–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async acknowledgeAlert(
    @Param('alertId') alertId: string,
    @Body() dto: AcknowledgeKPIAlertDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: KPIAlert;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const alert = await this.kpiService.acknowledgeAlert(alertId, dto, userId);
    
    return {
      success: true,
      data: alert,
      message: '–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    };
  }

  @Post('reports')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è KPI –æ—Ç—á–µ—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º KPI –º–µ—Ç—Ä–∏–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
  })
  @ApiBody({
    type: GenerateKPIReportDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞',
    examples: {
      'monthly-report': {
        summary: '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º KPI',
        value: {
          title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ KPI –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024',
          description: '–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          category: 'operational',
          dateFrom: '2024-12-01T00:00:00.000Z',
          dateTo: '2024-12-31T23:59:59.999Z',
          includeTrendAnalysis: true,
          includeBenchmarking: true,
          includeRecommendations: true,
          includeForecast: false,
          format: 'pdf',
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: 'KPI –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'report-uuid' },
            title: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ KPI –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024' },
            category: { type: 'string', example: 'operational' },
            summary: {
              type: 'object',
              properties: {
                totalMetrics: { type: 'number', example: 10 },
                excellentCount: { type: 'number', example: 4 },
                goodCount: { type: 'number', example: 3 },
                warningCount: { type: 'number', example: 2 },
                criticalCount: { type: 'number', example: 1 },
                overallScore: { type: 'number', example: 75 },
              },
            },
            generatedAt: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: 'KPI –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'ANALYST', 'ADMIN')
  async generateKPIReport(@Body() dto: GenerateKPIReportDto): Promise<{
    success: boolean;
    data: KPIReport;
    message: string;
  }> {
    this.logger.log(`üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è KPI –æ—Ç—á–µ—Ç–∞: ${dto.title}`);
    
    const report = await this.kpiService.generateKPIReport(dto);
    
    return {
      success: true,
      data: report,
      message: 'KPI –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
    };
  }

  @Get('categories')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π KPI',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π KPI —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
  })
  @ApiResponse({
    status: 200,
    description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ KPI –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              category: { type: 'string', example: 'operational' },
              name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏' },
              description: { type: 'string' },
              metrics: { type: 'array', items: { type: 'string' } },
            },
          },
        },
        message: { type: 'string', example: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ KPI –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getKPICategories(): Promise<{
    success: boolean;
    data: Array<{
      category: string;
      name: string;
      description: string;
      metrics: string[];
    }>;
    message: string;
  }> {
    const categories = [
      {
        category: 'operational',
        name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        description: '–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        metrics: ['container_throughput', 'vessel_turnaround_time', 'truck_turnaround_time', 'berth_productivity'],
      },
      {
        category: 'financial',
        name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        description: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        metrics: ['revenue', 'revenue_per_teu', 'cost_per_move', 'profit_margin'],
      },
      {
        category: 'equipment',
        name: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        description: '–ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        metrics: ['equipment_utilization', 'equipment_availability', 'maintenance_cost', 'breakdown_frequency'],
      },
      {
        category: 'safety',
        name: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        description: '–ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
        metrics: ['accident_rate', 'injury_rate', 'near_miss_reports', 'safety_training_compliance'],
      },
      {
        category: 'environmental',
        name: '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        description: '–ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É',
        metrics: ['carbon_emissions', 'energy_consumption', 'waste_reduction', 'water_usage'],
      },
      {
        category: 'customer',
        name: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
        description: '–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
        metrics: ['customer_satisfaction', 'service_level', 'complaint_resolution_time', 'customer_retention'],
      },
    ];

    return {
      success: true,
      data: categories,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ KPI –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('stats/service')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã KPI —Å–µ—Ä–≤–∏—Å–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ KPI',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
  })
  // @Roles('ADMIN', 'MANAGER')
  async getServiceStats(): Promise<{
    success: boolean;
    data: any;
    message: string;
  }> {
    const stats = this.kpiService.getServiceStats();
    
    return {
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KPI —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }
}