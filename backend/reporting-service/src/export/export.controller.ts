import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
  Request,
  Response,
  NotFoundException,
  BadRequestException,
  StreamableFile,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
  ApiConsumes,
  ApiProduces,
} from '@nestjs/swagger';
import { ExportService } from './export.service';
import {
  CreateExportJobDto,
  GetExportJobsDto,
  CreateBatchExportDto,
  CreateAutoExportDto,
  UpdateAutoExportDto,
  CreateExportTemplateDto,
  ExportDataDto,
  ScheduleExportDto,
} from './dto/export.dto';
import {
  ExportJob,
  ExportFormat,
  ExportStatus,
  ExportType,
  BatchExportJob,
  AutoExportConfig,
  ExportTemplate,
  ExportPreset,
  ExportStatistics,
} from './interfaces/export.interface';
import { Response as ExpressResponse } from 'express';
import * as fs from 'fs';

// –ë–∞–∑–æ–≤—ã–µ guards –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak
// import { JwtAuthGuard } from '../auth/jwt-auth.guard';
// import { RolesGuard } from '../auth/roles.guard';
// import { Roles } from '../auth/roles.decorator';

@ApiTags('export')
@Controller('export')
// @UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth('JWT')
export class ExportController {
  private readonly logger = new Logger(ExportController.name);

  constructor(private readonly exportService: ExportService) {}

  @Post('jobs')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö',
  })
  @ApiBody({
    type: CreateExportJobDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞',
    examples: {
      'operations-report': {
        summary: '–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ PDF',
        value: {
          type: ExportType.REPORT,
          format: ExportFormat.PDF,
          title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024',
          description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          source: {
            type: 'report',
            id: 'operations-report',
            dateRange: {
              start: '2024-12-01T00:00:00.000Z',
              end: '2024-12-31T23:59:59.999Z',
            },
          },
          options: {
            includeHeader: true,
            includeFooter: true,
            includeSummary: true,
            includeCharts: true,
            pageSize: 'A4',
            orientation: 'portrait',
          },
          retentionDays: 7,
        },
      },
      'containers-data': {
        summary: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ Excel',
        value: {
          type: ExportType.RAW_DATA,
          format: ExportFormat.EXCEL,
          title: '–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
          source: {
            type: 'query',
            query: 'SELECT * FROM containers WHERE created_at >= ? AND created_at <= ?',
            parameters: ['2024-12-01', '2024-12-31'],
          },
          options: {
            sheetName: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã',
            autoFitColumns: true,
            includeHeader: true,
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–ó–∞–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'export-uuid' },
            type: { type: 'string', example: 'report' },
            format: { type: 'string', example: 'pdf' },
            status: { type: 'string', example: 'queued' },
            progress: { type: 'number', example: 0 },
            title: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024' },
            createdAt: { type: 'string', format: 'date-time' },
            expiresAt: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: '–ó–∞–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async createExportJob(
    @Body() dto: CreateExportJobDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: ExportJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üì§ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${dto.title} (${dto.format}) - ${userId}`);
    
    const job = await this.exportService.createExportJob(dto, userId);
    
    return {
      success: true,
      data: job,
      message: '–ó–∞–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ',
    };
  }

  @Get('jobs')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π',
  })
  @ApiQuery({ name: 'page', required: false, description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã', example: 1 })
  @ApiQuery({ name: 'limit', required: false, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', example: 20 })
  @ApiQuery({ name: 'type', required: false, enum: ExportType, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É' })
  @ApiQuery({ name: 'format', required: false, enum: ExportFormat, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ä–º–∞—Ç—É' })
  @ApiQuery({ name: 'status', required: false, enum: ExportStatus, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É' })
  @ApiQuery({ name: 'search', required: false, description: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' })
  @ApiQuery({ name: 'createdFrom', required: false, description: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å' })
  @ApiQuery({ name: 'createdTo', required: false, description: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ' })
  @ApiQuery({ name: 'myOnly', required: false, description: '–¢–æ–ª—å–∫–æ –º–æ–∏ —ç–∫—Å–ø–æ—Ä—Ç—ã', example: false })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            jobs: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  title: { type: 'string' },
                  type: { type: 'string' },
                  format: { type: 'string' },
                  status: { type: 'string' },
                  progress: { type: 'number' },
                  createdAt: { type: 'string', format: 'date-time' },
                },
              },
            },
            total: { type: 'number', example: 25 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
          },
        },
        message: { type: 'string', example: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getExportJobs(
    @Query() dto: GetExportJobsDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: {
      jobs: ExportJob[];
      total: number;
      page: number;
      limit: number;
    };
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const data = await this.exportService.getExportJobs(dto, userId);
    
    return {
      success: true,
      data,
      message: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Get('jobs/:jobId')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
    example: 'export-uuid',
  })
  @ApiResponse({
    status: 200,
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            title: { type: 'string' },
            type: { type: 'string' },
            format: { type: 'string' },
            status: { type: 'string' },
            progress: { type: 'number' },
            config: { type: 'object' },
            result: {
              type: 'object',
              properties: {
                fileName: { type: 'string' },
                fileSize: { type: 'number' },
                mimeType: { type: 'string' },
              },
            },
            createdAt: { type: 'string', format: 'date-time' },
            completedAt: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getExportJob(
    @Param('jobId') jobId: string,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: ExportJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const job = await this.exportService.getExportJob(jobId, userId);
    
    return {
      success: true,
      data: job,
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }

  @Put('jobs/:jobId/cancel')
  @ApiOperation({
    summary: '–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã',
    example: 'export-uuid',
  })
  @ApiResponse({
    status: 200,
    description: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
  })
  @ApiResponse({
    status: 400,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async cancelExportJob(
    @Param('jobId') jobId: string,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: ExportJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const job = await this.exportService.cancelExportJob(jobId, userId);
    
    return {
      success: true,
      data: job,
      message: '–ó–∞–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
    };
  }

  @Get('jobs/:jobId/download')
  @ApiOperation({
    summary: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
    example: 'export-uuid',
  })
  @ApiProduces('application/octet-stream')
  @ApiResponse({
    status: 200,
    description: '–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    headers: {
      'Content-Disposition': {
        description: 'Attachment filename',
        schema: { type: 'string' },
      },
      'Content-Type': {
        description: 'MIME type',
        schema: { type: 'string' },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: '–§–∞–π–ª –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
  })
  @ApiResponse({
    status: 404,
    description: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async downloadExportFile(
    @Param('jobId') jobId: string,
    @Request() req: any,
    @Response({ passthrough: true }) res: ExpressResponse,
  ): Promise<StreamableFile> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${jobId} - ${userId}`);
    
    const { filePath, fileName, mimeType } = await this.exportService.downloadExportFile(jobId, userId);
    
    if (!fs.existsSync(filePath)) {
      throw new NotFoundException('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ');
    }

    const file = fs.createReadStream(filePath);
    
    res.set({
      'Content-Type': mimeType,
      'Content-Disposition': `attachment; filename="${encodeURIComponent(fileName)}"`,
    });

    return new StreamableFile(file);
  }

  @Post('batch')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ',
  })
  @ApiBody({
    type: CreateBatchExportDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    examples: {
      'monthly-reports': {
        summary: '–ü–∞–∫–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤',
        value: {
          name: '–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024',
          createArchive: true,
          notifyEmails: ['manager@terminal.com'],
          jobs: [
            {
              type: ExportType.REPORT,
              format: ExportFormat.PDF,
              title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç',
              source: { type: 'report', id: 'operations' },
            },
            {
              type: ExportType.REPORT,
              format: ExportFormat.EXCEL,
              title: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç',
              source: { type: 'report', id: 'financial' },
            },
          ],
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω',
  })
  // @Roles('MANAGER', 'ADMIN')
  async createBatchExport(
    @Body() dto: CreateBatchExportDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: BatchExportJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${dto.name} - ${userId}`);
    
    const batchJob = await this.exportService.createBatchExport(dto, userId);
    
    return {
      success: true,
      data: batchJob,
      message: '–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Post('auto')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º',
  })
  @ApiBody({
    type: CreateAutoExportDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    examples: {
      'daily-operations': {
        summary: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç',
        value: {
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç',
          trigger: {
            type: 'schedule',
            schedule: '0 8 * * *',
          },
          source: {
            type: 'report',
            id: 'daily-operations',
          },
          format: ExportFormat.PDF,
          recipients: ['operations@terminal.com', 'manager@terminal.com'],
          enabled: true,
          retentionDays: 30,
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω',
  })
  // @Roles('MANAGER', 'ADMIN')
  async createAutoExport(
    @Body() dto: CreateAutoExportDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: AutoExportConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${dto.name} - ${userId}`);
    
    const autoExport = await this.exportService.createAutoExport(dto, userId);
    
    return {
      success: true,
      data: autoExport,
      message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Post('data')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ SQL –∑–∞–ø—Ä–æ—Å—É',
  })
  @ApiBody({
    type: ExportDataDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
    examples: {
      'container-movements': {
        summary: '–≠–∫—Å–ø–æ—Ä—Ç –¥–≤–∏–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        value: {
          query: 'SELECT * FROM container_movements WHERE date >= ? AND date <= ?',
          parameters: ['2024-12-01', '2024-12-31'],
          format: ExportFormat.CSV,
          fileName: 'container_movements_december',
          options: {
            includeHeader: true,
            delimiter: ',',
            encoding: 'utf8',
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω',
  })
  // @Roles('MANAGER', 'ANALYST', 'ADMIN')
  async exportData(
    @Body() dto: ExportDataDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: ExportJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üìä –ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: ${dto.format} - ${userId}`);
    
    const job = await this.exportService.exportData(dto, userId);
    
    return {
      success: true,
      data: job,
      message: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω',
    };
  }

  @Get('presets')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiResponse({
    status: 200,
    description: '–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string', example: 'operational-pdf' },
              name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç PDF' },
              description: { type: 'string' },
              category: { type: 'string', example: 'operational' },
              format: { type: 'string', example: 'pdf' },
              isDefault: { type: 'boolean', example: true },
              tags: { type: 'array', items: { type: 'string' } },
            },
          },
        },
        message: { type: 'string', example: '–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getExportPresets(): Promise<{
    success: boolean;
    data: ExportPreset[];
    message: string;
  }> {
    const presets = await this.exportService.getPresets();
    
    return {
      success: true,
      data: presets,
      message: '–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Post('templates')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiBody({
    type: CreateExportTemplateDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞',
    examples: {
      'custom-report': {
        summary: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞',
        value: {
          name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          type: ExportFormat.PDF,
          layout: {
            header: {
              content: '<h1>{{title}}</h1><p>{{companyName}} - {{dateRange}}</p>',
              height: 100,
            },
            body: {
              content: '{{content}}',
            },
            footer: {
              content: '<p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {{generatedAt}} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {{page}} –∏–∑ {{totalPages}}</p>',
              height: 50,
            },
            margin: { top: 20, right: 20, bottom: 20, left: 20 },
          },
          styling: {
            fontFamily: 'Arial',
            fontSize: 12,
            color: '#333333',
          },
          variables: {
            companyName: 'PortVision 360',
            companyLogo: 'https://example.com/logo.png',
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω',
  })
  // @Roles('MANAGER', 'ADMIN')
  async createExportTemplate(
    @Body() dto: CreateExportTemplateDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: ExportTemplate;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${dto.name} - ${userId}`);
    
    const template = await this.exportService.createTemplate(dto, userId);
    
    return {
      success: true,
      data: template,
      message: '–®–∞–±–ª–æ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Get('statistics')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            totalJobs: { type: 'number', example: 150 },
            completedJobs: { type: 'number', example: 142 },
            failedJobs: { type: 'number', example: 3 },
            avgProcessingTime: { type: 'number', example: 5420 },
            totalFileSize: { type: 'number', example: 52428800 },
            popularFormats: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  format: { type: 'string', example: 'pdf' },
                  count: { type: 'number', example: 85 },
                  percentage: { type: 'number', example: 56.7 },
                },
              },
            },
            popularTypes: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  type: { type: 'string', example: 'report' },
                  count: { type: 'number', example: 95 },
                  percentage: { type: 'number', example: 63.3 },
                },
              },
            },
            recentJobs: { type: 'array', items: { type: 'object' } },
          },
        },
        message: { type: 'string', example: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN')
  async getExportStatistics(): Promise<{
    success: boolean;
    data: ExportStatistics;
    message: string;
  }> {
    const statistics = await this.exportService.getExportStatistics();
    
    return {
      success: true,
      data: statistics,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }

  @Get('stats/service')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            totalJobs: { type: 'number', example: 150 },
            queuedJobs: { type: 'number', example: 3 },
            processingJobs: { type: 'number', example: 2 },
            batchJobs: { type: 'number', example: 5 },
            autoExports: { type: 'number', example: 8 },
            templates: { type: 'number', example: 12 },
            presets: { type: 'number', example: 6 },
            memoryUsage: {
              type: 'object',
              properties: {
                rss: { type: 'number' },
                heapTotal: { type: 'number' },
                heapUsed: { type: 'number' },
                external: { type: 'number' },
                arrayBuffers: { type: 'number' },
              },
            },
            uptime: { type: 'number', example: 86400 },
          },
        },
        message: { type: 'string', example: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  // @Roles('ADMIN')
  async getServiceStats(): Promise<{
    success: boolean;
    data: any;
    message: string;
  }> {
    const stats = this.exportService.getServiceStats();
    
    return {
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }
}