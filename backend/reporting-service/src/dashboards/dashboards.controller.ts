import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
  Request,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { DashboardsService } from './dashboards.service';
import {
  CreateDashboardDto,
  UpdateDashboardDto,
  CreateWidgetDto,
  UpdateWidgetDto,
  GetDashboardsDto,
  GetWidgetDataDto,
  CloneDashboardDto,
  ShareDashboardDto,
  ExportDashboardDto,
} from './dto/dashboard.dto';
import { DashboardConfig, DashboardTemplate, WidgetData } from './interfaces/dashboard.interface';

// –ë–∞–∑–æ–≤—ã–µ guards –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak
// import { JwtAuthGuard } from '../auth/jwt-auth.guard';
// import { RolesGuard } from '../auth/roles.guard';
// import { Roles } from '../auth/roles.decorator';

@ApiTags('dashboards')
@Controller('dashboards')
// @UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth('JWT')
export class DashboardsController {
  private readonly logger = new Logger(DashboardsController.name);

  constructor(private readonly dashboardsService: DashboardsService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π',
  })
  @ApiResponse({
    status: 201,
    description: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'dashboard-uuid' },
            name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥' },
            description: { type: 'string' },
            layout: { type: 'object' },
            widgets: { type: 'array' },
            filters: { type: 'array' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' },
      },
    },
  })
  @ApiBody({
    type: CreateDashboardDto,
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞',
    examples: {
      'operational-dashboard': {
        summary: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥',
        value: {
          name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          description: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          layout: {
            type: 'grid',
            columns: 12,
            rows: 8,
            spacing: 16,
            responsive: true,
          },
          widgets: [],
          filters: [],
          refreshInterval: 30,
          isPublic: false,
        },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async createDashboard(
    @Body() dto: CreateDashboardDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user'; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    this.logger.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞: ${dto.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    const dashboard = await this.dashboardsService.createDashboard(dto, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Get()
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π',
  })
  @ApiQuery({ name: 'page', required: false, type: Number, description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã' })
  @ApiQuery({ name: 'limit', required: false, type: Number, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' })
  @ApiQuery({ name: 'category', required: false, description: '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' })
  @ApiQuery({ name: 'search', required: false, type: String, description: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' })
  @ApiQuery({ name: 'publicOnly', required: false, type: Boolean, description: '–¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ' })
  @ApiQuery({ name: 'myOnly', required: false, type: Boolean, description: '–¢–æ–ª—å–∫–æ –º–æ–∏ –¥–∞—à–±–æ—Ä–¥—ã' })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –¥–∞—à–±–æ—Ä–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            dashboards: { type: 'array', items: { type: 'object' } },
            total: { type: 'number', example: 25 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
          },
        },
        message: { type: 'string', example: '–°–ø–∏—Å–æ–∫ –¥–∞—à–±–æ—Ä–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getDashboards(
    @Query() dto: GetDashboardsDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: {
      dashboards: DashboardConfig[];
      total: number;
      page: number;
      limit: number;
    };
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const data = await this.dashboardsService.getDashboards(dto, userId);
    
    return {
      success: true,
      data,
      message: '–°–ø–∏—Å–æ–∫ –¥–∞—à–±–æ—Ä–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Get('templates')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–∞—à–±–æ—Ä–¥–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–∞—à–±–æ—Ä–¥–æ–≤',
  })
  @ApiResponse({
    status: 200,
    description: '–®–∞–±–ª–æ–Ω—ã –¥–∞—à–±–æ—Ä–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string', example: 'operational-overview' },
              name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±–∑–æ—Ä' },
              description: { type: 'string' },
              category: { type: 'string', example: 'operations' },
              tags: { type: 'array', items: { type: 'string' } },
              previewImage: { type: 'string' },
            },
          },
        },
        message: { type: 'string', example: '–®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getTemplates(): Promise<{
    success: boolean;
    data: DashboardTemplate[];
    message: string;
  }> {
    const templates = await this.dashboardsService.getTemplates();
    
    return {
      success: true,
      data: templates,
      message: '–®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Post('templates/:templateId')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞',
  })
  @ApiParam({
    name: 'templateId',
    description: 'ID —à–∞–±–ª–æ–Ω–∞ –¥–∞—à–±–æ—Ä–¥–∞',
    example: 'operational-overview',
  })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        name: { type: 'string', example: '–ú–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥' },
      },
      required: ['name'],
    },
  })
  @ApiResponse({
    status: 201,
    description: '–î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async createFromTemplate(
    @Param('templateId') templateId: string,
    @Body('name') name: string,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.createFromTemplate(templateId, name, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞',
    };
  }

  @Get(':dashboardId')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ ID',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞ –≤–∫–ª—é—á–∞—è –≤–∏–¥–∂–µ—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã',
  })
  @ApiParam({
    name: 'dashboardId',
    description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–∞—à–±–æ—Ä–¥–∞',
    example: 'dashboard-uuid',
  })
  @ApiResponse({
    status: 200,
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞',
  })
  @ApiResponse({
    status: 404,
    description: '–î–∞—à–±–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  @ApiResponse({
    status: 403,
    description: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getDashboard(
    @Param('dashboardId') dashboardId: string,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.getDashboard(dashboardId, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–î–∞—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Put(':dashboardId')
  @ApiOperation({
    summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞',
  })
  @ApiParam({
    name: 'dashboardId',
    description: 'ID –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
  })
  @ApiBody({ type: UpdateDashboardDto })
  @ApiResponse({
    status: 200,
    description: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async updateDashboard(
    @Param('dashboardId') dashboardId: string,
    @Body() dto: UpdateDashboardDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.updateDashboard(dashboardId, dto, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω',
    };
  }

  @Delete(':dashboardId')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: '–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–£–¥–∞–ª—è–µ—Ç –¥–∞—à–±–æ—Ä–¥ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ',
  })
  @ApiParam({
    name: 'dashboardId',
    description: 'ID –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
  })
  @ApiResponse({
    status: 204,
    description: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
  })
  // @Roles('MANAGER', 'ADMIN')
  async deleteDashboard(
    @Param('dashboardId') dashboardId: string,
    @Request() req: any,
  ): Promise<void> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞: ${dashboardId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    await this.dashboardsService.deleteDashboard(dashboardId, userId);
  }

  @Post(':dashboardId/clone')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º',
  })
  @ApiParam({
    name: 'dashboardId',
    description: 'ID –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
  })
  @ApiBody({ type: CloneDashboardDto })
  @ApiResponse({
    status: 201,
    description: '–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async cloneDashboard(
    @Param('dashboardId') dashboardId: string,
    @Body() dto: CloneDashboardDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.cloneDashboard(dashboardId, dto, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–î–∞—à–±–æ—Ä–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω',
    };
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞–º–∏
  @Post(':dashboardId/widgets')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ –¥–∞—à–±–æ—Ä–¥',
    description: '–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∞—à–±–æ—Ä–¥',
  })
  @ApiParam({
    name: 'dashboardId',
    description: 'ID –¥–∞—à–±–æ—Ä–¥–∞',
  })
  @ApiBody({ type: CreateWidgetDto })
  @ApiResponse({
    status: 201,
    description: '–í–∏–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async addWidget(
    @Param('dashboardId') dashboardId: string,
    @Body() dto: CreateWidgetDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.addWidget(dashboardId, dto, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
    };
  }

  @Put(':dashboardId/widgets/:widgetId')
  @ApiOperation({
    summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞',
    description: '–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞',
  })
  @ApiParam({ name: 'dashboardId', description: 'ID –¥–∞—à–±–æ—Ä–¥–∞' })
  @ApiParam({ name: 'widgetId', description: 'ID –≤–∏–¥–∂–µ—Ç–∞' })
  @ApiBody({ type: UpdateWidgetDto })
  @ApiResponse({
    status: 200,
    description: '–í–∏–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async updateWidget(
    @Param('dashboardId') dashboardId: string,
    @Param('widgetId') widgetId: string,
    @Body() dto: UpdateWidgetDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: DashboardConfig;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const dashboard = await this.dashboardsService.updateWidget(dashboardId, widgetId, dto, userId);
    
    return {
      success: true,
      data: dashboard,
      message: '–í–∏–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
    };
  }

  @Delete(':dashboardId/widgets/:widgetId')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: '–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞',
    description: '–£–¥–∞–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞',
  })
  @ApiParam({ name: 'dashboardId', description: 'ID –¥–∞—à–±–æ—Ä–¥–∞' })
  @ApiParam({ name: 'widgetId', description: 'ID –≤–∏–¥–∂–µ—Ç–∞' })
  @ApiResponse({
    status: 204,
    description: '–í–∏–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async removeWidget(
    @Param('dashboardId') dashboardId: string,
    @Param('widgetId') widgetId: string,
    @Request() req: any,
  ): Promise<void> {
    const userId = req.user?.id || 'demo-user';
    await this.dashboardsService.removeWidget(dashboardId, widgetId, userId);
  }

  @Get(':dashboardId/widgets/:widgetId/data')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–∂–µ—Ç–µ',
  })
  @ApiParam({ name: 'dashboardId', description: 'ID –¥–∞—à–±–æ—Ä–¥–∞' })
  @ApiParam({ name: 'widgetId', description: 'ID –≤–∏–¥–∂–µ—Ç–∞' })
  @ApiQuery({ name: 'dateFrom', required: false, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏' })
  @ApiQuery({ name: 'dateTo', required: false, description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏' })
  @ApiQuery({ name: 'forceRefresh', required: false, type: Boolean, description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' })
  @ApiResponse({
    status: 200,
    description: '–î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            widgetId: { type: 'string' },
            data: { type: 'object', description: '–î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ' },
            metadata: {
              type: 'object',
              properties: {
                lastUpdated: { type: 'string', format: 'date-time' },
                executionTime: { type: 'number', example: 150 },
                dataPoints: { type: 'number', example: 24 },
                error: { type: 'string' },
              },
            },
          },
        },
        message: { type: 'string', example: '–î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getWidgetData(
    @Param('dashboardId') dashboardId: string,
    @Param('widgetId') widgetId: string,
    @Query() dto: GetWidgetDataDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: WidgetData;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const data = await this.dashboardsService.getWidgetData(dashboardId, widgetId, dto, userId);
    
    return {
      success: true,
      data,
      message: '–î–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('stats/service')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
  })
  // @Roles('ADMIN', 'MANAGER')
  async getServiceStats(): Promise<{
    success: boolean;
    data: any;
    message: string;
  }> {
    const stats = this.dashboardsService.getServiceStats();
    
    return {
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }
}