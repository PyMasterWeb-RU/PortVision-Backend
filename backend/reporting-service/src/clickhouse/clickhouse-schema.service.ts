import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ClickHouseService } from './clickhouse.service';

export interface TableSchema {
  name: string;
  engine: string;
  columns: Array<{
    name: string;
    type: string;
    nullable: boolean;
    default?: string;
    comment?: string;
  }>;
  orderBy?: string[];
  partitionBy?: string;
  settings?: Record<string, any>;
}

@Injectable()
export class ClickHouseSchemaService implements OnModuleInit {
  private readonly logger = new Logger(ClickHouseSchemaService.name);

  constructor(private readonly clickhouseService: ClickHouseService) {}

  async onModuleInit() {
    await this.initializeSchema();
  }

  private async initializeSchema(): Promise<void> {
    this.logger.log('üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã ClickHouse...');

    try {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.clickhouseService.createDatabase('portvision360');

      // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      await this.createAllTables();

      this.logger.log('‚úÖ –°—Ö–µ–º–∞ ClickHouse –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã ClickHouse:', error.message);
      throw error;
    }
  }

  private async createAllTables(): Promise<void> {
    const tables = this.getTableSchemas();

    for (const table of tables) {
      await this.createTable(table);
    }
  }

  private async createTable(schema: TableSchema): Promise<void> {
    try {
      const sql = this.buildCreateTableSQL(schema);
      await this.clickhouseService.execute(sql);
      this.logger.log(`üìã –¢–∞–±–ª–∏—Ü–∞ ${schema.name} —Å–æ–∑–¥–∞–Ω–∞`);
    } catch (error) {
      if (!error.message.includes('already exists')) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${schema.name}:`, error.message);
        throw error;
      }
    }
  }

  private buildCreateTableSQL(schema: TableSchema): string {
    const columns = schema.columns.map(col => {
      let colDef = `${col.name} ${col.type}`;
      if (col.nullable) colDef += ' Nullable(String)';
      if (col.default) colDef += ` DEFAULT ${col.default}`;
      if (col.comment) colDef += ` COMMENT '${col.comment}'`;
      return colDef;
    }).join(',\n  ');

    let sql = `CREATE TABLE IF NOT EXISTS portvision360.${schema.name} (\n  ${columns}\n)`;
    
    sql += ` ENGINE = ${schema.engine}`;

    if (schema.partitionBy) {
      sql += ` PARTITION BY ${schema.partitionBy}`;
    }

    if (schema.orderBy && schema.orderBy.length > 0) {
      sql += ` ORDER BY (${schema.orderBy.join(', ')})`;
    }

    if (schema.settings) {
      const settings = Object.entries(schema.settings)
        .map(([key, value]) => `${key} = ${value}`)
        .join(', ');
      sql += ` SETTINGS ${settings}`;
    }

    return sql;
  }

  private getTableSchemas(): TableSchema[] {
    return [
      // –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      {
        name: 'container_operations',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(timestamp)',
        orderBy: ['timestamp', 'container_number'],
        columns: [
          { name: 'operation_id', type: 'String', nullable: false, comment: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏' },
          { name: 'timestamp', type: 'DateTime', nullable: false, comment: '–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
          { name: 'operation_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏' },
          { name: 'container_number', type: 'String', nullable: false, comment: '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' },
          { name: 'container_type', type: 'LowCardinality(String)', nullable: true, comment: '–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' },
          { name: 'container_size', type: 'UInt8', nullable: true, comment: '–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' },
          { name: 'vessel_name', type: 'String', nullable: true, comment: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞' },
          { name: 'voyage', type: 'String', nullable: true, comment: '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞' },
          { name: 'operator_id', type: 'String', nullable: true, comment: 'ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' },
          { name: 'equipment_id', type: 'String', nullable: true, comment: 'ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
          { name: 'location_from', type: 'String', nullable: true, comment: '–õ–æ–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫' },
          { name: 'location_to', type: 'String', nullable: true, comment: '–õ–æ–∫–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ' },
          { name: 'duration_seconds', type: 'UInt32', nullable: true, comment: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö' },
          { name: 'client_id', type: 'String', nullable: true, comment: 'ID –∫–ª–∏–µ–Ω—Ç–∞' },
          { name: 'order_id', type: 'String', nullable: true, comment: 'ID –∑–∞—è–≤–∫–∏' },
          { name: 'status', type: 'LowCardinality(String)', nullable: false, comment: '–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –ö–ü–ü —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      {
        name: 'gate_transactions',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(timestamp)',
        orderBy: ['timestamp', 'truck_number'],
        columns: [
          { name: 'transaction_id', type: 'String', nullable: false, comment: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'timestamp', type: 'DateTime', nullable: false, comment: '–í—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'gate_direction', type: 'LowCardinality(String)', nullable: false, comment: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (in/out)' },
          { name: 'truck_number', type: 'String', nullable: false, comment: '–ù–æ–º–µ—Ä –≥—Ä—É–∑–æ–≤–∏–∫–∞' },
          { name: 'driver_name', type: 'String', nullable: true, comment: '–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è' },
          { name: 'driver_license', type: 'String', nullable: true, comment: '–ü—Ä–∞–≤–∞ –≤–æ–¥–∏—Ç–µ–ª—è' },
          { name: 'container_number', type: 'String', nullable: true, comment: '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' },
          { name: 'gross_weight', type: 'UInt32', nullable: true, comment: '–û–±—â–∏–π –≤–µ—Å' },
          { name: 'net_weight', type: 'UInt32', nullable: true, comment: '–ß–∏—Å—Ç—ã–π –≤–µ—Å' },
          { name: 'appointment_id', type: 'String', nullable: true, comment: 'ID –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Ä–µ–º—è' },
          { name: 'processing_time_seconds', type: 'UInt32', nullable: true, comment: '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏' },
          { name: 'operator_id', type: 'String', nullable: true, comment: 'ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ö–ü–ü' },
          { name: 'status', type: 'LowCardinality(String)', nullable: false, comment: '–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      {
        name: 'equipment_performance',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(timestamp)',
        orderBy: ['timestamp', 'equipment_id'],
        columns: [
          { name: 'equipment_id', type: 'String', nullable: false, comment: 'ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
          { name: 'timestamp', type: 'DateTime', nullable: false, comment: '–í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è' },
          { name: 'equipment_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
          { name: 'status', type: 'LowCardinality(String)', nullable: false, comment: '–°—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
          { name: 'utilization_percent', type: 'Float32', nullable: true, comment: '–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' },
          { name: 'moves_per_hour', type: 'Float32', nullable: true, comment: '–î–≤–∏–∂–µ–Ω–∏–π –≤ —á–∞—Å' },
          { name: 'fuel_consumption', type: 'Float32', nullable: true, comment: '–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞' },
          { name: 'maintenance_hours', type: 'Float32', nullable: true, comment: '–ß–∞—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è' },
          { name: 'breakdown_count', type: 'UInt16', nullable: true, comment: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–º–æ–∫' },
          { name: 'operator_id', type: 'String', nullable: true, comment: 'ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' },
          { name: 'location', type: 'String', nullable: true, comment: '–õ–æ–∫–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
      {
        name: 'terminal_metrics',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(timestamp)',
        orderBy: ['timestamp', 'metric_type'],
        columns: [
          { name: 'metric_id', type: 'String', nullable: false, comment: 'ID –º–µ—Ç—Ä–∏–∫–∏' },
          { name: 'timestamp', type: 'DateTime', nullable: false, comment: '–í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è' },
          { name: 'metric_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø –º–µ—Ç—Ä–∏–∫–∏' },
          { name: 'metric_name', type: 'String', nullable: false, comment: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏' },
          { name: 'value', type: 'Float64', nullable: false, comment: '–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏' },
          { name: 'unit', type: 'LowCardinality(String)', nullable: true, comment: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è' },
          { name: 'tags', type: 'Map(String, String)', nullable: true, comment: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏' },
          { name: 'source_service', type: 'LowCardinality(String)', nullable: true, comment: '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      {
        name: 'financial_transactions',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(transaction_date)',
        orderBy: ['transaction_date', 'client_id'],
        columns: [
          { name: 'transaction_id', type: 'String', nullable: false, comment: 'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'transaction_date', type: 'DateTime', nullable: false, comment: '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'transaction_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
          { name: 'client_id', type: 'String', nullable: false, comment: 'ID –∫–ª–∏–µ–Ω—Ç–∞' },
          { name: 'service_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø —É—Å–ª—É–≥–∏' },
          { name: 'amount', type: 'Decimal(15,2)', nullable: false, comment: '–°—É–º–º–∞' },
          { name: 'currency', type: 'LowCardinality(String)', nullable: false, comment: '–í–∞–ª—é—Ç–∞' },
          { name: 'container_count', type: 'UInt32', nullable: true, comment: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤' },
          { name: 'invoice_id', type: 'String', nullable: true, comment: 'ID —Å—á–µ—Ç–∞' },
          { name: 'payment_status', type: 'LowCardinality(String)', nullable: false, comment: '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –ó–∞–ø–∞—Å—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
      {
        name: 'inventory_snapshots',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(snapshot_date)',
        orderBy: ['snapshot_date', 'location'],
        columns: [
          { name: 'snapshot_id', type: 'String', nullable: false, comment: 'ID —Å–Ω–∏–º–∫–∞' },
          { name: 'snapshot_date', type: 'DateTime', nullable: false, comment: '–î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞' },
          { name: 'location', type: 'String', nullable: false, comment: '–õ–æ–∫–∞—Ü–∏—è' },
          { name: 'location_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏' },
          { name: 'container_count', type: 'UInt32', nullable: false, comment: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤' },
          { name: 'teu_count', type: 'Float32', nullable: false, comment: 'TEU –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
          { name: 'utilization_percent', type: 'Float32', nullable: true, comment: '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
          { name: 'container_types', type: 'Map(String, UInt32)', nullable: true, comment: '–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤' },
          { name: 'container_sizes', type: 'Map(String, UInt32)', nullable: true, comment: '–†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤' },
          { name: 'dwell_time_avg', type: 'Float32', nullable: true, comment: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –°–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã
      {
        name: 'system_events',
        engine: 'MergeTree()',
        partitionBy: 'toYYYYMM(timestamp)',
        orderBy: ['timestamp', 'event_type'],
        columns: [
          { name: 'event_id', type: 'String', nullable: false, comment: 'ID —Å–æ–±—ã—Ç–∏—è' },
          { name: 'timestamp', type: 'DateTime', nullable: false, comment: '–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è' },
          { name: 'event_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è' },
          { name: 'event_source', type: 'LowCardinality(String)', nullable: false, comment: '–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è' },
          { name: 'severity', type: 'LowCardinality(String)', nullable: false, comment: '–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏' },
          { name: 'message', type: 'String', nullable: false, comment: '–°–æ–æ–±—â–µ–Ω–∏–µ' },
          { name: 'details', type: 'String', nullable: true, comment: '–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è (JSON)' },
          { name: 'user_id', type: 'String', nullable: true, comment: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
          { name: 'session_id', type: 'String', nullable: true, comment: 'ID —Å–µ—Å—Å–∏–∏' },
          { name: 'ip_address', type: 'IPv4', nullable: true, comment: 'IP –∞–¥—Ä–µ—Å' },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },

      // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
      {
        name: 'daily_aggregates',
        engine: 'AggregatingMergeTree()',
        partitionBy: 'toYYYYMM(date)',
        orderBy: ['date', 'metric_type'],
        columns: [
          { name: 'date', type: 'Date', nullable: false, comment: '–î–∞—Ç–∞' },
          { name: 'metric_type', type: 'LowCardinality(String)', nullable: false, comment: '–¢–∏–ø –º–µ—Ç—Ä–∏–∫–∏' },
          { name: 'container_operations_count', type: 'AggregateFunction(count, UInt64)', nullable: true },
          { name: 'teu_moved', type: 'AggregateFunction(sum, Float32)', nullable: true },
          { name: 'gate_transactions_count', type: 'AggregateFunction(count, UInt64)', nullable: true },
          { name: 'revenue_total', type: 'AggregateFunction(sum, Decimal(15,2))', nullable: true },
          { name: 'equipment_utilization_avg', type: 'AggregateFunction(avg, Float32)', nullable: true },
          { name: 'dwell_time_avg', type: 'AggregateFunction(avg, Float32)', nullable: true },
          { name: 'created_at', type: 'DateTime', nullable: false, default: 'now()', comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏' },
        ],
      },
    ];
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
  async insertContainerOperations(operations: any[]): Promise<void> {
    await this.clickhouseService.insert('container_operations', operations);
  }

  async insertGateTransactions(transactions: any[]): Promise<void> {
    await this.clickhouseService.insert('gate_transactions', transactions);
  }

  async insertEquipmentPerformance(performance: any[]): Promise<void> {
    await this.clickhouseService.insert('equipment_performance', performance);
  }

  async insertTerminalMetrics(metrics: any[]): Promise<void> {
    await this.clickhouseService.insert('terminal_metrics', metrics);
  }

  async insertFinancialTransactions(transactions: any[]): Promise<void> {
    await this.clickhouseService.insert('financial_transactions', transactions);
  }

  async insertInventorySnapshots(snapshots: any[]): Promise<void> {
    await this.clickhouseService.insert('inventory_snapshots', snapshots);
  }

  async insertSystemEvents(events: any[]): Promise<void> {
    await this.clickhouseService.insert('system_events', events);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
  async createMaterializedViews(): Promise<void> {
    const views = [
      // –ï–∂–µ—á–∞—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
      {
        name: 'hourly_operations_mv',
        query: `
          CREATE MATERIALIZED VIEW IF NOT EXISTS portvision360.hourly_operations_mv
          ENGINE = SummingMergeTree()
          PARTITION BY toYYYYMM(hour)
          ORDER BY (hour, operation_type)
          AS SELECT
            toStartOfHour(timestamp) as hour,
            operation_type,
            count() as operations_count,
            uniq(container_number) as unique_containers,
            avg(duration_seconds) as avg_duration
          FROM portvision360.container_operations
          GROUP BY hour, operation_type
        `,
      },

      // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
      {
        name: 'daily_client_stats_mv',
        query: `
          CREATE MATERIALIZED VIEW IF NOT EXISTS portvision360.daily_client_stats_mv
          ENGINE = SummingMergeTree()
          PARTITION BY toYYYYMM(date)
          ORDER BY (date, client_id)
          AS SELECT
            toDate(transaction_date) as date,
            client_id,
            count() as transactions_count,
            sum(amount) as total_amount,
            sum(container_count) as total_containers
          FROM portvision360.financial_transactions
          GROUP BY date, client_id
        `,
      },
    ];

    for (const view of views) {
      try {
        await this.clickhouseService.execute(view.query);
        this.logger.log(`üìä –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ${view.name} —Å–æ–∑–¥–∞–Ω–æ`);
      } catch (error) {
        if (!error.message.includes('already exists')) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ${view.name}:`, error.message);
        }
      }
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ö–µ–º—ã
  async getSchemaInfo(): Promise<{
    database: string;
    tables: string[];
    totalSize: string;
  }> {
    const tables = await this.clickhouseService.getTables();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const sizeResult = await this.clickhouseService.query(`
      SELECT formatReadableSize(sum(bytes_on_disk)) as total_size
      FROM system.parts
      WHERE database = 'portvision360' AND active = 1
    `);

    return {
      database: 'portvision360',
      tables,
      totalSize: sizeResult.data[0]?.total_size || '0 B',
    };
  }

  async optimizeAllTables(): Promise<void> {
    const tables = await this.clickhouseService.getTables();
    
    for (const table of tables) {
      try {
        await this.clickhouseService.optimizeTable(table);
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error.message);
      }
    }
  }
}