import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
  Request,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { AggregationService } from './aggregation.service';
import {
  CreateAggregationJobDto,
  GetAggregationJobsDto,
  UpdateAggregationJobDto,
  RunAggregationJobDto,
  CreateAggregationTemplateDto,
  GetAggregationStatsDto,
} from './dto/aggregation.dto';
import {
  AggregationJob,
  AggregationType,
  AggregationStatus,
  AggregationCategory,
  AggregationTemplate,
  AggregationStatistics,
} from './interfaces/aggregation.interface';

// –ë–∞–∑–æ–≤—ã–µ guards –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak
// import { JwtAuthGuard } from '../auth/jwt-auth.guard';
// import { RolesGuard } from '../auth/roles.guard';
// import { Roles } from '../auth/roles.decorator';

@ApiTags('aggregation')
@Controller('aggregation')
// @UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth('JWT')
export class AggregationController {
  private readonly logger = new Logger(AggregationController.name);

  constructor(private readonly aggregationService: AggregationService) {}

  @Post('jobs')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
  })
  @ApiBody({
    type: CreateAggregationJobDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    examples: {
      'daily-operations': {
        summary: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π',
        value: {
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          type: AggregationType.SCHEDULED,
          description: '–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ –¥–Ω—è–º –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
          schedule: {
            type: 'cron',
            expression: '0 2 * * *',
            timezone: 'Europe/Moscow',
            enabled: true,
            priority: 5,
          },
          source: {
            type: 'clickhouse',
            connection: {
              host: 'localhost',
              port: 8123,
              database: 'terminal_operations',
            },
            table: 'container_movements',
            incremental: true,
            incrementalField: 'updated_at',
            batchSize: 1000,
          },
          target: {
            type: 'clickhouse',
            connection: {
              host: 'localhost',
              port: 8123,
              database: 'terminal_analytics',
            },
            table: 'daily_operations_summary',
            partitioning: {
              enabled: true,
              field: 'date',
              type: 'time',
              interval: 'day',
            },
            retention: {
              enabled: true,
              period: 365,
              archiveAfter: 90,
            },
          },
          transformation: {
            operations: [
              {
                type: 'count',
                field: '*',
                alias: 'total_operations',
              },
              {
                type: 'sum',
                field: 'teu_count',
                alias: 'total_teu',
              },
              {
                type: 'avg',
                field: 'processing_time',
                alias: 'avg_processing_time',
              },
            ],
            groupBy: ['date', 'operation_type'],
            orderBy: [{ field: 'date', direction: 'DESC' }],
          },
          isActive: true,
        },
      },
      'realtime-monitoring': {
        summary: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
        value: {
          name: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
          type: AggregationType.REALTIME,
          description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
          schedule: {
            type: 'interval',
            interval: 30000,
            enabled: true,
            priority: 8,
          },
          source: {
            type: 'kafka',
            connection: {
              host: 'localhost',
              port: 9092,
            },
            topic: 'equipment-telemetry',
            batchSize: 100,
          },
          target: {
            type: 'redis',
            connection: {
              host: 'localhost',
              port: 6379,
            },
            collection: 'equipment_status',
          },
          transformation: {
            operations: [
              {
                type: 'avg',
                field: 'cpu_usage',
                alias: 'avg_cpu',
              },
              {
                type: 'max',
                field: 'memory_usage',
                alias: 'max_memory',
              },
              {
                type: 'count',
                field: 'status',
                alias: 'total_readings',
                condition: 'status = "active"',
              },
            ],
            groupBy: ['equipment_id'],
          },
          isActive: true,
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'aggr-uuid' },
            name: { type: 'string', example: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞' },
            type: { type: 'string', example: 'scheduled' },
            status: { type: 'string', example: 'pending' },
            schedule: {
              type: 'object',
              properties: {
                type: { type: 'string', example: 'cron' },
                expression: { type: 'string', example: '0 2 * * *' },
                enabled: { type: 'boolean', example: true },
              },
            },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', format: 'date-time' },
            nextRun: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST')
  async createAggregationJob(
    @Body() dto: CreateAggregationJobDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: AggregationJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${dto.name} - ${userId}`);
    
    const job = await this.aggregationService.createAggregationJob(dto, userId);
    
    return {
      success: true,
      data: job,
      message: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ',
    };
  }

  @Get('jobs')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π',
  })
  @ApiQuery({ name: 'page', required: false, description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã', example: 1 })
  @ApiQuery({ name: 'limit', required: false, description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', example: 20 })
  @ApiQuery({ name: 'type', required: false, enum: AggregationType, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É' })
  @ApiQuery({ name: 'status', required: false, enum: AggregationStatus, description: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É' })
  @ApiQuery({ name: 'category', required: false, enum: AggregationCategory, description: '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' })
  @ApiQuery({ name: 'search', required: false, description: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' })
  @ApiQuery({ name: 'activeOnly', required: false, description: '–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ', example: false })
  @ApiQuery({ name: 'createdFrom', required: false, description: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å' })
  @ApiQuery({ name: 'createdTo', required: false, description: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ' })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            jobs: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' },
                  type: { type: 'string' },
                  status: { type: 'string' },
                  progress: { type: 'number' },
                  isActive: { type: 'boolean' },
                  createdAt: { type: 'string', format: 'date-time' },
                  nextRun: { type: 'string', format: 'date-time' },
                  lastRun: { type: 'string', format: 'date-time' },
                },
              },
            },
            total: { type: 'number', example: 25 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
          },
        },
        message: { type: 'string', example: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST', 'VIEWER')
  async getAggregationJobs(@Query() dto: GetAggregationJobsDto): Promise<{
    success: boolean;
    data: {
      jobs: AggregationJob[];
      total: number;
      page: number;
      limit: number;
    };
    message: string;
  }> {
    const data = await this.aggregationService.getAggregationJobs(dto);
    
    return {
      success: true,
      data,
      message: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Get('jobs/:jobId')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    example: 'aggr-uuid',
  })
  @ApiResponse({
    status: 200,
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            name: { type: 'string' },
            type: { type: 'string' },
            status: { type: 'string' },
            progress: { type: 'number' },
            schedule: { type: 'object' },
            source: { type: 'object' },
            target: { type: 'object' },
            transformation: { type: 'object' },
            result: {
              type: 'object',
              properties: {
                recordsProcessed: { type: 'number' },
                recordsInserted: { type: 'number' },
                executionTime: { type: 'number' },
                startTime: { type: 'string', format: 'date-time' },
                endTime: { type: 'string', format: 'date-time' },
              },
            },
            createdAt: { type: 'string', format: 'date-time' },
            lastRun: { type: 'string', format: 'date-time' },
            nextRun: { type: 'string', format: 'date-time' },
          },
        },
        message: { type: 'string', example: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST', 'VIEWER')
  async getAggregationJob(@Param('jobId') jobId: string): Promise<{
    success: boolean;
    data: AggregationJob;
    message: string;
  }> {
    const job = await this.aggregationService.getAggregationJob(jobId);
    
    return {
      success: true,
      data: job,
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }

  @Put('jobs/:jobId')
  @ApiOperation({
    summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    example: 'aggr-uuid',
  })
  @ApiBody({
    type: UpdateAggregationJobDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
    examples: {
      'update-schedule': {
        summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
        value: {
          schedule: {
            type: 'cron',
            expression: '0 3 * * *',
            enabled: true,
            priority: 7,
          },
          isActive: true,
        },
      },
      'update-transformation': {
        summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        value: {
          transformation: {
            operations: [
              {
                type: 'count',
                field: '*',
                alias: 'total_operations',
              },
              {
                type: 'sum',
                field: 'teu_count',
                alias: 'total_teu',
              },
              {
                type: 'percentile',
                field: 'processing_time',
                alias: 'p95_processing_time',
                params: { percentile: 95 },
              },
            ],
            groupBy: ['date', 'operation_type', 'client_id'],
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 200,
    description: '–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
  })
  @ApiResponse({
    status: 404,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST')
  async updateAggregationJob(
    @Param('jobId') jobId: string,
    @Body() dto: UpdateAggregationJobDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: AggregationJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    const job = await this.aggregationService.updateAggregationJob(jobId, dto, userId);
    
    return {
      success: true,
      data: job,
      message: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
    };
  }

  @Delete('jobs/:jobId')
  @ApiOperation({
    summary: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
    example: 'aggr-uuid',
  })
  @ApiResponse({
    status: 200,
    description: '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
  })
  @ApiResponse({
    status: 400,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å',
  })
  @ApiResponse({
    status: 404,
    description: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
  })
  // @Roles('MANAGER', 'ADMIN')
  async deleteAggregationJob(
    @Param('jobId') jobId: string,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    await this.aggregationService.deleteAggregationJob(jobId, userId);
    
    return {
      success: true,
      message: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–æ',
    };
  }

  @Post('jobs/:jobId/run')
  @HttpCode(HttpStatus.ACCEPTED)
  @ApiOperation({
    summary: '–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
  })
  @ApiParam({
    name: 'jobId',
    description: 'ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞',
    example: 'aggr-uuid',
  })
  @ApiBody({
    type: RunAggregationJobDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞',
    examples: {
      'normal-run': {
        summary: '–û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫',
        value: {
          highPriority: false,
          ignoreDependencies: false,
        },
      },
      'priority-run': {
        summary: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫',
        value: {
          parameters: {
            dateFrom: '2024-12-01',
            dateTo: '2024-12-31',
            forceRefresh: true,
          },
          highPriority: true,
          ignoreDependencies: false,
        },
      },
    },
  })
  @ApiResponse({
    status: 202,
    description: '–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string' },
            status: { type: 'string', example: 'pending' },
            progress: { type: 'number', example: 0 },
          },
        },
        message: { type: 'string', example: '–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ' },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST')
  async runAggregationJob(
    @Param('jobId') jobId: string,
    @Body() dto: RunAggregationJobDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: AggregationJob;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${jobId} - ${userId}`);
    
    const job = await this.aggregationService.runAggregationJob(jobId, dto, userId);
    
    return {
      success: true,
      data: job,
      message: '–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–æ',
    };
  }

  @Post('templates')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
  })
  @ApiBody({
    type: CreateAggregationTemplateDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞',
    examples: {
      'operational-template': {
        summary: '–®–∞–±–ª–æ–Ω –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
        value: {
          name: '–®–∞–±–ª–æ–Ω –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
          description: '–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
          category: AggregationCategory.OPERATIONAL,
          type: AggregationType.SCHEDULED,
          template: {
            source: {
              type: 'clickhouse',
              table: '{{source_table}}',
              incremental: true,
              incrementalField: 'updated_at',
            },
            target: {
              type: 'clickhouse',
              table: '{{target_table}}',
              partitioning: {
                enabled: true,
                field: 'date',
                type: 'time',
                interval: 'day',
              },
            },
            transformation: {
              operations: [
                { type: 'count', field: '*', alias: 'total_count' },
                { type: 'sum', field: '{{sum_field}}', alias: 'total_sum' },
              ],
              groupBy: ['{{group_field}}'],
            },
            schedule: {
              type: 'cron',
              expression: '{{cron_expression}}',
              enabled: true,
            },
          },
          variables: [
            {
              name: 'source_table',
              type: 'string',
              description: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞',
              required: true,
            },
            {
              name: 'target_table',
              type: 'string',
              description: '–¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
              required: true,
            },
            {
              name: 'sum_field',
              type: 'string',
              description: '–ü–æ–ª–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
              required: true,
            },
            {
              name: 'group_field',
              type: 'string',
              description: '–ü–æ–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏',
              required: true,
            },
            {
              name: 'cron_expression',
              type: 'string',
              description: 'Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
              required: true,
              defaultValue: '0 2 * * *',
            },
          ],
          isDefault: false,
          tags: ['–æ–ø–µ—Ä–∞—Ü–∏–∏', '—Ç–µ—Ä–º–∏–Ω–∞–ª', '–±–∞–∑–æ–≤—ã–π'],
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: '–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω',
  })
  // @Roles('MANAGER', 'ADMIN')
  async createAggregationTemplate(
    @Body() dto: CreateAggregationTemplateDto,
    @Request() req: any,
  ): Promise<{
    success: boolean;
    data: AggregationTemplate;
    message: string;
  }> {
    const userId = req.user?.id || 'demo-user';
    this.logger.log(`üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${dto.name} - ${userId}`);
    
    const template = await this.aggregationService.createAggregationTemplate(dto, userId);
    
    return {
      success: true,
      data: template,
      message: '–®–∞–±–ª–æ–Ω –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω',
    };
  }

  @Get('templates')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
  })
  @ApiResponse({
    status: 200,
    description: '–®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string', example: 'template-uuid' },
              name: { type: 'string', example: '–®–∞–±–ª–æ–Ω –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏' },
              description: { type: 'string' },
              category: { type: 'string', example: 'operational' },
              type: { type: 'string', example: 'scheduled' },
              isDefault: { type: 'boolean', example: false },
              tags: { type: 'array', items: { type: 'string' } },
              variables: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    name: { type: 'string' },
                    type: { type: 'string' },
                    description: { type: 'string' },
                    required: { type: 'boolean' },
                  },
                },
              },
            },
          },
        },
        message: { type: 'string', example: '–®–∞–±–ª–æ–Ω—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST', 'VIEWER')
  async getAggregationTemplates(): Promise<{
    success: boolean;
    data: AggregationTemplate[];
    message: string;
  }> {
    const templates = await this.aggregationService.getAggregationTemplates();
    
    return {
      success: true,
      data: templates,
      message: '–®–∞–±–ª–æ–Ω—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('statistics')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
  })
  @ApiQuery({ name: 'dateFrom', required: false, description: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞' })
  @ApiQuery({ name: 'dateTo', required: false, description: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞' })
  @ApiQuery({ name: 'category', required: false, enum: AggregationCategory, description: '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' })
  @ApiQuery({ name: 'detailed', required: false, description: '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', example: false })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            totalJobs: { type: 'number', example: 45 },
            activeJobs: { type: 'number', example: 38 },
            completedJobs: { type: 'number', example: 142 },
            failedJobs: { type: 'number', example: 3 },
            totalRecordsProcessed: { type: 'number', example: 1250000 },
            totalBytesProcessed: { type: 'number', example: 524288000 },
            averageExecutionTime: { type: 'number', example: 12500 },
            successRate: { type: 'number', example: 97.9 },
            jobsByCategory: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  category: { type: 'string', example: 'operational' },
                  count: { type: 'number', example: 25 },
                  percentage: { type: 'number', example: 55.6 },
                },
              },
            },
            jobsByType: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  type: { type: 'string', example: 'scheduled' },
                  count: { type: 'number', example: 35 },
                  percentage: { type: 'number', example: 77.8 },
                },
              },
            },
            performanceMetrics: {
              type: 'object',
              properties: {
                fastestJob: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    name: { type: 'string' },
                    executionTime: { type: 'number' },
                  },
                },
                slowestJob: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    name: { type: 'string' },
                    executionTime: { type: 'number' },
                  },
                },
              },
            },
            recentActivity: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  jobId: { type: 'string' },
                  jobName: { type: 'string' },
                  status: { type: 'string' },
                  executionTime: { type: 'number' },
                  recordsProcessed: { type: 'number' },
                  completedAt: { type: 'string', format: 'date-time' },
                },
              },
            },
          },
        },
        message: { type: 'string', example: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST')
  async getAggregationStatistics(@Query() dto: GetAggregationStatsDto): Promise<{
    success: boolean;
    data: AggregationStatistics;
    message: string;
  }> {
    const statistics = await this.aggregationService.getAggregationStatistics(dto);
    
    return {
      success: true,
      data: statistics,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }

  @Get('categories')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
  })
  @ApiResponse({
    status: 200,
    description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              category: { type: 'string', example: 'operational' },
              name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
              description: { type: 'string' },
              examples: { type: 'array', items: { type: 'string' } },
            },
          },
        },
        message: { type: 'string', example: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN', 'ANALYST', 'VIEWER')
  async getAggregationCategories(): Promise<{
    success: boolean;
    data: Array<{
      category: string;
      name: string;
      description: string;
      examples: string[];
    }>;
    message: string;
  }> {
    const categories = [
      {
        category: AggregationCategory.OPERATIONAL,
        name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        examples: ['–î–≤–∏–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤', '–û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏—á–∞–ª–æ–≤', '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'],
      },
      {
        category: AggregationCategory.FINANCIAL,
        name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        examples: ['–í—ã—Ä—É—á–∫–∞', '–†–∞—Å—Ö–æ–¥—ã', '–ü—Ä–∏–±—ã–ª—å –ø–æ —É—Å–ª—É–≥–∞–º'],
      },
      {
        category: AggregationCategory.EQUIPMENT,
        name: '–î–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        examples: ['–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∞–Ω–æ–≤', '–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
      },
      {
        category: AggregationCategory.SAFETY,
        name: '–î–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        examples: ['–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã', '–ù–∞—Ä—É—à–µ–Ω–∏—è', '–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞'],
      },
      {
        category: AggregationCategory.ENVIRONMENTAL,
        name: '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        examples: ['–í—ã–±—Ä–æ—Å—ã CO2', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏', '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤'],
      },
      {
        category: AggregationCategory.CUSTOMER,
        name: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        description: '–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º',
        examples: ['–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', '–û–±—ä–µ–º—ã –≥—Ä—É–∑–æ–æ–±–æ—Ä–æ—Ç–∞'],
      },
      {
        category: AggregationCategory.CUSTOM,
        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
        examples: ['–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã', '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'],
      },
    ];

    return {
      success: true,
      data: categories,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('stats/service')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            totalJobs: { type: 'number', example: 45 },
            runningJobs: { type: 'number', example: 3 },
            queuedJobs: { type: 'number', example: 7 },
            highPriorityQueue: { type: 'number', example: 2 },
            normalPriorityQueue: { type: 'number', example: 4 },
            lowPriorityQueue: { type: 'number', example: 1 },
            templates: { type: 'number', example: 8 },
            queues: { type: 'number', example: 3 },
            incrementalStates: { type: 'number', example: 12 },
            memoryUsage: {
              type: 'object',
              properties: {
                rss: { type: 'number' },
                heapTotal: { type: 'number' },
                heapUsed: { type: 'number' },
                external: { type: 'number' },
                arrayBuffers: { type: 'number' },
              },
            },
            uptime: { type: 'number', example: 86400 },
          },
        },
        message: { type: 'string', example: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  // @Roles('ADMIN')
  async getServiceStats(): Promise<{
    success: boolean;
    data: any;
    message: string;
  }> {
    const stats = this.aggregationService.getServiceStats();
    
    return {
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }
}