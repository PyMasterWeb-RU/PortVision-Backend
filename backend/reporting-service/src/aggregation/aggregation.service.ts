import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { ClickHouseService } from '../clickhouse/clickhouse.service';
import {
  CreateAggregationJobDto,
  GetAggregationJobsDto,
  UpdateAggregationJobDto,
  RunAggregationJobDto,
  CreateAggregationTemplateDto,
  GetAggregationStatsDto,
} from './dto/aggregation.dto';
import {
  AggregationJob,
  AggregationType,
  AggregationStatus,
  AggregationCategory,
  AggregationTemplate,
  AggregationStatistics,
  AggregationQueue,
  AggregationQueueItem,
  AggregationResult,
  AggregationOperationType,
  IncrementalState,
  AggregationMonitoring,
  AggregationAlert,
  AggregationAlertType,
  DataLineage,
  DataQualityResult,
} from './interfaces/aggregation.interface';
import { v4 as uuidv4 } from 'uuid';
import * as cron from 'node-cron';

@Injectable()
export class AggregationService {
  private readonly logger = new Logger(AggregationService.name);
  
  // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  private readonly jobs = new Map<string, AggregationJob>();
  private readonly templates = new Map<string, AggregationTemplate>();
  private readonly queues = new Map<string, AggregationQueue>();
  private readonly queueItems = new Map<string, AggregationQueueItem>();
  private readonly incrementalStates = new Map<string, IncrementalState>();
  
  // –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
  private readonly highPriorityQueue: string[] = [];
  private readonly normalPriorityQueue: string[] = [];
  private readonly lowPriorityQueue: string[] = [];
  private readonly runningJobs = new Set<string>();

  constructor(
    private readonly clickhouseService: ClickHouseService,
    private readonly eventEmitter: EventEmitter2,
  ) {
    this.initializeDefaultTemplates();
    this.initializeQueues();
  }

  async createAggregationJob(dto: CreateAggregationJobDto, userId: string): Promise<AggregationJob> {
    this.logger.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${dto.name} (${dto.type})`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.validateJobConfiguration(dto);

    const job: AggregationJob = {
      id: uuidv4(),
      name: dto.name,
      type: dto.type,
      status: AggregationStatus.PENDING,
      schedule: {
        ...dto.schedule,
        priority: dto.schedule.priority || 5,
      },
      source: dto.source,
      target: dto.target,
      transformation: dto.transformation,
      progress: 0,
      createdAt: new Date(),
      createdBy: userId,
      isActive: dto.isActive ?? true,
    };

    // –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è cron
    if (job.schedule.type === 'cron' && job.schedule.expression) {
      job.nextRun = this.calculateNextRun(job.schedule.expression, job.schedule.timezone);
    }

    this.jobs.set(job.id, job);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    if (job.isActive && job.type === AggregationType.ON_DEMAND) {
      this.enqueueJob(job.id, job.schedule.priority || 5);
    }

    this.eventEmitter.emit('aggregation.job.created', {
      jobId: job.id,
      name: job.name,
      type: job.type,
      userId,
    });

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (job.source.incremental) {
      this.createIncrementalState(job.id);
    }

    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–∞–∂ –¥–∞–Ω–Ω—ã—Ö
    this.createDataLineage(job);

    this.logger.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ: ${job.id}`);
    return job;
  }

  async getAggregationJobs(dto: GetAggregationJobsDto): Promise<{
    jobs: AggregationJob[];
    total: number;
    page: number;
    limit: number;
  }> {
    let jobs = Array.from(this.jobs.values());

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (dto.type) {
      jobs = jobs.filter(j => j.type === dto.type);
    }
    if (dto.status) {
      jobs = jobs.filter(j => j.status === dto.status);
    }
    if (dto.category) {
      // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–≥–∞–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
      jobs = jobs.filter(j => 
        j.name.toLowerCase().includes(dto.category!.toLowerCase())
      );
    }
    if (dto.search) {
      const search = dto.search.toLowerCase();
      jobs = jobs.filter(j => 
        j.name.toLowerCase().includes(search)
      );
    }
    if (dto.activeOnly) {
      jobs = jobs.filter(j => j.isActive);
    }
    if (dto.createdFrom) {
      const createdFrom = new Date(dto.createdFrom);
      jobs = jobs.filter(j => j.createdAt >= createdFrom);
    }
    if (dto.createdTo) {
      const createdTo = new Date(dto.createdTo);
      jobs = jobs.filter(j => j.createdAt <= createdTo);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    jobs.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const offset = (dto.page - 1) * dto.limit;
    const paginatedJobs = jobs.slice(offset, offset + dto.limit);

    return {
      jobs: paginatedJobs,
      total: jobs.length,
      page: dto.page,
      limit: dto.limit,
    };
  }

  async getAggregationJob(jobId: string): Promise<AggregationJob> {
    const job = this.jobs.get(jobId);
    if (!job) {
      throw new NotFoundException(`–ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å ID ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    return job;
  }

  async updateAggregationJob(jobId: string, dto: UpdateAggregationJobDto, userId: string): Promise<AggregationJob> {
    const job = await this.getAggregationJob(jobId);

    if (dto.name !== undefined) job.name = dto.name;
    if (dto.isActive !== undefined) job.isActive = dto.isActive;
    if (dto.schedule) {
      job.schedule = { ...job.schedule, ...dto.schedule };
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
      if (job.schedule.type === 'cron' && job.schedule.expression) {
        job.nextRun = this.calculateNextRun(job.schedule.expression, job.schedule.timezone);
      }
    }
    if (dto.transformation) {
      job.transformation = { ...job.transformation, ...dto.transformation };
    }

    this.jobs.set(jobId, job);

    this.eventEmitter.emit('aggregation.job.updated', {
      jobId,
      changes: dto,
      userId,
    });

    this.logger.log(`üìù –ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${jobId}`);
    return job;
  }

  async deleteAggregationJob(jobId: string, userId: string): Promise<void> {
    const job = await this.getAggregationJob(jobId);

    if (job.status === AggregationStatus.RUNNING) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—é—â–µ–µ—Å—è –∑–∞–¥–∞–Ω–∏–µ');
    }

    this.jobs.delete(jobId);
    this.incrementalStates.delete(jobId);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π
    this.removeFromQueues(jobId);

    this.eventEmitter.emit('aggregation.job.deleted', {
      jobId,
      jobName: job.name,
      userId,
    });

    this.logger.log(`üóëÔ∏è –ó–∞–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–æ: ${jobId}`);
  }

  async runAggregationJob(jobId: string, dto: RunAggregationJobDto, userId: string): Promise<AggregationJob> {
    const job = await this.getAggregationJob(jobId);

    if (job.status === AggregationStatus.RUNNING) {
      throw new BadRequestException('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priority = dto.highPriority ? 10 : (job.schedule.priority || 5);
    this.enqueueJob(jobId, priority, dto.parameters);

    this.eventEmitter.emit('aggregation.job.triggered', {
      jobId,
      triggeredBy: userId,
      parameters: dto.parameters,
    });

    this.logger.log(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${jobId} - ${userId}`);
    return job;
  }

  async createAggregationTemplate(dto: CreateAggregationTemplateDto, userId: string): Promise<AggregationTemplate> {
    this.logger.log(`üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${dto.name}`);

    const template: AggregationTemplate = {
      id: uuidv4(),
      name: dto.name,
      description: dto.description || '',
      category: dto.category,
      type: dto.type,
      template: dto.template,
      variables: dto.variables,
      isDefault: dto.isDefault || false,
      tags: dto.tags || [],
    };

    this.templates.set(template.id, template);

    this.eventEmitter.emit('aggregation.template.created', {
      templateId: template.id,
      name: template.name,
      userId,
    });

    this.logger.log(`‚úÖ –®–∞–±–ª–æ–Ω –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: ${template.id}`);
    return template;
  }

  async getAggregationTemplates(): Promise<AggregationTemplate[]> {
    return Array.from(this.templates.values());
  }

  async getAggregationStatistics(dto: GetAggregationStatsDto): Promise<AggregationStatistics> {
    let jobs = Array.from(this.jobs.values());

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    if (dto.dateFrom) {
      const dateFrom = new Date(dto.dateFrom);
      jobs = jobs.filter(j => j.createdAt >= dateFrom);
    }
    if (dto.dateTo) {
      const dateTo = new Date(dto.dateTo);
      jobs = jobs.filter(j => j.createdAt <= dateTo);
    }
    if (dto.category) {
      jobs = jobs.filter(j => 
        j.name.toLowerCase().includes(dto.category!.toLowerCase())
      );
    }

    const completedJobs = jobs.filter(j => j.status === AggregationStatus.COMPLETED);
    const failedJobs = jobs.filter(j => j.status === AggregationStatus.FAILED);
    const activeJobs = jobs.filter(j => j.isActive);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryMap = new Map<AggregationCategory, number>();
    jobs.forEach(job => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º
      let category = AggregationCategory.CUSTOM;
      const name = job.name.toLowerCase();
      
      if (name.includes('–æ–ø–µ—Ä–∞—Ü') || name.includes('terminal')) {
        category = AggregationCategory.OPERATIONAL;
      } else if (name.includes('—Ñ–∏–Ω–∞–Ω—Å') || name.includes('–¥–æ—Ö–æ–¥')) {
        category = AggregationCategory.FINANCIAL;
      } else if (name.includes('–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ') || name.includes('equipment')) {
        category = AggregationCategory.EQUIPMENT;
      } else if (name.includes('–±–µ–∑–æ–ø–∞—Å–Ω') || name.includes('safety')) {
        category = AggregationCategory.SAFETY;
      } else if (name.includes('—ç–∫–æ–ª–æ–≥–∏—è') || name.includes('environment')) {
        category = AggregationCategory.ENVIRONMENTAL;
      } else if (name.includes('–∫–ª–∏–µ–Ω—Ç') || name.includes('customer')) {
        category = AggregationCategory.CUSTOMER;
      }
      
      categoryMap.set(category, (categoryMap.get(category) || 0) + 1);
    });

    const jobsByCategory = Array.from(categoryMap.entries()).map(([category, count]) => ({
      category,
      count,
      percentage: jobs.length > 0 ? (count / jobs.length) * 100 : 0,
    }));

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const typeMap = new Map<AggregationType, number>();
    jobs.forEach(job => {
      typeMap.set(job.type, (typeMap.get(job.type) || 0) + 1);
    });

    const jobsByType = Array.from(typeMap.entries()).map(([type, count]) => ({
      type,
      count,
      percentage: jobs.length > 0 ? (count / jobs.length) * 100 : 0,
    }));

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const executionTimes = completedJobs
      .filter(j => j.result?.executionTime)
      .map(j => j.result!.executionTime);

    const totalRecordsProcessed = completedJobs.reduce((sum, job) => 
      sum + (job.result?.recordsProcessed || 0), 0
    );

    const totalBytesProcessed = completedJobs.reduce((sum, job) => 
      sum + (job.result?.bytesProcessed || 0), 0
    );

    const averageExecutionTime = executionTimes.length > 0 
      ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length 
      : 0;

    const fastestJob = executionTimes.length > 0 
      ? completedJobs.reduce((fastest, job) => 
          (job.result?.executionTime || 0) < (fastest.result?.executionTime || Infinity) ? job : fastest
        )
      : null;

    const slowestJob = executionTimes.length > 0 
      ? completedJobs.reduce((slowest, job) => 
          (job.result?.executionTime || 0) > (slowest.result?.executionTime || 0) ? job : slowest
        )
      : null;

    const jobRunCounts = new Map<string, number>();
    completedJobs.forEach(job => {
      jobRunCounts.set(job.id, (jobRunCounts.get(job.id) || 0) + 1);
    });

    const mostActiveJob = Array.from(jobRunCounts.entries()).reduce(
      (most, [jobId, count]) => {
        return count > most.count ? { jobId, count } : most;
      },
      { jobId: '', count: 0 }
    );

    const biggestJob = completedJobs.reduce((biggest, job) => 
      (job.result?.recordsProcessed || 0) > (biggest.result?.recordsProcessed || 0) ? job : biggest
    );

    // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const recentActivity = completedJobs
      .filter(j => j.completedAt)
      .sort((a, b) => b.completedAt!.getTime() - a.completedAt!.getTime())
      .slice(0, 10)
      .map(job => ({
        jobId: job.id,
        jobName: job.name,
        status: job.status,
        executionTime: job.result?.executionTime || 0,
        recordsProcessed: job.result?.recordsProcessed || 0,
        completedAt: job.completedAt!,
      }));

    return {
      totalJobs: jobs.length,
      activeJobs: activeJobs.length,
      completedJobs: completedJobs.length,
      failedJobs: failedJobs.length,
      totalRecordsProcessed,
      totalBytesProcessed,
      averageExecutionTime,
      successRate: jobs.length > 0 ? (completedJobs.length / jobs.length) * 100 : 0,
      jobsByCategory,
      jobsByType,
      performanceMetrics: {
        fastestJob: fastestJob ? {
          id: fastestJob.id,
          name: fastestJob.name,
          executionTime: fastestJob.result?.executionTime || 0,
        } : { id: '', name: '', executionTime: 0 },
        slowestJob: slowestJob ? {
          id: slowestJob.id,
          name: slowestJob.name,
          executionTime: slowestJob.result?.executionTime || 0,
        } : { id: '', name: '', executionTime: 0 },
        mostActiveJob: mostActiveJob.jobId ? {
          id: mostActiveJob.jobId,
          name: this.jobs.get(mostActiveJob.jobId)?.name || '',
          runsCount: mostActiveJob.count,
        } : { id: '', name: '', runsCount: 0 },
        biggestJob: biggestJob ? {
          id: biggestJob.id,
          name: biggestJob.name,
          recordsProcessed: biggestJob.result?.recordsProcessed || 0,
        } : { id: '', name: '', recordsProcessed: 0 },
      },
      recentActivity,
    };
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  @Cron(CronExpression.EVERY_MINUTE)
  private async checkScheduledJobs(): Promise<void> {
    const now = new Date();
    const jobs = Array.from(this.jobs.values());

    for (const job of jobs) {
      if (
        job.isActive && 
        job.type === AggregationType.SCHEDULED && 
        job.nextRun && 
        job.nextRun <= now &&
        job.status !== AggregationStatus.RUNNING
      ) {
        this.logger.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: ${job.id} - ${job.name}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        this.enqueueJob(job.id, job.schedule.priority || 5);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if (job.schedule.expression) {
          job.nextRun = this.calculateNextRun(job.schedule.expression, job.schedule.timezone);
          this.jobs.set(job.id, job);
        }
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π - –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  @Cron(CronExpression.EVERY_10_SECONDS)
  private async processJobQueues(): Promise<void> {
    const maxConcurrentJobs = 5; // –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

    while (this.runningJobs.size < maxConcurrentJobs) {
      let jobId: string | undefined;

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
      if (this.highPriorityQueue.length > 0) {
        jobId = this.highPriorityQueue.shift();
      } else if (this.normalPriorityQueue.length > 0) {
        jobId = this.normalPriorityQueue.shift();
      } else if (this.lowPriorityQueue.length > 0) {
        jobId = this.lowPriorityQueue.shift();
      } else {
        break; // –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—è—Ö
      }

      if (jobId && !this.runningJobs.has(jobId)) {
        this.runningJobs.add(jobId);
        setImmediate(() => this.executeAggregationJob(jobId!));
      }
    }
  }

  private async executeAggregationJob(jobId: string, parameters?: Record<string, any>): Promise<void> {
    const job = this.jobs.get(jobId);
    if (!job) {
      this.runningJobs.delete(jobId);
      return;
    }

    try {
      job.status = AggregationStatus.RUNNING;
      job.startedAt = new Date();
      job.progress = 10;

      this.eventEmitter.emit('aggregation.job.started', { 
        jobId, 
        startedAt: job.startedAt 
      });

      this.logger.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${jobId} - ${job.name}`);

      // –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      job.progress = 30;
      const sourceData = await this.extractData(job, parameters);
      
      // –≠—Ç–∞–ø 2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      job.progress = 60;
      const transformedData = await this.transformData(job, sourceData);
      
      // –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      job.progress = 80;
      const result = await this.loadData(job, transformedData);
      
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      job.status = AggregationStatus.COMPLETED;
      job.progress = 100;
      job.completedAt = new Date();
      job.result = result;
      job.lastRun = new Date();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (job.source.incremental) {
        this.updateIncrementalState(job.id, sourceData);
      }

      this.eventEmitter.emit('aggregation.job.completed', {
        jobId,
        result,
        executionTime: result.executionTime,
      });

      this.logger.log(`‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${jobId} - ${result.recordsProcessed} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${result.executionTime}–º—Å`);

    } catch (error) {
      job.status = AggregationStatus.FAILED;
      job.error = error.message;
      job.completedAt = new Date();

      this.eventEmitter.emit('aggregation.job.failed', {
        jobId,
        error: error.message,
      });

      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ${jobId}:`, error.message);
    } finally {
      this.jobs.set(jobId, job);
      this.runningJobs.delete(jobId);
    }
  }

  private async extractData(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    const { source } = job;
    
    switch (source.type) {
      case 'clickhouse':
        return this.extractFromClickHouse(job, parameters);
      case 'postgresql':
        return this.extractFromPostgreSQL(job, parameters);
      case 'kafka':
        return this.extractFromKafka(job, parameters);
      case 'api':
        return this.extractFromAPI(job, parameters);
      case 'file':
        return this.extractFromFile(job, parameters);
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${source.type}`);
    }
  }

  private async extractFromClickHouse(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    const { source } = job;
    let query = source.query || `SELECT * FROM ${source.table}`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (source.filters && source.filters.length > 0) {
      const whereClause = this.buildWhereClause(source.filters);
      query += query.toLowerCase().includes('where') ? ` AND ${whereClause}` : ` WHERE ${whereClause}`;
    }
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if (source.incremental && source.incrementalField) {
      const state = this.incrementalStates.get(job.id);
      if (state && state.lastProcessedValue) {
        const condition = `${source.incrementalField} > '${state.lastProcessedValue}'`;
        query += query.toLowerCase().includes('where') ? ` AND ${condition}` : ` WHERE ${condition}`;
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (parameters) {
      Object.entries(parameters).forEach(([key, value]) => {
        query = query.replace(new RegExp(`{{${key}}}`, 'g'), String(value));
      });
    }
    
    this.logger.debug(`üìä ClickHouse –∑–∞–ø—Ä–æ—Å: ${query}`);
    
    const result = await this.clickhouseService.query(query);
    return result.data || [];
  }

  private async extractFromPostgreSQL(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PostgreSQL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    this.logger.warn('PostgreSQL –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return [];
  }

  private async extractFromKafka(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Kafka –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    this.logger.warn('Kafka –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return [];
  }

  private async extractFromAPI(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    this.logger.warn('API –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return [];
  }

  private async extractFromFile(job: AggregationJob, parameters?: Record<string, any>): Promise<any[]> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    this.logger.warn('–§–∞–π–ª–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    return [];
  }

  private async transformData(job: AggregationJob, data: any[]): Promise<any[]> {
    if (!data || data.length === 0) {
      return [];
    }

    const { transformation } = job;
    let result = data;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (transformation.operations) {
      result = this.applyAggregationOperations(data, transformation);
    }

    return result;
  }

  private applyAggregationOperations(data: any[], transformation: any): any[] {
    const { operations, groupBy, orderBy, having, limit, offset } = transformation;
    
    if (!groupBy || groupBy.length === 0) {
      // –ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
      const aggregatedRow: any = {};
      
      operations.forEach((op: any) => {
        const fieldName = op.alias || `${op.type}_${op.field}`;
        aggregatedRow[fieldName] = this.calculateAggregation(data, op);
      });
      
      return [aggregatedRow];
    }

    // –° –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    const grouped = this.groupData(data, groupBy);
    const result: any[] = [];

    for (const [groupKey, groupData] of grouped.entries()) {
      const row: any = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const groupKeyParts = groupKey.split('|');
      groupBy.forEach((field: string, index: number) => {
        row[field] = groupKeyParts[index];
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
      operations.forEach((op: any) => {
        const fieldName = op.alias || `${op.type}_${op.field}`;
        row[fieldName] = this.calculateAggregation(groupData, op);
      });
      
      result.push(row);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º HAVING
    let filteredResult = result;
    if (having && having.length > 0) {
      filteredResult = result.filter(row => this.evaluateHavingConditions(row, having));
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (orderBy && orderBy.length > 0) {
      filteredResult.sort((a, b) => {
        for (const order of orderBy) {
          const aVal = a[order.field];
          const bVal = b[order.field];
          const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
          
          if (comparison !== 0) {
            return order.direction === 'DESC' ? -comparison : comparison;
          }
        }
        return 0;
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º LIMIT –∏ OFFSET
    const startIndex = offset || 0;
    const endIndex = limit ? startIndex + limit : filteredResult.length;
    
    return filteredResult.slice(startIndex, endIndex);
  }

  private groupData(data: any[], groupBy: string[]): Map<string, any[]> {
    const groups = new Map<string, any[]>();
    
    data.forEach(row => {
      const groupKey = groupBy.map(field => row[field] || '').join('|');
      
      if (!groups.has(groupKey)) {
        groups.set(groupKey, []);
      }
      groups.get(groupKey)!.push(row);
    });
    
    return groups;
  }

  private calculateAggregation(data: any[], operation: any): any {
    const { type, field, params } = operation;
    
    switch (type) {
      case AggregationOperationType.COUNT:
        return field === '*' ? data.length : data.filter(row => row[field] != null).length;
        
      case AggregationOperationType.SUM:
        return data.reduce((sum, row) => sum + (parseFloat(row[field]) || 0), 0);
        
      case AggregationOperationType.AVG:
        const validValues = data.filter(row => row[field] != null);
        const sum = validValues.reduce((sum, row) => sum + (parseFloat(row[field]) || 0), 0);
        return validValues.length > 0 ? sum / validValues.length : null;
        
      case AggregationOperationType.MIN:
        return Math.min(...data.map(row => parseFloat(row[field]) || Infinity));
        
      case AggregationOperationType.MAX:
        return Math.max(...data.map(row => parseFloat(row[field]) || -Infinity));
        
      case AggregationOperationType.MEDIAN:
        const sortedValues = data
          .map(row => parseFloat(row[field]))
          .filter(val => !isNaN(val))
          .sort((a, b) => a - b);
        const mid = Math.floor(sortedValues.length / 2);
        return sortedValues.length % 2 === 0 
          ? (sortedValues[mid - 1] + sortedValues[mid]) / 2 
          : sortedValues[mid];
          
      case AggregationOperationType.PERCENTILE:
        const percentile = params?.percentile || 95;
        const values = data
          .map(row => parseFloat(row[field]))
          .filter(val => !isNaN(val))
          .sort((a, b) => a - b);
        const index = Math.ceil((percentile / 100) * values.length) - 1;
        return values[Math.max(0, index)];
        
      default:
        this.logger.warn(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${type}`);
        return null;
    }
  }

  private evaluateHavingConditions(row: any, havingConditions: any[]): boolean {
    return havingConditions.every(condition => {
      const { field, operator, value } = condition;
      const fieldValue = row[field];
      
      switch (operator) {
        case 'eq': return fieldValue == value;
        case 'ne': return fieldValue != value;
        case 'gt': return fieldValue > value;
        case 'gte': return fieldValue >= value;
        case 'lt': return fieldValue < value;
        case 'lte': return fieldValue <= value;
        case 'in': return Array.isArray(value) && value.includes(fieldValue);
        case 'not_in': return Array.isArray(value) && !value.includes(fieldValue);
        default: return true;
      }
    });
  }

  private async loadData(job: AggregationJob, data: any[]): Promise<AggregationResult> {
    const startTime = new Date();
    const { target } = job;
    
    let recordsInserted = 0;
    let recordsUpdated = 0;
    
    switch (target.type) {
      case 'clickhouse':
        recordsInserted = await this.loadToClickHouse(job, data);
        break;
      case 'postgresql':
        recordsInserted = await this.loadToPostgreSQL(job, data);
        break;
      case 'redis':
        recordsInserted = await this.loadToRedis(job, data);
        break;
      case 'file':
        recordsInserted = await this.loadToFile(job, data);
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${target.type}`);
    }
    
    const endTime = new Date();
    const executionTime = endTime.getTime() - startTime.getTime();
    
    return {
      recordsProcessed: data.length,
      recordsInserted,
      recordsUpdated,
      recordsDeleted: 0,
      bytesProcessed: JSON.stringify(data).length,
      executionTime,
      startTime,
      endTime,
    };
  }

  private async loadToClickHouse(job: AggregationJob, data: any[]): Promise<number> {
    if (!data || data.length === 0) {
      return 0;
    }
    
    const { target } = job;
    const tableName = target.table || 'aggregated_data';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å
    const columns = Object.keys(data[0]);
    const values = data.map(row => 
      columns.map(col => {
        const val = row[col];
        return typeof val === 'string' ? `'${val.replace(/'/g, "''")}'` : val;
      }).join(', ')
    ).join('), (');
    
    const insertQuery = `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${values})`;
    
    try {
      await this.clickhouseService.query(insertQuery);
      this.logger.log(`üíæ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ ClickHouse: ${data.length} –∑–∞–ø–∏—Å–µ–π –≤ ${tableName}`);
      return data.length;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ ClickHouse:`, error.message);
      throw error;
    }
  }

  private async loadToPostgreSQL(job: AggregationJob, data: any[]): Promise<number> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PostgreSQL
    this.logger.warn('–ó–∞–≥—Ä—É–∑–∫–∞ –≤ PostgreSQL –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    return 0;
  }

  private async loadToRedis(job: AggregationJob, data: any[]): Promise<number> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Redis
    this.logger.warn('–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Redis –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    return 0;
  }

  private async loadToFile(job: AggregationJob, data: any[]): Promise<number> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    this.logger.warn('–ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ñ–∞–π–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    return 0;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private validateJobConfiguration(dto: CreateAggregationJobDto): void {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (dto.schedule.type === 'cron' && !dto.schedule.expression) {
      throw new BadRequestException('–î–ª—è cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ');
    }
    if (dto.schedule.type === 'interval' && !dto.schedule.interval) {
      throw new BadRequestException('–î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if (dto.source.incremental && !dto.source.incrementalField) {
      throw new BadRequestException('–î–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–µ');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!dto.transformation.operations || dto.transformation.operations.length === 0) {
      throw new BadRequestException('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏');
    }
  }

  private calculateNextRun(cronExpression: string, timezone = 'UTC'): Date {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const now = new Date();
      return new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 –¥–µ–Ω—å
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error.message);
      return new Date(Date.now() + 24 * 60 * 60 * 1000);
    }
  }

  private enqueueJob(jobId: string, priority: number, parameters?: Record<string, any>): void {
    if (priority >= 8) {
      this.highPriorityQueue.push(jobId);
    } else if (priority >= 4) {
      this.normalPriorityQueue.push(jobId);
    } else {
      this.lowPriorityQueue.push(jobId);
    }
    
    this.logger.log(`üìã –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${jobId} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority})`);
  }

  private removeFromQueues(jobId: string): void {
    const removeFromArray = (arr: string[]) => {
      const index = arr.indexOf(jobId);
      if (index > -1) arr.splice(index, 1);
    };
    
    removeFromArray(this.highPriorityQueue);
    removeFromArray(this.normalPriorityQueue);
    removeFromArray(this.lowPriorityQueue);
  }

  private buildWhereClause(filters: any[]): string {
    return filters.map(filter => {
      const { field, operator, value, condition } = filter;
      let clause = '';
      
      switch (operator) {
        case 'eq': clause = `${field} = '${value}'`; break;
        case 'ne': clause = `${field} != '${value}'`; break;
        case 'gt': clause = `${field} > ${value}`; break;
        case 'gte': clause = `${field} >= ${value}`; break;
        case 'lt': clause = `${field} < ${value}`; break;
        case 'lte': clause = `${field} <= ${value}`; break;
        case 'in': clause = `${field} IN (${Array.isArray(value) ? value.map(v => `'${v}'`).join(',') : `'${value}'`})`; break;
        case 'like': clause = `${field} LIKE '%${value}%'`; break;
        default: clause = `${field} = '${value}'`;
      }
      
      return clause;
    }).join(` ${filters[0]?.condition || 'AND'} `);
  }

  private createIncrementalState(jobId: string): void {
    const state: IncrementalState = {
      jobId,
      lastProcessedValue: null,
      lastProcessedTime: new Date(),
      watermark: null,
      checkpointData: {},
      version: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    
    this.incrementalStates.set(jobId, state);
  }

  private updateIncrementalState(jobId: string, data: any[]): void {
    const state = this.incrementalStates.get(jobId);
    if (!state || !data || data.length === 0) return;
    
    const job = this.jobs.get(jobId);
    if (!job?.source.incrementalField) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
    const incrementalField = job.source.incrementalField;
    const maxValue = data.reduce((max, row) => {
      const value = row[incrementalField];
      return value > max ? value : max;
    }, state.lastProcessedValue || '');
    
    state.lastProcessedValue = maxValue;
    state.lastProcessedTime = new Date();
    state.updatedAt = new Date();
    state.version++;
    
    this.incrementalStates.set(jobId, state);
  }

  private createDataLineage(job: AggregationJob): void {
    const lineage: DataLineage = {
      jobId: job.id,
      sources: [{
        type: job.source.type,
        identifier: job.source.table || job.source.endpoint || job.source.filePath || 'unknown',
        fields: [], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
      }],
      targets: [{
        type: job.target.type,
        identifier: job.target.table || job.target.filePath || 'unknown',
        fields: [], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
      }],
      transformations: job.transformation.operations.map(op => ({
        operation: op.type,
        inputFields: [op.field],
        outputFields: [op.alias || `${op.type}_${op.field}`],
        logic: `${op.type}(${op.field})`,
      })),
      dependencies: [],
      impact: [],
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    this.logger.debug(`üìä –õ–∏–Ω–µ–∞–∂ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: ${job.id}`);
  }

  private initializeDefaultTemplates(): void {
    const operationalTemplate: AggregationTemplate = {
      id: 'operational-daily',
      name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π',
      description: '–®–∞–±–ª–æ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
      category: AggregationCategory.OPERATIONAL,
      type: AggregationType.SCHEDULED,
      template: {
        source: {
          type: 'clickhouse',
          table: '{{source_table}}',
          incremental: true,
          incrementalField: 'updated_at',
        },
        target: {
          type: 'clickhouse',
          table: '{{target_table}}',
          partitioning: {
            enabled: true,
            field: 'date',
            type: 'time',
            interval: 'day',
          },
        },
        transformation: {
          operations: [
            { type: AggregationOperationType.COUNT, field: '*', alias: 'total_operations' },
            { type: AggregationOperationType.SUM, field: 'teu_count', alias: 'total_teu' },
          ],
          groupBy: ['date', 'operation_type'],
        },
        schedule: {
          type: 'cron',
          expression: '{{cron_expression}}',
          enabled: true,
          priority: 5,
        },
      },
      variables: [
        {
          name: 'source_table',
          type: 'string',
          description: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞',
          required: true,
        },
        {
          name: 'target_table',
          type: 'string',
          description: '–¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
          required: true,
        },
        {
          name: 'cron_expression',
          type: 'string',
          description: 'Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
          required: true,
          defaultValue: '0 2 * * *',
        },
      ],
      isDefault: true,
      tags: ['–æ–ø–µ—Ä–∞—Ü–∏–∏', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ç–µ—Ä–º–∏–Ω–∞–ª'],
    };

    this.templates.set(operationalTemplate.id, operationalTemplate);
    this.logger.log(`üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${this.templates.size}`);
  }

  private initializeQueues(): void {
    const defaultQueue: AggregationQueue = {
      id: 'default',
      name: '–û—Å–Ω–æ–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å',
      priority: 5,
      maxConcurrency: 5,
      currentJobs: 0,
      queuedJobs: 0,
      totalProcessed: 0,
      averageWaitTime: 0,
      status: 'active',
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    this.queues.set(defaultQueue.id, defaultQueue);
    this.logger.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ—á–µ—Ä–µ–¥–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: ${this.queues.size}`);
  }

  getServiceStats() {
    return {
      totalJobs: this.jobs.size,
      runningJobs: this.runningJobs.size,
      queuedJobs: this.highPriorityQueue.length + this.normalPriorityQueue.length + this.lowPriorityQueue.length,
      highPriorityQueue: this.highPriorityQueue.length,
      normalPriorityQueue: this.normalPriorityQueue.length,
      lowPriorityQueue: this.lowPriorityQueue.length,
      templates: this.templates.size,
      queues: this.queues.size,
      incrementalStates: this.incrementalStates.size,
      memoryUsage: process.memoryUsage(),
      uptime: process.uptime(),
    };
  }
}