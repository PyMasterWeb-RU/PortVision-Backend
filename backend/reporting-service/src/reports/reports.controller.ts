import {
  Controller,
  Get,
  Post,
  Patch,
  Delete,
  Body,
  Param,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { ReportsService } from './reports.service';
import {
  GenerateReportDto,
  ReportListDto,
  UpdateReportDto,
  BulkDeleteReportsDto,
  ReportType,
  ReportFormat,
} from './dto/report.dto';
import { ReportResult } from './interfaces/report.interface';

// –ë–∞–∑–æ–≤—ã–µ guards –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak
// import { JwtAuthGuard } from '../auth/jwt-auth.guard';
// import { RolesGuard } from '../auth/roles.guard';
// import { Roles } from '../auth/roles.decorator';

@ApiTags('reports')
@Controller('reports')
// @UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth('JWT')
export class ReportsController {
  private readonly logger = new Logger(ReportsController.name);

  constructor(private readonly reportsService: ReportsService) {}

  @Post('generate')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞',
    description: '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤',
  })
  @ApiResponse({
    status: 201,
    description: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'uuid-report-id' },
            name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024' },
            type: { type: 'string', example: 'container_operations' },
            generatedAt: { type: 'string', format: 'date-time' },
            metadata: {
              type: 'object',
              properties: {
                totalRows: { type: 'number', example: 1500 },
                executionTime: { type: 'number', example: 2340 },
                dataSource: { type: 'string', example: 'ClickHouse' },
              },
            },
          },
        },
        message: { type: 'string', example: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω' },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: false },
        error: { type: 'string', example: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞' },
        message: { type: 'string', example: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö' },
      },
    },
  })
  @ApiBody({
    type: GenerateReportDto,
    description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞',
    examples: {
      'container-operations': {
        summary: '–û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        value: {
          type: 'container_operations',
          name: '–û–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞ –¥–µ–∫–∞–±—Ä—å 2024',
          dateFrom: '2024-12-01T00:00:00.000Z',
          dateTo: '2024-12-31T23:59:59.999Z',
          groupBy: 'day',
          containerTypes: ['20FT', '40FT'],
          operationTypes: ['loading', 'unloading'],
          includeSummary: true,
          includeDetails: false,
        },
      },
      'gate-transactions': {
        summary: '–û—Ç—á–µ—Ç –ø–æ –ö–ü–ü —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º',
        value: {
          type: 'gate_transactions',
          name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ö–ü–ü –∑–∞ –Ω–µ–¥–µ–ª—é',
          dateFrom: '2024-12-01T00:00:00.000Z',
          dateTo: '2024-12-07T23:59:59.999Z',
          groupBy: 'hour',
          includeSummary: true,
          includeDetails: true,
        },
      },
      'financial-analysis': {
        summary: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',
        value: {
          type: 'financial_analysis',
          name: '–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª',
          dateFrom: '2024-10-01T00:00:00.000Z',
          dateTo: '2024-12-31T23:59:59.999Z',
          groupBy: 'month',
          clientIds: ['client-123', 'client-456'],
          includeSummary: true,
        },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST')
  async generateReport(@Body() dto: GenerateReportDto): Promise<{
    success: boolean;
    data: ReportResult;
    message: string;
  }> {
    this.logger.log(`üìä –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞: ${dto.type} - ${dto.name}`);
    
    const report = await this.reportsService.generateReport(dto);
    
    return {
      success: true,
      data: report,
      message: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
    };
  }

  @Get()
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏',
  })
  @ApiQuery({
    name: 'page',
    required: false,
    type: Number,
    description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    example: 1,
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
    example: 20,
  })
  @ApiQuery({
    name: 'type',
    required: false,
    enum: ReportType,
    description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞',
    example: ReportType.CONTAINER_OPERATIONS,
  })
  @ApiQuery({
    name: 'search',
    required: false,
    type: String,
    description: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞',
    example: '–æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            reports: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' },
                  type: { type: 'string' },
                  generatedAt: { type: 'string', format: 'date-time' },
                  metadata: {
                    type: 'object',
                    properties: {
                      totalRows: { type: 'number' },
                      executionTime: { type: 'number' },
                    },
                  },
                },
              },
            },
            total: { type: 'number', example: 45 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
          },
        },
        message: { type: 'string', example: '–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getReportsList(@Query() dto: ReportListDto): Promise<{
    success: boolean;
    data: {
      reports: Partial<ReportResult>[];
      total: number;
      page: number;
      limit: number;
    };
    message: string;
  }> {
    const data = await this.reportsService.getReportsList(dto);
    
    return {
      success: true,
      data,
      message: '–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Get(':reportId')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ ID',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤–∫–ª—é—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞',
  })
  @ApiParam({
    name: 'reportId',
    description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞',
    example: 'uuid-report-id',
  })
  @ApiResponse({
    status: 200,
    description: '–î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          description: '–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤–∫–ª—é—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
        },
        message: { type: 'string', example: '–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω' },
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: false },
        error: { type: 'string', example: '–û—Ç—á–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        message: { type: 'string', example: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getReport(@Param('reportId') reportId: string): Promise<{
    success: boolean;
    data: ReportResult;
    message: string;
  }> {
    const report = await this.reportsService.getReport(reportId);
    
    return {
      success: true,
      data: report,
      message: '–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω',
    };
  }

  @Delete(':reportId')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞',
    description: '–£–¥–∞–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID',
  })
  @ApiParam({
    name: 'reportId',
    description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
    example: 'uuid-report-id',
  })
  @ApiResponse({
    status: 204,
    description: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
  })
  @ApiResponse({
    status: 404,
    description: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: false },
        error: { type: 'string', example: '–û—Ç—á–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        message: { type: 'string', example: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
      },
    },
  })
  // @Roles('MANAGER', 'ADMIN')
  async deleteReport(@Param('reportId') reportId: string): Promise<void> {
    this.logger.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞: ${reportId}`);
    await this.reportsService.deleteReport(reportId);
  }

  @Delete()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤',
    description: '–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å',
  })
  @ApiBody({
    type: BulkDeleteReportsDto,
    description: '–°–ø–∏—Å–æ–∫ ID –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
    examples: {
      'bulk-delete': {
        summary: '–ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è',
        value: {
          reportIds: ['report-123', 'report-456', 'report-789'],
        },
      },
    },
  })
  @ApiResponse({
    status: 204,
    description: '–û—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã',
  })
  @ApiResponse({
    status: 400,
    description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
  })
  // @Roles('MANAGER', 'ADMIN')
  async bulkDeleteReports(@Body() dto: BulkDeleteReportsDto): Promise<void> {
    this.logger.log(`üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤: ${dto.reportIds.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    for (const reportId of dto.reportIds) {
      try {
        await this.reportsService.deleteReport(reportId);
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç ${reportId}: ${error.message}`);
      }
    }
  }

  @Get('types/available')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              type: { type: 'string', example: 'container_operations' },
              name: { type: 'string', example: '–û–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤' },
              description: { type: 'string', example: '–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏' },
              categories: { type: 'array', items: { type: 'string' } },
              features: { type: 'array', items: { type: 'string' } },
            },
          },
        },
        message: { type: 'string', example: '–¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getAvailableReportTypes(): Promise<{
    success: boolean;
    data: Array<{
      type: string;
      name: string;
      description: string;
      categories: string[];
      features: string[];
    }>;
    message: string;
  }> {
    const reportTypes = [
      {
        type: ReportType.CONTAINER_OPERATIONS,
        name: '–û–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É, –≤—ã–≥—Ä—É–∑–∫—É –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è',
        categories: ['–û–ø–µ—Ä–∞—Ü–∏–∏', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
        features: ['–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º', '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º', '–ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'],
      },
      {
        type: ReportType.GATE_TRANSACTIONS,
        name: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ö–ü–ü',
        description: '–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–ø—Ä–æ–ø—É—Å–∫–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
        categories: ['–ö–ü–ü', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞'],
        features: ['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Å–æ–≤'],
      },
      {
        type: ReportType.EQUIPMENT_PERFORMANCE,
        name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        categories: ['–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
        features: ['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è', '–ü–æ–ª–æ–º–∫–∏', '–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞', '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
      },
      {
        type: ReportType.FINANCIAL_ANALYSIS,
        name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',
        description: '–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤, —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        categories: ['–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        features: ['–î–æ—Ö–æ–¥—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º', '–ê–Ω–∞–ª–∏–∑ —É—Å–ª—É–≥', '–¢—Ä–µ–Ω–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π'],
      },
      {
        type: ReportType.INVENTORY_STATUS,
        name: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
        description: '–û—Ç—á–µ—Ç—ã –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤',
        categories: ['–°–∫–ª–∞–¥', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        features: ['–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å', '–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è', '–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'],
      },
      {
        type: ReportType.PRODUCTIVITY_ANALYSIS,
        name: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        categories: ['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'KPI'],
        features: ['–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ—Ä–µ–≥–æ–≤', '–û–±—â–∏–µ KPI'],
      },
      {
        type: ReportType.CLIENT_ACTIVITY,
        name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
        description: '–ê–Ω–∞–ª–∏–∑ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        categories: ['–ö–ª–∏–µ–Ω—Ç—ã', 'CRM'],
        features: ['–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤', '–û–±—ä–µ–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π', '–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'],
      },
      {
        type: ReportType.TERMINAL_KPI,
        name: 'KPI —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        description: '–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
        categories: ['KPI', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
        features: ['–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ—Ä–µ–≥–æ–≤', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      },
    ];

    return {
      success: true,
      data: reportTypes,
      message: '–¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('formats/supported')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              format: { type: 'string', example: 'excel' },
              name: { type: 'string', example: 'Microsoft Excel' },
              extension: { type: 'string', example: '.xlsx' },
              mimeType: { type: 'string', example: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' },
              features: { type: 'array', items: { type: 'string' } },
            },
          },
        },
        message: { type: 'string', example: '–§–æ—Ä–º–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã' },
      },
    },
  })
  // @Roles('MANAGER', 'DISPATCHER', 'ANALYST', 'VIEWER')
  async getSupportedFormats(): Promise<{
    success: boolean;
    data: Array<{
      format: string;
      name: string;
      extension: string;
      mimeType: string;
      features: string[];
    }>;
    message: string;
  }> {
    const formats = [
      {
        format: ReportFormat.JSON,
        name: 'JSON',
        extension: '.json',
        mimeType: 'application/json',
        features: ['–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–í–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
      },
      {
        format: ReportFormat.CSV,
        name: 'CSV',
        extension: '.csv',
        mimeType: 'text/csv',
        features: ['–ò–º–ø–æ—Ä—Ç –≤ Excel', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å'],
      },
      {
        format: ReportFormat.EXCEL,
        name: 'Microsoft Excel',
        extension: '.xlsx',
        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        features: ['–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–î–∏–∞–≥—Ä–∞–º–º—ã', '–†–∞—Å—á–µ—Ç—ã'],
      },
      {
        format: ReportFormat.PDF,
        name: 'PDF',
        extension: '.pdf',
        mimeType: 'application/pdf',
        features: ['–ü–µ—á–∞—Ç—å', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      },
    ];

    return {
      success: true,
      data: formats,
      message: '–§–æ—Ä–º–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã',
    };
  }

  @Get('stats/service')
  @ApiOperation({
    summary: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            cachedReports: { type: 'number', example: 15 },
            memoryUsage: {
              type: 'object',
              properties: {
                rss: { type: 'number' },
                heapTotal: { type: 'number' },
                heapUsed: { type: 'number' },
                external: { type: 'number' },
              },
            },
            uptime: { type: 'number', example: 3600 },
          },
        },
        message: { type: 'string', example: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞' },
      },
    },
  })
  // @Roles('ADMIN', 'MANAGER')
  async getServiceStats(): Promise<{
    success: boolean;
    data: any;
    message: string;
  }> {
    const stats = this.reportsService.getServiceStats();
    
    return {
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    };
  }
}