import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { IoAdapter } from '@nestjs/platform-socket.io';
import { WebSocketHubModule } from './websocket-hub.module';

async function bootstrap() {
  const logger = new Logger('WebSocketHubBootstrap');
  
  const app = await NestFactory.create(WebSocketHubModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });
  
  const configService = app.get(ConfigService);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware –∏ pipes
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
    disableErrorMessages: false,
    transformOptions: {
      enableImplicitConversion: true,
    },
  }));

  app.setGlobalPrefix('api');

  // CORS –¥–ª—è WebSocket –∏ HTTP
  app.enableCors({
    origin: process.env.NODE_ENV === 'production' 
      ? configService.get('CORS_ORIGINS', '').split(',').filter(Boolean)
      : ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:5173'],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With'],
    credentials: true,
  });

  // Socket.IO –∞–¥–∞–ø—Ç–µ—Ä
  app.useWebSocketAdapter(new IoAdapter(app));

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  const config = new DocumentBuilder()
    .setTitle('PortVision 360 - WebSocket Hub API')
    .setDescription(`
      API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏.
      
      ## WebSocket Gateways:
      - **Terminal** (\`/terminal\`) - –û—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      - **Operations** (\`/operations\`) - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      - **Equipment** (\`/equipment\`) - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      - **Notifications** (\`/notifications\`) - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
      
      ## –§—É–Ω–∫—Ü–∏–∏:
      - Real-time WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
      - –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      - –î–æ—Å—Ç–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º
    `)
    .setVersion('1.0')
    .setContact(
      'PortVision 360 Support', 
      'https://github.com/portvision360', 
      'support@portvision360.com'
    )
    .setLicense('GNU AGPL v3', 'https://www.gnu.org/licenses/agpl-3.0.en.html')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      },
      'JWT'
    )
    .addTag('WebSocket Connections', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ –∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    .addTag('Notifications', '–°–æ–∑–¥–∞–Ω–∏–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏')
    .addTag('Metrics & Monitoring', '–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞–ª–µ—Ä—Ç—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,
  });
  
  SwaggerModule.setup('api-docs', app, document, {
    customSiteTitle: 'WebSocket Hub API Documentation',
    customfavIcon: '/favicon.ico',
    customCss: `
      .swagger-ui .topbar { display: none; }
      .swagger-ui .info hgroup.main a { color: #3b82f6; }
      .swagger-ui .scheme-container { padding: 30px 0; }
    `,
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
      filter: true,
      showExtensions: true,
      tryItOutEnabled: true,
    },
  });

  const port = configService.get('WEBSOCKET_PORT', 3000);
  const host = configService.get('HOST', '0.0.0.0');
  
  await app.listen(port, host);
  
  logger.log(`üöÄ WebSocket Hub –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${host}:${port}`);
  logger.log(`üìù API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${port}/api-docs`);
  logger.log(`üîå WebSocket Gateways:`);
  logger.log(`   ‚Ä¢ Terminal: ws://localhost:3003/terminal`);
  logger.log(`   ‚Ä¢ Operations: ws://localhost:3004/operations`);
  logger.log(`   ‚Ä¢ Equipment: ws://localhost:3005/equipment`);
  logger.log(`   ‚Ä¢ Notifications: ws://localhost:3006/notifications`);
  logger.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${configService.get('DB_HOST', 'localhost')}:${configService.get('DB_PORT', 5432)}`);
  logger.log(`üóÇÔ∏è  Redis: ${configService.get('REDIS_URL', 'redis://localhost:6379')}`);
  logger.log(`üîê JWT Secret: ${configService.get('JWT_SECRET') ? '***' : 'default (–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)'}`);
  logger.log(`üåç Environment: ${configService.get('NODE_ENV', 'development')}`);
}

bootstrap().catch(err => {
  const logger = new Logger('WebSocketHubBootstrap');
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket Hub:', err.stack || err);
  process.exit(1);
});